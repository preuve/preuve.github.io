// Generated by purs version 0.15.9
import * as Data_DateTime_Instant from "../Data.DateTime.Instant/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Time_Duration from "../Data.Time.Duration/index.js";
import * as Effect_Now from "../Effect.Now/index.js";
import * as Effect_Timer from "../Effect.Timer/index.js";
import * as FRP_Event from "../FRP.Event/index.js";
import * as FRP_Event_Class from "../FRP.Event.Class/index.js";
var map = /* #__PURE__ */ Data_Functor.map(FRP_Event.functorEvent);
var fix = /* #__PURE__ */ FRP_Event_Class.fix(FRP_Event.eventIsEvent);
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Time_Duration.semigroupMilliseconds);
var lessThan = /* #__PURE__ */ Data_Ord.lessThan(Data_DateTime_Instant.ordDateTime);
var gateBy = /* #__PURE__ */ FRP_Event_Class.gateBy(FRP_Event.eventIsEvent);
var withTime = function (e) {
    return FRP_Event.makeEvent(function (k) {
        return FRP_Event.subscribe(e)(function (value) {
            return function __do() {
                var time = Effect_Now.now();
                return k({
                    time: time,
                    value: value
                })();
            };
        });
    });
};
var interval = function (n) {
    return FRP_Event.makeEvent(function (k) {
        return function __do() {
            var id = Effect_Timer.setInterval(n)(function __do() {
                var time = Effect_Now.now();
                return k(time)();
            })();
            return Effect_Timer.clearInterval(id);
        };
    });
};
var debounceWith = function (process) {
    return function (event) {
        var stamped = withTime(event);
        return map(function (v) {
            return v.value;
        })(fix(function (processed) {
            var expiries = map(function (v) {
                return Data_Maybe.fromMaybe(v.time)(Data_DateTime_Instant.instant(append(Data_DateTime_Instant.unInstant(v.time))(v.value)));
            })(withTime(map(function (v) {
                return v.period;
            })(processed)));
            var comparison = function (a) {
                return function (b) {
                    return Data_Maybe.maybe(true)(function (v) {
                        return lessThan(v)(b.time);
                    })(a);
                };
            };
            var unblocked = gateBy(comparison)(expiries)(stamped);
            return process(map(function (v) {
                return v.value;
            })(unblocked));
        }));
    };
};
var debounce = function (period) {
    return debounceWith(map(function (v) {
        return {
            period: period,
            value: v
        };
    }));
};
export {
    interval,
    withTime,
    debounce,
    debounceWith
};
