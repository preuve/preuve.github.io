// Generated by purs version 0.15.9
import * as Data_CommutativeRing from "../Data.CommutativeRing/index.js";
import * as Data_DivisionRing from "../Data.DivisionRing/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_EuclideanRing from "../Data.EuclideanRing/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Number from "../Data.Number/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ring from "../Data.Ring/index.js";
import * as Data_Semiring from "../Data.Semiring/index.js";
import * as Data_Show from "../Data.Show/index.js";
var Cartesian = /* #__PURE__ */ (function () {
    function Cartesian(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cartesian.create = function (value0) {
        return function (value1) {
            return new Cartesian(value0, value1);
        };
    };
    return Cartesian;
})();
var showCartesian = function (dictShow) {
    var show = Data_Show.show(dictShow);
    return function (dictOrd) {
        var lessThan = Data_Ord.lessThan(dictOrd);
        return function (dictSemiring) {
            return function (dictRing) {
                var zero1 = Data_Semiring.zero(dictRing.Semiring0());
                var negate = Data_Ring.negate(dictRing);
                return {
                    show: function (v) {
                        return show(v.value0) + ((function () {
                            var $84 = lessThan(v.value1)(zero1);
                            if ($84) {
                                return "-" + show(negate(v.value1));
                            };
                            return "+" + show(v.value1);
                        })() + "i");
                    }
                };
            };
        };
    };
};
var semiringCartesian = function (dictRing) {
    var Semiring0 = dictRing.Semiring0();
    var add = Data_Semiring.add(Semiring0);
    var zero1 = Data_Semiring.zero(Semiring0);
    var sub1 = Data_Ring.sub(dictRing);
    var mul3 = Data_Semiring.mul(Semiring0);
    return {
        add: function (v) {
            return function (v1) {
                return new Cartesian(add(v.value0)(v1.value0), add(v.value1)(v1.value1));
            };
        },
        zero: new Cartesian(zero1, zero1),
        mul: function (v) {
            return function (v1) {
                return new Cartesian(sub1(mul3(v.value0)(v1.value0))(mul3(v.value1)(v1.value1)), add(mul3(v.value0)(v1.value1))(mul3(v.value1)(v1.value0)));
            };
        },
        one: new Cartesian(Data_Semiring.one(Semiring0), zero1)
    };
};
var semiringCartesian1 = /* #__PURE__ */ semiringCartesian(Data_Ring.ringNumber);
var mul1 = /* #__PURE__ */ Data_Semiring.mul(semiringCartesian1);
var zero = /* #__PURE__ */ Data_Semiring.zero(semiringCartesian1);
var mul2 = /* #__PURE__ */ Data_Semiring.mul(/* #__PURE__ */ semiringCartesian(Data_Ring.ringInt));
var real = function (v) {
    return v.value0;
};
var imag = function (v) {
    return v.value1;
};
var i = function (dictSemiring) {
    return new Cartesian(Data_Semiring.zero(dictSemiring), Data_Semiring.one(dictSemiring));
};
var functorCartesian = {
    map: function (f) {
        return function (v) {
            return new Cartesian(f(v.value0), f(v.value1));
        };
    }
};
var map = /* #__PURE__ */ Data_Functor.map(functorCartesian);
var ringCartesian = function (dictRing) {
    var semiringCartesian2 = semiringCartesian(dictRing);
    var add = Data_Semiring.add(semiringCartesian2);
    var Semiring0 = dictRing.Semiring0();
    var mul3 = Data_Semiring.mul(Semiring0);
    var sub1 = Data_Ring.sub(dictRing);
    var zero1 = Data_Semiring.zero(Semiring0);
    var one = Data_Semiring.one(Semiring0);
    return {
        sub: function (z1) {
            return function (z2) {
                return add(z1)(map(function (v) {
                    return mul3(v)(sub1(zero1)(one));
                })(z2));
            };
        },
        Semiring0: function () {
            return semiringCartesian2;
        }
    };
};
var sub = /* #__PURE__ */ Data_Ring.sub(/* #__PURE__ */ ringCartesian(Data_Ring.ringInt));
var fromPolar = function (r) {
    return function (theta) {
        return new Cartesian(r * Data_Number.cos(theta), r * Data_Number.sin(theta));
    };
};
var eqCartesian = function (dictEq) {
    var eq = Data_Eq.eq(dictEq);
    return {
        eq: function (v) {
            return function (v1) {
                return eq(v.value0)(v1.value0) && eq(v.value1)(v1.value1);
            };
        }
    };
};
var conjugate = function (dictRing) {
    var negate = Data_Ring.negate(dictRing);
    return function (v) {
        return new Cartesian(v.value0, negate(v.value1));
    };
};
var magnitudeSquared = function (dictRing) {
    var mul3 = Data_Semiring.mul(semiringCartesian(dictRing));
    var conjugate1 = conjugate(dictRing);
    return function (z) {
        return real(mul3(z)(conjugate1(z)));
    };
};
var magnitudeSquared1 = /* #__PURE__ */ magnitudeSquared(Data_Ring.ringNumber);
var divisionRingCartesian = function (dictDivisionRing) {
    var Ring0 = dictDivisionRing.Ring0();
    var mul3 = Data_Semiring.mul(Ring0.Semiring0());
    var recip1 = Data_DivisionRing.recip(dictDivisionRing);
    var magnitudeSquared2 = magnitudeSquared(Ring0);
    var conjugate1 = conjugate(Ring0);
    var ringCartesian1 = ringCartesian(Ring0);
    return {
        recip: function (z) {
            return map(function (v) {
                return mul3(v)(recip1(magnitudeSquared2(z)));
            })(conjugate1(z));
        },
        Ring0: function () {
            return ringCartesian1;
        }
    };
};
var recip = /* #__PURE__ */ Data_DivisionRing.recip(/* #__PURE__ */ divisionRingCartesian(Data_DivisionRing.divisionringNumber));
var normalize = function (z) {
    return map(function (v) {
        return v / Data_Number.sqrt(magnitudeSquared1(z));
    })(z);
};
var commutativeRingCartesian = function (dictCommutativeRing) {
    var ringCartesian1 = ringCartesian(dictCommutativeRing.Ring0());
    return {
        Ring0: function () {
            return ringCartesian1;
        }
    };
};
var commutativeRingCartesian1 = /* #__PURE__ */ commutativeRingCartesian(Data_CommutativeRing.commutativeRingNumber);
var commutativeRingCartesian2 = /* #__PURE__ */ commutativeRingCartesian(Data_CommutativeRing.commutativeRingInt);
var euclideanRingCartesianNumber = {
    degree: function ($121) {
        return Data_Int.ceil(magnitudeSquared1($121));
    },
    div: function (z) {
        return function (z$prime) {
            return mul1(z)(recip(z$prime));
        };
    },
    mod: function (v) {
        return function (v1) {
            return zero;
        };
    },
    CommutativeRing0: function () {
        return commutativeRingCartesian1;
    }
};
var div1 = /* #__PURE__ */ Data_EuclideanRing.div(euclideanRingCartesianNumber);
var euclideanRingCartesianInt = {
    degree: /* #__PURE__ */ magnitudeSquared(Data_Ring.ringInt),
    div: function (z) {
        return function (z$prime) {
            return map(Data_Int.round)(div1(map(Data_Int.toNumber)(z))(map(Data_Int.toNumber)(z$prime)));
        };
    },
    mod: function (z) {
        return function (z$prime) {
            return sub(z)(mul2(z$prime)(Data_EuclideanRing.div(euclideanRingCartesianInt)(z)(z$prime)));
        };
    },
    CommutativeRing0: function () {
        return commutativeRingCartesian2;
    }
};
var angle = function (v) {
    return Data_Number.atan2(v.value1)(v.value0);
};
var pow = function (z) {
    return function (n) {
        return fromPolar(Data_Number.pow(Data_Number.sqrt(magnitudeSquared1(z)))(n))(angle(z) * n);
    };
};
export {
    Cartesian,
    angle,
    conjugate,
    fromPolar,
    i,
    imag,
    magnitudeSquared,
    normalize,
    pow,
    real,
    showCartesian,
    eqCartesian,
    semiringCartesian,
    functorCartesian,
    ringCartesian,
    commutativeRingCartesian,
    divisionRingCartesian,
    euclideanRingCartesianNumber,
    euclideanRingCartesianInt
};
