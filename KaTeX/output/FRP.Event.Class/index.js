// Generated by purs version 0.15.9
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Data_Compactable from "../Data.Compactable/index.js";
import * as Data_Filterable from "../Data.Filterable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var map = /* #__PURE__ */ Data_Functor.map(Data_Tuple.functorTuple);
var pure = /* #__PURE__ */ Control_Applicative.pure(Data_Maybe.applicativeMaybe);
var sampleOnRight = function (dict) {
    return dict.sampleOnRight;
};
var sampleOnRightOp = function (dictIsEvent) {
    var sampleOnRight1 = sampleOnRight(dictIsEvent);
    var map1 = Data_Functor.map((dictIsEvent.Filterable1()).Functor1());
    return function (ef) {
        return function (ea) {
            return sampleOnRight1(ef)(map1(Data_Function.applyFlipped)(ea));
        };
    };
};
var sampleOnRight_ = function (dictIsEvent) {
    var sampleOnRight1 = sampleOnRight(dictIsEvent);
    var map1 = Data_Functor.map((dictIsEvent.Filterable1()).Functor1());
    return function (a) {
        return function (b) {
            return sampleOnRight1(a)(map1(Data_Function["const"](identity))(b));
        };
    };
};
var sampleOnLeft = function (dict) {
    return dict.sampleOnLeft;
};
var sampleOnLeftOp = function (dictIsEvent) {
    var sampleOnLeft1 = sampleOnLeft(dictIsEvent);
    var map1 = Data_Functor.map((dictIsEvent.Filterable1()).Functor1());
    return function (ef) {
        return function (ea) {
            return sampleOnLeft1(ef)(map1(Data_Function.applyFlipped)(ea));
        };
    };
};
var sampleOnLeft_ = function (dictIsEvent) {
    var sampleOnLeft1 = sampleOnLeft(dictIsEvent);
    var map1 = Data_Functor.map((dictIsEvent.Filterable1()).Functor1());
    return function (a) {
        return function (b) {
            return sampleOnLeft1(a)(map1(Data_Function["const"])(b));
        };
    };
};
var keepLatest = function (dict) {
    return dict.keepLatest;
};
var gateBy = function (dictIsEvent) {
    var Filterable1 = dictIsEvent.Filterable1();
    var compact = Data_Compactable.compact(Filterable1.Compactable0());
    var sampleOnRightOp1 = sampleOnRightOp(dictIsEvent);
    var map1 = Data_Functor.map(Filterable1.Functor1());
    var Alternative0 = dictIsEvent.Alternative0();
    var alt = Control_Alt.alt((Alternative0.Plus1()).Alt0());
    var pure1 = Control_Applicative.pure(Alternative0.Applicative0());
    return function (f) {
        return function (sampled) {
            return function (sampler) {
                return compact(sampleOnRightOp1(map1(function (p) {
                    return function (x) {
                        var $80 = f(p)(x);
                        if ($80) {
                            return new Data_Maybe.Just(x);
                        };
                        return Data_Maybe.Nothing.value;
                    };
                })(alt(pure1(Data_Maybe.Nothing.value))(map1(Data_Maybe.Just.create)(sampled))))(sampler));
            };
        };
    };
};
var gate = function (dictIsEvent) {
    return gateBy(dictIsEvent)(function (x) {
        return function (v) {
            return Data_Maybe.fromMaybe(false)(x);
        };
    });
};
var fix = function (dict) {
    return dict.fix;
};
var fold = function (dictIsEvent) {
    var fix1 = fix(dictIsEvent);
    var sampleOnRight1 = sampleOnRight(dictIsEvent);
    var Alternative0 = dictIsEvent.Alternative0();
    var alt = Control_Alt.alt((Alternative0.Plus1()).Alt0());
    var pure1 = Control_Applicative.pure(Alternative0.Applicative0());
    var map1 = Data_Functor.map((dictIsEvent.Filterable1()).Functor1());
    return function (f) {
        return function (b) {
            return function (e) {
                return fix1(function (i) {
                    return sampleOnRight1(alt(i)(pure1(b)))(map1(Data_Function.flip(f))(e));
                });
            };
        };
    };
};
var folded = function (dictIsEvent) {
    var fold1 = fold(dictIsEvent);
    return function (dictMonoid) {
        return fold1(Data_Semigroup.append(dictMonoid.Semigroup0()))(Data_Monoid.mempty(dictMonoid));
    };
};
var mapAccum = function (dictIsEvent) {
    var filterMap = Data_Filterable.filterMap(dictIsEvent.Filterable1());
    var fold1 = fold(dictIsEvent);
    return function (f) {
        return function (acc) {
            return function (xs) {
                return filterMap(Data_Tuple.snd)(fold1(function (v) {
                    return function (b) {
                        return map(pure)(f(v.value0)(b));
                    };
                })(new Data_Tuple.Tuple(acc, Data_Maybe.Nothing.value))(xs));
            };
        };
    };
};
var withLast = function (dictIsEvent) {
    var filterMap = Data_Filterable.filterMap(dictIsEvent.Filterable1());
    var fold1 = fold(dictIsEvent);
    return function (e) {
        var step = function (v) {
            return function (v1) {
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just({
                        now: v1,
                        last: Data_Maybe.Nothing.value
                    });
                };
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Maybe.Just({
                        now: v1,
                        last: new Data_Maybe.Just(v.value0.now)
                    });
                };
                throw new Error("Failed pattern match at FRP.Event.Class (line 83, column 3 - line 83, column 50): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
        return filterMap(identity)(fold1(step)(Data_Maybe.Nothing.value)(e));
    };
};
var count = function (dictIsEvent) {
    return fold(dictIsEvent)(function (n) {
        return function (v) {
            return n + 1 | 0;
        };
    })(0);
};
var applyOp = function (dictApplicative) {
    var Apply0 = dictApplicative.Apply0();
    var apply = Control_Apply.apply(Apply0);
    var map1 = Data_Functor.map(Apply0.Functor0());
    return function (ea) {
        return function (ef) {
            return apply(map1(Data_Function.applyFlipped)(ea))(ef);
        };
    };
};
export {
    fold,
    folded,
    count,
    mapAccum,
    withLast,
    sampleOnRight,
    sampleOnRightOp,
    sampleOnRight_,
    sampleOnLeft,
    sampleOnLeftOp,
    sampleOnLeft_,
    applyOp,
    keepLatest,
    fix,
    gate,
    gateBy
};
export {
    filterMap
} from "../Data.Filterable/index.js";
