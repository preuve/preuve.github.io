// Generated by purs version 0.15.9
import * as $foreign from "./foreign.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_EuclideanRing from "../Data.EuclideanRing/index.js";
import * as Data_FastVect_Common from "../Data.FastVect.Common/index.js";
import * as Data_Filterable from "../Data.Filterable/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_FoldableWithIndex from "../Data.FoldableWithIndex/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_FunctorWithIndex from "../Data.FunctorWithIndex/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var showRecord = /* #__PURE__ */ Data_Show.showRecord()();
var showRecordFieldsCons = /* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "elem";
    }
})(/* #__PURE__ */ Data_Show.showRecordFieldsConsNil({
    reflectSymbol: function () {
        return "ix";
    }
})(Data_Show.showInt));
var map = /* #__PURE__ */ Data_Functor.map(Data_List_Types.functorList);
var filter = /* #__PURE__ */ Data_Filterable.filter(Data_Filterable.filterableList);
var pure = /* #__PURE__ */ Control_Applicative.pure(Data_List_Types.applicativeList);
var unfoldr = /* #__PURE__ */ Data_Unfoldable.unfoldr(Data_List_Types.unfoldableList);
var mod = /* #__PURE__ */ Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt);
var findMap = /* #__PURE__ */ Data_Foldable.findMap(Data_List_Types.foldableList);
var filterMap = /* #__PURE__ */ Data_Filterable.filterMap(Data_Filterable.filterableList);
var alter = /* #__PURE__ */ Data_Map_Internal.alter(Data_Ord.ordInt);
var eqMap = /* #__PURE__ */ Data_Map_Internal.eqMap(Data_Eq.eqInt);
var ordMap = /* #__PURE__ */ Data_Map_Internal.ordMap(Data_Ord.ordInt);
var update = /* #__PURE__ */ Data_Map_Internal.update(Data_Ord.ordInt);
var apply = /* #__PURE__ */ Control_Apply.apply(/* #__PURE__ */ Data_Map_Internal.applyMap(Data_Ord.ordInt));
var append2 = /* #__PURE__ */ Data_Semigroup.append(Data_List_Types.semigroupList);
var Vect = function (x) {
    return x;
};
var showVect = function (dictShow) {
    var show1 = Data_Show.show(Data_List_Types.showList(showRecord(showRecordFieldsCons(dictShow))));
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return {
            show: function (v) {
                return "Vect.Sparse.Read " + (show(toInt(Data_FastVect_Common.term)) + (" " + show1(v)));
            }
        };
    };
};
var functorVect = {
    map: function (f) {
        return function (v) {
            return map(function (v1) {
                return {
                    ix: v1.ix,
                    elem: f(v1.elem)
                };
            })(v);
        };
    }
};
var functorWithIndexIntVect = {
    mapWithIndex: function (f) {
        return function (v) {
            return map(function (v1) {
                return {
                    ix: v1.ix,
                    elem: f(v1.ix)(v1.elem)
                };
            })(v);
        };
    },
    Functor0: function () {
        return functorVect;
    }
};
var mapWithIndex = /* #__PURE__ */ Data_FunctorWithIndex.mapWithIndex(functorWithIndexIntVect);
var foldableVect = {
    foldl: function (bab) {
        var go = function ($copy_v) {
            return function ($copy_v1) {
                return function ($copy_v2) {
                    var $tco_var_v = $copy_v;
                    var $tco_var_v1 = $copy_v1;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v, v1, v2) {
                        if (v2 instanceof Data_List_Types.Nil) {
                            $tco_done = true;
                            return v1;
                        };
                        if (v2 instanceof Data_List_Types.Cons && $foreign.hasImpl(v2.value0.ix)(v)) {
                            $tco_var_v = v;
                            $tco_var_v1 = v1;
                            $copy_v2 = v2.value1;
                            return;
                        };
                        if (v2 instanceof Data_List_Types.Cons) {
                            $tco_var_v = $foreign.insertImpl(v2.value0.ix)(v);
                            $tco_var_v1 = bab(v1)(v2.value0.elem);
                            $copy_v2 = v2.value1;
                            return;
                        };
                        throw new Error("Failed pattern match at Data.FastVect.Sparse.Write (line 99, column 5 - line 99, column 31): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                    };
                    return $tco_result;
                };
            };
        };
        return go($foreign.emptyImpl);
    },
    foldr: function (i) {
        return Data_Foldable.foldrDefault(foldableVect)(i);
    },
    foldMap: function (dictMonoid) {
        return function (i) {
            return Data_Foldable.foldMapDefaultL(foldableVect)(dictMonoid)(i);
        };
    }
};
var foldableWithIndexIntVect = {
    foldlWithIndex: function (ibab) {
        var go = function ($copy_v) {
            return function ($copy_v1) {
                return function ($copy_v2) {
                    var $tco_var_v = $copy_v;
                    var $tco_var_v1 = $copy_v1;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(v, v1, v2) {
                        if (v2 instanceof Data_List_Types.Nil) {
                            $tco_done = true;
                            return v1;
                        };
                        if (v2 instanceof Data_List_Types.Cons && $foreign.hasImpl(v2.value0.ix)(v)) {
                            $tco_var_v = v;
                            $tco_var_v1 = v1;
                            $copy_v2 = v2.value1;
                            return;
                        };
                        if (v2 instanceof Data_List_Types.Cons) {
                            $tco_var_v = $foreign.insertImpl(v2.value0.ix)(v);
                            $tco_var_v1 = ibab(v2.value0.ix)(v1)(v2.value0.elem);
                            $copy_v2 = v2.value1;
                            return;
                        };
                        throw new Error("Failed pattern match at Data.FastVect.Sparse.Write (line 108, column 5 - line 108, column 31): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                    };
                    return $tco_result;
                };
            };
        };
        return go($foreign.emptyImpl);
    },
    foldrWithIndex: function (i) {
        return Data_FoldableWithIndex.foldrWithIndexDefault(foldableWithIndexIntVect)(i);
    },
    foldMapWithIndex: function (dictMonoid) {
        return function (i) {
            return Data_FoldableWithIndex.foldMapWithIndexDefaultL(foldableWithIndexIntVect)(dictMonoid)(i);
        };
    },
    Foldable0: function () {
        return foldableVect;
    }
};
var traversableVect = {
    traverse: function (dictApplicative) {
        var pure1 = Control_Applicative.pure(dictApplicative);
        var Apply0 = dictApplicative.Apply0();
        var apply1 = Control_Apply.apply(Apply0);
        var map1 = Data_Functor.map(Apply0.Functor0());
        return function (amb) {
            var go = function (v) {
                return function (v1) {
                    if (v1 instanceof Data_List_Types.Nil) {
                        return pure1(Data_List_Types.Nil.value);
                    };
                    if (v1 instanceof Data_List_Types.Cons && $foreign.hasImpl(v1.value0.ix)(v)) {
                        return go(v)(v1.value1);
                    };
                    if (v1 instanceof Data_List_Types.Cons) {
                        return apply1(map1(function (v2) {
                            return function (v3) {
                                return new Data_List_Types.Cons({
                                    ix: v1.value0.ix,
                                    elem: v2
                                }, v3);
                            };
                        })(amb(v1.value0.elem)))(go($foreign.insertImpl(v1.value0.ix)(v))(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.FastVect.Sparse.Write (line 117, column 5 - line 117, column 48): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return go($foreign.emptyImpl);
        };
    },
    sequence: function (dictApplicative) {
        return Data_Traversable.sequenceDefault(traversableVect)(dictApplicative);
    },
    Functor0: function () {
        return functorVect;
    },
    Foldable1: function () {
        return foldableVect;
    }
};
var traversableWithIndexIntVe = {
    traverseWithIndex: function (dictApplicative) {
        var pure1 = Control_Applicative.pure(dictApplicative);
        var Apply0 = dictApplicative.Apply0();
        var apply1 = Control_Apply.apply(Apply0);
        var map1 = Data_Functor.map(Apply0.Functor0());
        return function (iamb) {
            var go = function (v) {
                return function (v1) {
                    if (v1 instanceof Data_List_Types.Nil) {
                        return pure1(Data_List_Types.Nil.value);
                    };
                    if (v1 instanceof Data_List_Types.Cons && $foreign.hasImpl(v1.value0.ix)(v)) {
                        return go(v)(v1.value1);
                    };
                    if (v1 instanceof Data_List_Types.Cons) {
                        return apply1(map1(function (v2) {
                            return function (v3) {
                                return new Data_List_Types.Cons({
                                    ix: v1.value0.ix,
                                    elem: v2
                                }, v3);
                            };
                        })(iamb(v1.value0.ix)(v1.value0.elem)))(go($foreign.insertImpl(v1.value0.ix)(v))(v1.value1));
                    };
                    throw new Error("Failed pattern match at Data.FastVect.Sparse.Write (line 128, column 5 - line 128, column 48): " + [ v.constructor.name, v1.constructor.name ]);
                };
            };
            return go($foreign.emptyImpl);
        };
    },
    FunctorWithIndex0: function () {
        return functorWithIndexIntVect;
    },
    FoldableWithIndex1: function () {
        return foldableWithIndexIntVect;
    },
    Traversable2: function () {
        return traversableVect;
    }
};
var isVectVect = {
    TraversableWithIndex0: function () {
        return traversableWithIndexIntVe;
    }
};
var unsafeCoerceTerm = function (v) {
    return function (f) {
        var f1 = f()();
        return function (i) {
            return (function () {
                return function () {
                    return function (dictReflectable) {
                        return f1(dictReflectable);
                    };
                };
            })(Data_Unit.unit)(Data_Unit.unit)({
                reflectType: function (v1) {
                    return i;
                }
            })(Type_Proxy["Proxy"].value);
        };
    };
};
var toList = function () {
    return function (v) {
        return v;
    };
};
var take = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function () {
            return function () {
                return function (proxy) {
                    return function (v) {
                        var takes = toInt(proxy);
                        return filter(function (v1) {
                            return v1.ix < takes;
                        })(v);
                    };
                };
            };
        };
    };
};
var splitAt = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function () {
            return function () {
                return function (proxy) {
                    return function (v) {
                        var splits = toInt(proxy);
                        return (function (v1) {
                            return {
                                before: v1.yes,
                                after: v1.no
                            };
                        })(Data_List.partition(function (v1) {
                            return v1.ix < splits;
                        })(v));
                    };
                };
            };
        };
    };
};
var sparse = /* #__PURE__ */ (function () {
    return Data_List_Types.Nil.value;
})();
var snoc = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function () {
            return function (v) {
                return function (elem) {
                    return new Data_List_Types.Cons({
                        ix: toInt(Type_Proxy["Proxy"].value),
                        elem: elem
                    }, v);
                };
            };
        };
    };
};
var singleton = function (elem) {
    return pure({
        ix: 0,
        elem: elem
    });
};
var set = function (dictReflectable) {
    var toInt = Data_FastVect_Common.toInt(dictReflectable);
    return function () {
        return function () {
            return function () {
                return function (proxy) {
                    return function (elem) {
                        return function (v) {
                            return new Data_List_Types.Cons({
                                ix: toInt(proxy),
                                elem: elem
                            }, v);
                        };
                    };
                };
            };
        };
    };
};
var replicate = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function (proxy) {
            return function (elem) {
                var terminus = toInt(proxy);
                return unfoldr(function (v) {
                    var $244 = v.ix === terminus;
                    if ($244) {
                        return Data_Maybe.Nothing.value;
                    };
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(v, {
                        ix: v.ix + 1 | 0,
                        elem: elem
                    }));
                })({
                    ix: 0,
                    elem: elem
                });
            };
        };
    };
};
var replicate1 = /* #__PURE__ */ replicate();
var mapWithTerm = function (dictReflectable) {
    return function () {
        return function (f) {
            var f1 = f()();
            return function (xs) {
                return mapWithIndex(function (i) {
                    return function (elem) {
                        return unsafeCoerceTerm(Type_Proxy["Proxy"].value)(function () {
                            return function () {
                                return function (dictReflectable1) {
                                    return f1(dictReflectable1);
                                };
                            };
                        })(i)(elem);
                    };
                })(xs);
            };
        };
    };
};
var indexModulo = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function (i) {
            return function (v) {
                var moded = mod(i)(toInt(Type_Proxy["Proxy"].value));
                return findMap(function (v1) {
                    var $249 = moded === v1.ix;
                    if ($249) {
                        return new Data_Maybe.Just(v1.elem);
                    };
                    return Data_Maybe.Nothing.value;
                })(v);
            };
        };
    };
};
var index = function (dictReflectable) {
    var toInt = Data_FastVect_Common.toInt(dictReflectable);
    return function () {
        return function () {
            return function () {
                return function (proxy) {
                    return function (v) {
                        var ixInt = toInt(proxy);
                        return findMap(function (v1) {
                            var $255 = ixInt === v1.ix;
                            if ($255) {
                                return new Data_Maybe.Just(v1.elem);
                            };
                            return Data_Maybe.Nothing.value;
                        })(v);
                    };
                };
            };
        };
    };
};
var head = function () {
    return function (v) {
        return findMap(function (v1) {
            var $260 = v1.ix === 0;
            if ($260) {
                return new Data_Maybe.Just(v1.elem);
            };
            return Data_Maybe.Nothing.value;
        })(v);
    };
};
var generate = function (dictReflectable) {
    var toInt = Data_FastVect_Common.toInt(dictReflectable);
    return function () {
        return function (v) {
            return function (f) {
                var f1 = f()();
                return map(function (i) {
                    return {
                        ix: i,
                        elem: unsafeCoerceTerm(Type_Proxy["Proxy"].value)(function () {
                            return function () {
                                return function (dictReflectable1) {
                                    return f1(dictReflectable1);
                                };
                            };
                        })(i)
                    };
                })(Data_List.range(0)(toInt(Type_Proxy["Proxy"].value) - 1 | 0));
            };
        };
    };
};
var empty = /* #__PURE__ */ (function () {
    return Data_List_Types.Nil.value;
})();
var drop = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function () {
            return function () {
                return function (proxy) {
                    return function (v) {
                        var drops = toInt(proxy);
                        return filterMap(function (v1) {
                            var $266 = v1.ix >= drops;
                            if ($266) {
                                return new Data_Maybe.Just({
                                    ix: v1.ix - drops | 0,
                                    elem: v1.elem
                                });
                            };
                            return Data_Maybe.Nothing.value;
                        })(v);
                    };
                };
            };
        };
    };
};
var cons = function () {
    return function () {
        return function (elem) {
            return function (v) {
                return new Data_List_Types.Cons({
                    ix: 0,
                    elem: elem
                }, map(function (v1) {
                    return {
                        ix: v1.ix + 1 | 0,
                        elem: v1.elem
                    };
                })(v));
            };
        };
    };
};
var asMap = /* #__PURE__ */ Data_Foldable.foldl(Data_List_Types.foldableList)(function (b) {
    return function (v) {
        return alter(function (v1) {
            if (v1 instanceof Data_Maybe.Just) {
                return new Data_Maybe.Just(v1.value0);
            };
            if (v1 instanceof Data_Maybe.Nothing) {
                return new Data_Maybe.Just(v.elem);
            };
            throw new Error("Failed pattern match at Data.FastVect.Sparse.Write (line 66, column 9 - line 68, column 31): " + [ v1.constructor.name ]);
        })(v.ix)(b);
    };
})(Data_Map_Internal.empty);
var eqVect = function (dictEq) {
    var eq1 = Data_Eq.eq(eqMap(dictEq));
    return {
        eq: function (v) {
            return function (v1) {
                return eq1(asMap(v))(asMap(v1));
            };
        }
    };
};
var ordVect = function (dictOrd) {
    var compare = Data_Ord.compare(ordMap(dictOrd));
    var eqVect1 = eqVect(dictOrd.Eq0());
    return {
        compare: function (v) {
            return function (v1) {
                return compare(asMap(v))(asMap(v1));
            };
        },
        Eq0: function () {
            return eqVect1;
        }
    };
};
var asListOfTuples = /* #__PURE__ */ (function () {
    return Data_FoldableWithIndex.foldlWithIndex(Data_Map_Internal.foldableWithIndexMap)(function (ix) {
        return function (b) {
            return function (elem) {
                return new Data_List_Types.Cons({
                    ix: ix,
                    elem: elem
                }, b);
            };
        };
    })(Data_List_Types.Nil.value);
})();
var fromMap = function (dictReflectable) {
    var toInt = Data_FastVect_Common.toInt(dictReflectable);
    return function () {
        return function (v) {
            return function (v1) {
                var v2 = function (v3) {
                    return Data_Maybe.Nothing.value;
                };
                var $285 = Data_Map_Internal.findMax(v1);
                if ($285 instanceof Data_Maybe.Just) {
                    var $286 = $285.value0.key < toInt(v) && $285.value0.key >= 0;
                    if ($286) {
                        return new Data_Maybe.Just(asListOfTuples(v1));
                    };
                    return v2(true);
                };
                return v2(true);
            };
        };
    };
};
var modify = function (dictReflectable) {
    var toInt = Data_FastVect_Common.toInt(dictReflectable);
    return function () {
        return function () {
            return function () {
                return function (proxy) {
                    return function (f) {
                        return function (v) {
                            return asListOfTuples(update(function ($299) {
                                return Data_Maybe.Just.create(f($299));
                            })(toInt(proxy))(asMap(v)));
                        };
                    };
                };
            };
        };
    };
};
var applyVect = {
    apply: function (v) {
        return function (v1) {
            return asListOfTuples(apply(asMap(v))(asMap(v1)));
        };
    },
    Functor0: function () {
        return functorVect;
    }
};
var applicativeVect = function () {
    return function (dictReflectable) {
        return {
            pure: replicate1(dictReflectable)(Type_Proxy["Proxy"].value),
            Apply0: function () {
                return applyVect;
            }
        };
    };
};
var append = function () {
    return function () {
        return function (dictReflectable) {
            var toInt = Data_FastVect_Common.toInt(dictReflectable);
            return function () {
                return function (v) {
                    return function (v1) {
                        return append2(v)(map(function (v2) {
                            return {
                                ix: v2.ix + toInt(Type_Proxy["Proxy"].value) | 0,
                                elem: v2.elem
                            };
                        })(v1));
                    };
                };
            };
        };
    };
};
export {
    append,
    cons,
    drop,
    empty,
    fromMap,
    generate,
    head,
    index,
    indexModulo,
    mapWithTerm,
    modify,
    replicate,
    set,
    singleton,
    snoc,
    sparse,
    splitAt,
    take,
    toList,
    showVect,
    eqVect,
    ordVect,
    functorVect,
    applyVect,
    applicativeVect,
    functorWithIndexIntVect,
    foldableVect,
    foldableWithIndexIntVect,
    traversableVect,
    traversableWithIndexIntVe,
    isVectVect
};
