// Generated by purs version 0.15.9
import * as CSS_Property from "../CSS.Property/index.js";
import * as CSS_String from "../CSS.String/index.js";
import * as CSS_Stylesheet from "../CSS.Stylesheet/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Show from "../Data.Show/index.js";
var fromString = /* #__PURE__ */ CSS_String.fromString(CSS_Property.isStringValue);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showString);
var compare = /* #__PURE__ */ Data_Ord.compare(Data_Ord.ordString);
var Disc = /* #__PURE__ */ (function () {
    function Disc() {

    };
    Disc.value = new Disc();
    return Disc;
})();
var Circle = /* #__PURE__ */ (function () {
    function Circle() {

    };
    Circle.value = new Circle();
    return Circle;
})();
var Square = /* #__PURE__ */ (function () {
    function Square() {

    };
    Square.value = new Square();
    return Square;
})();
var Decimal = /* #__PURE__ */ (function () {
    function Decimal() {

    };
    Decimal.value = new Decimal();
    return Decimal;
})();
var Georgian = /* #__PURE__ */ (function () {
    function Georgian() {

    };
    Georgian.value = new Georgian();
    return Georgian;
})();
var CJKIdeographic = /* #__PURE__ */ (function () {
    function CJKIdeographic() {

    };
    CJKIdeographic.value = new CJKIdeographic();
    return CJKIdeographic;
})();
var Kannada = /* #__PURE__ */ (function () {
    function Kannada() {

    };
    Kannada.value = new Kannada();
    return Kannada;
})();
var None = /* #__PURE__ */ (function () {
    function None() {

    };
    None.value = new None();
    return None;
})();
var Inherit = /* #__PURE__ */ (function () {
    function Inherit() {

    };
    Inherit.value = new Inherit();
    return Inherit;
})();
var Initial = /* #__PURE__ */ (function () {
    function Initial() {

    };
    Initial.value = new Initial();
    return Initial;
})();
var Unset = /* #__PURE__ */ (function () {
    function Unset() {

    };
    Unset.value = new Unset();
    return Unset;
})();
var CustomStyleType = /* #__PURE__ */ (function () {
    function CustomStyleType(value0) {
        this.value0 = value0;
    };
    CustomStyleType.create = function (value0) {
        return new CustomStyleType(value0);
    };
    return CustomStyleType;
})();
var StringStyleType = /* #__PURE__ */ (function () {
    function StringStyleType(value0) {
        this.value0 = value0;
    };
    StringStyleType.create = function (value0) {
        return new StringStyleType(value0);
    };
    return StringStyleType;
})();
var valListStyleType = {
    value: function (v) {
        if (v instanceof Disc) {
            return fromString("disc");
        };
        if (v instanceof Circle) {
            return fromString("circle");
        };
        if (v instanceof Square) {
            return fromString("square");
        };
        if (v instanceof Decimal) {
            return fromString("decimal");
        };
        if (v instanceof Georgian) {
            return fromString("georgian");
        };
        if (v instanceof CJKIdeographic) {
            return fromString("cjk-ideographic");
        };
        if (v instanceof Kannada) {
            return fromString("kannada");
        };
        if (v instanceof None) {
            return fromString("none");
        };
        if (v instanceof Initial) {
            return fromString("initial");
        };
        if (v instanceof Inherit) {
            return fromString("inherit");
        };
        if (v instanceof Unset) {
            return fromString("unset");
        };
        if (v instanceof CustomStyleType) {
            return fromString("custom-" + v.value0);
        };
        if (v instanceof StringStyleType) {
            return fromString(v.value0);
        };
        throw new Error("Failed pattern match at CSS.ListStyle.Type (line 46, column 1 - line 59, column 43): " + [ v.constructor.name ]);
    }
};
var unsetListStyleType = /* #__PURE__ */ (function () {
    return {
        unset: Unset.value
    };
})();
var stringListStyleType = function (s) {
    return new StringStyleType(s);
};
var square = /* #__PURE__ */ (function () {
    return Square.value;
})();
var showListStyleType = {
    show: function (v) {
        if (v instanceof Disc) {
            return "Disc";
        };
        if (v instanceof Circle) {
            return "Circle";
        };
        if (v instanceof Square) {
            return "Square";
        };
        if (v instanceof Decimal) {
            return "Decimal";
        };
        if (v instanceof Georgian) {
            return "Georgian";
        };
        if (v instanceof CJKIdeographic) {
            return "CJKIdeographic";
        };
        if (v instanceof Kannada) {
            return "Kannada";
        };
        if (v instanceof None) {
            return "None";
        };
        if (v instanceof Inherit) {
            return "Inherit";
        };
        if (v instanceof Initial) {
            return "Initial";
        };
        if (v instanceof Unset) {
            return "Unset";
        };
        if (v instanceof CustomStyleType) {
            return "(CustomStyleType " + (show(v.value0) + ")");
        };
        if (v instanceof StringStyleType) {
            return "(StringStyleType " + (show(v.value0) + ")");
        };
        throw new Error("Failed pattern match at CSS.ListStyle.Type (line 31, column 1 - line 44, column 66): " + [ v.constructor.name ]);
    }
};
var noneListTypeType = /* #__PURE__ */ (function () {
    return {
        none: None.value
    };
})();
var listStyleType = /* #__PURE__ */ CSS_Stylesheet.key(valListStyleType)(/* #__PURE__ */ CSS_String.fromString(CSS_Property.isStringKey)("list-style-type"));
var kannada = /* #__PURE__ */ (function () {
    return Kannada.value;
})();
var initialListStyleType = /* #__PURE__ */ (function () {
    return {
        initial: Initial.value
    };
})();
var inheritListStyleType = /* #__PURE__ */ (function () {
    return {
        inherit: Inherit.value
    };
})();
var georgian = /* #__PURE__ */ (function () {
    return Georgian.value;
})();
var eqListStyleType = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Disc && y instanceof Disc) {
                return true;
            };
            if (x instanceof Circle && y instanceof Circle) {
                return true;
            };
            if (x instanceof Square && y instanceof Square) {
                return true;
            };
            if (x instanceof Decimal && y instanceof Decimal) {
                return true;
            };
            if (x instanceof Georgian && y instanceof Georgian) {
                return true;
            };
            if (x instanceof CJKIdeographic && y instanceof CJKIdeographic) {
                return true;
            };
            if (x instanceof Kannada && y instanceof Kannada) {
                return true;
            };
            if (x instanceof None && y instanceof None) {
                return true;
            };
            if (x instanceof Inherit && y instanceof Inherit) {
                return true;
            };
            if (x instanceof Initial && y instanceof Initial) {
                return true;
            };
            if (x instanceof Unset && y instanceof Unset) {
                return true;
            };
            if (x instanceof CustomStyleType && y instanceof CustomStyleType) {
                return x.value0 === y.value0;
            };
            if (x instanceof StringStyleType && y instanceof StringStyleType) {
                return x.value0 === y.value0;
            };
            return false;
        };
    }
};
var ordListStyleType = {
    compare: function (x) {
        return function (y) {
            if (x instanceof Disc && y instanceof Disc) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Disc) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Disc) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Circle && y instanceof Circle) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Circle) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Circle) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Square && y instanceof Square) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Square) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Square) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Decimal && y instanceof Decimal) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Decimal) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Decimal) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Georgian && y instanceof Georgian) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Georgian) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Georgian) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof CJKIdeographic && y instanceof CJKIdeographic) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof CJKIdeographic) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof CJKIdeographic) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Kannada && y instanceof Kannada) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Kannada) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Kannada) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof None && y instanceof None) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof None) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof None) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Inherit && y instanceof Inherit) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Inherit) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Inherit) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Initial && y instanceof Initial) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Initial) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Initial) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Unset && y instanceof Unset) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Unset) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Unset) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof CustomStyleType && y instanceof CustomStyleType) {
                return compare(x.value0)(y.value0);
            };
            if (x instanceof CustomStyleType) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof CustomStyleType) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof StringStyleType && y instanceof StringStyleType) {
                return compare(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at CSS.ListStyle.Type (line 0, column 0 - line 0, column 0): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqListStyleType;
    }
};
var disc = /* #__PURE__ */ (function () {
    return Disc.value;
})();
var decimal = /* #__PURE__ */ (function () {
    return Decimal.value;
})();
var customListStyleType = function (s) {
    return new CustomStyleType(s);
};
var cjkIdeographic = /* #__PURE__ */ (function () {
    return CJKIdeographic.value;
})();
var circle = /* #__PURE__ */ (function () {
    return Circle.value;
})();
export {
    Disc,
    Circle,
    Square,
    Decimal,
    Georgian,
    CJKIdeographic,
    Kannada,
    None,
    Inherit,
    Initial,
    Unset,
    CustomStyleType,
    StringStyleType,
    disc,
    circle,
    square,
    decimal,
    georgian,
    cjkIdeographic,
    kannada,
    customListStyleType,
    stringListStyleType,
    listStyleType,
    eqListStyleType,
    ordListStyleType,
    showListStyleType,
    valListStyleType,
    initialListStyleType,
    inheritListStyleType,
    unsetListStyleType,
    noneListTypeType
};
