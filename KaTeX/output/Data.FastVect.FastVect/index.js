// Generated by purs version 0.15.9
import * as $foreign from "./foreign.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_NonEmpty from "../Data.Array.NonEmpty/index.js";
import * as Data_Array_NonEmpty_Internal from "../Data.Array.NonEmpty.Internal/index.js";
import * as Data_Distributive from "../Data.Distributive/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_EuclideanRing from "../Data.EuclideanRing/index.js";
import * as Data_FastVect_Common from "../Data.FastVect.Common/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_FoldableWithIndex from "../Data.FoldableWithIndex/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_FunctorWithIndex from "../Data.FunctorWithIndex/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ring from "../Data.Ring/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Semigroup_Foldable from "../Data.Semigroup.Foldable/index.js";
import * as Data_Semigroup_Traversable from "../Data.Semigroup.Traversable/index.js";
import * as Data_Semiring from "../Data.Semiring/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_TraversableWithIndex from "../Data.TraversableWithIndex/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var foldMap1 = /* #__PURE__ */ Data_Semigroup_Foldable.foldMap1(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray);
var foldr1 = /* #__PURE__ */ Data_Semigroup_Foldable.foldr1(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray);
var foldl1 = /* #__PURE__ */ Data_Semigroup_Foldable.foldl1(Data_Array_NonEmpty_Internal.foldable1NonEmptyArray);
var sequence1 = /* #__PURE__ */ Data_Semigroup_Traversable.sequence1(Data_Array_NonEmpty_Internal.traversable1NonEmptyArray);
var mod = /* #__PURE__ */ Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var append2 = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var abs = /* #__PURE__ */ Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt);
var Vect = function (x) {
    return x;
};
var traversableWithIndexIntVe = Data_TraversableWithIndex.traversableWithIndexArray;
var traversableVect = Data_Traversable.traversableArray;
var showVect = function (dictShow) {
    var show1 = Data_Show.show(Data_Show.showArray(dictShow));
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return {
            show: function (v) {
                return "Vect " + (show(toInt(Data_FastVect_Common.term)) + (" " + show1(v)));
            }
        };
    };
};
var ordVect = function (dictOrd) {
    return Data_Ord.ordArray(dictOrd);
};
var isVectVect = {
    TraversableWithIndex0: function () {
        return traversableWithIndexIntVe;
    }
};
var functorWithIndexIntVect = Data_FunctorWithIndex.functorWithIndexArray;
var mapWithIndex = /* #__PURE__ */ Data_FunctorWithIndex.mapWithIndex(functorWithIndexIntVect);
var functorVect = Data_Functor.functorArray;
var foldableWithIndexIntVect = Data_FoldableWithIndex.foldableWithIndexArray;
var foldableVect = Data_Foldable.foldableArray;
var eqVect = function (dictEq) {
    return Data_Eq.eqArray(dictEq);
};
var applyVect = {
    apply: function (v) {
        return function (v1) {
            return Data_Array.zipWith(Data_Function.apply)(v)(v1);
        };
    },
    Functor0: function () {
        return functorVect;
    }
};
var lift2 = /* #__PURE__ */ Control_Apply.lift2(applyVect);
var apply = /* #__PURE__ */ Control_Apply.apply(applyVect);
var semigroupVect = function (dictSemigroup) {
    return {
        append: lift2(Data_Semigroup.append(dictSemigroup))
    };
};
var unsafeCoerceTerm = function (v) {
    return function (f) {
        var f1 = f()();
        return function (i) {
            return (function () {
                return function () {
                    return function (dictReflectable) {
                        return f1(dictReflectable);
                    };
                };
            })(Data_Unit.unit)(Data_Unit.unit)({
                reflectType: function (v1) {
                    return i;
                }
            })(Type_Proxy["Proxy"].value);
        };
    };
};
var toNonEmptyArray = function () {
    return function (v) {
        return v;
    };
};
var toNonEmptyArray1 = /* #__PURE__ */ toNonEmptyArray();
var foldable1Vect = function () {
    return {
        foldMap1: function (dictSemigroup) {
            var foldMap11 = foldMap1(dictSemigroup);
            return function (f) {
                return function (xs) {
                    return foldMap11(f)(toNonEmptyArray1(xs));
                };
            };
        },
        foldr1: function (f) {
            return function (xs) {
                return foldr1(f)(toNonEmptyArray1(xs));
            };
        },
        foldl1: function (f) {
            return function (xs) {
                return foldl1(f)(toNonEmptyArray1(xs));
            };
        },
        Foldable0: function () {
            return foldableVect;
        }
    };
};
var foldable1Vect1 = /* #__PURE__ */ foldable1Vect();
var traversable1Vect = function () {
    return {
        traverse1: function (dictApply) {
            return Data_Semigroup_Traversable.traverse1Default(traversable1Vect())(dictApply);
        },
        sequence1: function (dictApply) {
            var map1 = Data_Functor.map(dictApply.Functor0());
            var sequence11 = sequence1(dictApply);
            return function (xs) {
                var unsafeFromNonEmptyArray = function ($208) {
                    return Vect(Data_Array_NonEmpty.toArray($208));
                };
                return map1(unsafeFromNonEmptyArray)(sequence11(toNonEmptyArray1(xs)));
            };
        },
        Foldable10: function () {
            return foldable1Vect1;
        },
        Traversable1: function () {
            return traversableVect;
        }
    };
};
var toArray = function () {
    return function (v) {
        return v;
    };
};
var take = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function () {
            return function () {
                return function (proxy) {
                    return function (v) {
                        return Data_Array.take(toInt(proxy))(v);
                    };
                };
            };
        };
    };
};
var splitAt = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function () {
            return function () {
                return function (proxy) {
                    return function (v) {
                        var v1 = Data_Array.splitAt(toInt(proxy))(v);
                        return {
                            before: v1.before,
                            after: v1.after
                        };
                    };
                };
            };
        };
    };
};
var snoc = function () {
    return function (dictReflectable) {
        return function () {
            return function (v) {
                return function (elem) {
                    return Data_Array.snoc(v)(elem);
                };
            };
        };
    };
};
var singleton = function (elem) {
    return [ elem ];
};
var replicate = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function (proxy) {
            return function (elem) {
                return Data_Array.replicate(toInt(proxy))(elem);
            };
        };
    };
};
var replicate1 = /* #__PURE__ */ replicate();
var applicativeVect = function () {
    return function (dictReflectable) {
        return {
            pure: replicate1(dictReflectable)(Type_Proxy["Proxy"].value),
            Apply0: function () {
                return applyVect;
            }
        };
    };
};
var applicativeVect1 = /* #__PURE__ */ applicativeVect();
var monoidVect = function () {
    return function (dictReflectable) {
        var pure = Control_Applicative.pure(applicativeVect1(dictReflectable));
        return function (dictMonoid) {
            var semigroupVect1 = semigroupVect(dictMonoid.Semigroup0());
            return {
                mempty: pure(Data_Monoid.mempty(dictMonoid)),
                Semigroup0: function () {
                    return semigroupVect1;
                }
            };
        };
    };
};
var semiringVect = function () {
    return function (dictReflectable) {
        var pure = Control_Applicative.pure(applicativeVect1(dictReflectable));
        return function (dictSemiring) {
            return {
                add: lift2(Data_Semiring.add(dictSemiring)),
                zero: pure(Data_Semiring.zero(dictSemiring)),
                mul: lift2(Data_Semiring.mul(dictSemiring)),
                one: pure(Data_Semiring.one(dictSemiring))
            };
        };
    };
};
var semiringVect1 = /* #__PURE__ */ semiringVect();
var ringVect = function () {
    return function (dictReflectable) {
        var semiringVect2 = semiringVect1(dictReflectable);
        return function (dictRing) {
            var semiringVect3 = semiringVect2(dictRing.Semiring0());
            return {
                sub: lift2(Data_Ring.sub(dictRing)),
                Semiring0: function () {
                    return semiringVect3;
                }
            };
        };
    };
};
var ringVect1 = /* #__PURE__ */ ringVect();
var commutativeRingVect = function () {
    return function (dictReflectable) {
        var ringVect2 = ringVect1(dictReflectable);
        return function (dictCommutativeRing) {
            var ringVect3 = ringVect2(dictCommutativeRing.Ring0());
            return {
                Ring0: function () {
                    return ringVect3;
                }
            };
        };
    };
};
var reifyVect = function (arr) {
    return function (f) {
        return f(arr);
    };
};
var modify = function (dictReflectable) {
    var toInt = Data_FastVect_Common.toInt(dictReflectable);
    return function () {
        return function () {
            return function () {
                return function (proxy) {
                    return $foreign.modifyImpl(toInt(proxy));
                };
            };
        };
    };
};
var set = function (dictReflectable) {
    var modify1 = modify(dictReflectable)()()();
    return function () {
        return function () {
            return function () {
                return function (proxy) {
                    var $209 = modify1(proxy);
                    return function ($210) {
                        return $209(Data_Function["const"]($210));
                    };
                };
            };
        };
    };
};
var mapWithTerm = function (dictReflectable) {
    return function () {
        return function (f) {
            var f1 = f()();
            return function (vect) {
                return mapWithIndex(function (i) {
                    return function (elem) {
                        return unsafeCoerceTerm(Type_Proxy["Proxy"].value)(function () {
                            return function () {
                                return function (dictReflectable1) {
                                    return f1(dictReflectable1);
                                };
                            };
                        })(i)(elem);
                    };
                })(vect);
            };
        };
    };
};
var last = function () {
    return function (dictReflectable) {
        return $foreign.indexImpl(Data_FastVect_Common.toInt(dictReflectable)(Data_FastVect_Common.term) - 1 | 0);
    };
};
var indexModulo = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function (i) {
            return $foreign.indexImpl(mod(i)(toInt(Type_Proxy["Proxy"].value)));
        };
    };
};
var index = function (dictReflectable) {
    var toInt = Data_FastVect_Common.toInt(dictReflectable);
    return function () {
        return function () {
            return function () {
                return function ($211) {
                    return $foreign.indexImpl(toInt($211));
                };
            };
        };
    };
};
var head = function () {
    return $foreign.indexImpl(0);
};
var generate = function (dictReflectable) {
    var toInt = Data_FastVect_Common.toInt(dictReflectable);
    return function () {
        return function (v) {
            return function (f) {
                var f1 = f()();
                return map(function (i) {
                    return unsafeCoerceTerm(Type_Proxy["Proxy"].value)(function () {
                        return function () {
                            return function (dictReflectable1) {
                                return f1(dictReflectable1);
                            };
                        };
                    })(i);
                })(Data_Array.range(0)(toInt(Type_Proxy["Proxy"].value) - 1 | 0));
            };
        };
    };
};
var distributiveVect = function () {
    return function (dictReflectable) {
        var generate1 = generate(dictReflectable)();
        return {
            distribute: function (dictFunctor) {
                var map1 = Data_Functor.map(dictFunctor);
                return function (xss) {
                    var f = function () {
                        return function () {
                            return function (dictReflectable1) {
                                var index1 = index(dictReflectable1)()()();
                                return function (v) {
                                    return map1(index1(Type_Proxy["Proxy"].value))(xss);
                                };
                            };
                        };
                    };
                    var f1 = f()();
                    return generate1(Type_Proxy["Proxy"].value)(function () {
                        return function () {
                            return function (dictReflectable1) {
                                return f1(dictReflectable1);
                            };
                        };
                    });
                };
            },
            collect: function (dictFunctor) {
                return Data_Distributive.collectDefault(distributiveVect()(dictReflectable))(dictFunctor);
            },
            Functor0: function () {
                return functorVect;
            }
        };
    };
};
var distributiveVect1 = /* #__PURE__ */ distributiveVect();
var bindVect = function () {
    return function (dictReflectable) {
        var distribute = Data_Distributive.distribute(distributiveVect1(dictReflectable))(Data_Functor.functorFn);
        return {
            bind: function (vec) {
                return function (f) {
                    return apply(distribute(f))(vec);
                };
            },
            Apply0: function () {
                return applyVect;
            }
        };
    };
};
var bindVect1 = /* #__PURE__ */ bindVect();
var monadVect = function () {
    return function (dictReflectable) {
        var applicativeVect2 = applicativeVect1(dictReflectable);
        var bindVect2 = bindVect1(dictReflectable);
        return {
            Applicative0: function () {
                return applicativeVect2;
            },
            Bind1: function () {
                return bindVect2;
            }
        };
    };
};
var fromArray = function (dictReflectable) {
    var toInt = Data_FastVect_Common.toInt(dictReflectable);
    return function () {
        return function (v) {
            return function (v1) {
                if (Data_Array.length(v1) === toInt(v)) {
                    return new Data_Maybe.Just(v1);
                };
                return Data_Maybe.Nothing.value;
            };
        };
    };
};
var empty = [  ];
var drop = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function () {
            return function () {
                return function (proxy) {
                    return function (v) {
                        return Data_Array.drop(toInt(proxy))(v);
                    };
                };
            };
        };
    };
};
var cons = function () {
    return function () {
        return function (elem) {
            return function (v) {
                return Data_Array.cons(elem)(v);
            };
        };
    };
};
var append = function () {
    return function () {
        return function (dictReflectable) {
            return function () {
                return function (v) {
                    return function (v1) {
                        return append2(v)(v1);
                    };
                };
            };
        };
    };
};
var adjust = function (dictReflectable) {
    var toInt = Data_FastVect_Common.toInt(dictReflectable);
    return function () {
        return function (proxy) {
            return function (elem) {
                return function (array) {
                    var v = Data_Array.length(array) - toInt(proxy) | 0;
                    if (v === 0) {
                        return array;
                    };
                    if (v < 0) {
                        return append2(Data_Array.replicate(abs(v))(elem))(array);
                    };
                    return Data_Array.drop(v)(array);
                };
            };
        };
    };
};
var adjustM = function (dictMonoid) {
    var mempty = Data_Monoid.mempty(dictMonoid);
    return function (dictReflectable) {
        var adjust1 = adjust(dictReflectable)();
        return function () {
            return function (proxy) {
                return adjust1(proxy)(mempty);
            };
        };
    };
};
export {
    adjust,
    adjustM,
    append,
    cons,
    drop,
    empty,
    fromArray,
    generate,
    head,
    last,
    index,
    indexModulo,
    mapWithTerm,
    modify,
    reifyVect,
    replicate,
    set,
    singleton,
    snoc,
    splitAt,
    take,
    toArray,
    toNonEmptyArray,
    showVect,
    eqVect,
    ordVect,
    functorVect,
    applyVect,
    applicativeVect,
    bindVect,
    monadVect,
    functorWithIndexIntVect,
    foldableVect,
    foldableWithIndexIntVect,
    foldable1Vect,
    traversableVect,
    traversableWithIndexIntVe,
    traversable1Vect,
    distributiveVect,
    semigroupVect,
    monoidVect,
    semiringVect,
    ringVect,
    commutativeRingVect,
    isVectVect
};
