// Generated by purs version 0.15.9
import * as $foreign from "./foreign.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Reflectable from "../Data.Reflectable/index.js";
import * as Data_Semiring from "../Data.Semiring/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var showBigInt = {
    show: $foreign.toString
};
var semiringBigInt = {
    add: $foreign.biAdd,
    zero: $foreign.biZero,
    mul: $foreign.biMul,
    one: $foreign.biOne
};
var one = /* #__PURE__ */ Data_Semiring.one(semiringBigInt);
var zero = /* #__PURE__ */ Data_Semiring.zero(semiringBigInt);
var ringBigInt = {
    sub: $foreign.biSub,
    Semiring0: function () {
        return semiringBigInt;
    }
};
var eqBigInt = {
    eq: $foreign.biEquals
};
var notEq = /* #__PURE__ */ Data_Eq.notEq(eqBigInt);
var eq = /* #__PURE__ */ Data_Eq.eq(eqBigInt);
var ordBigInt = {
    compare: function (x) {
        return function (y) {
            var v = $foreign.biCompare(x)(y);
            if (v === 1) {
                return Data_Ordering.GT.value;
            };
            if (v === 0) {
                return Data_Ordering.EQ.value;
            };
            return Data_Ordering.LT.value;
        };
    },
    Eq0: function () {
        return eqBigInt;
    }
};
var commutativeRingBigInt = {
    Ring0: function () {
        return ringBigInt;
    }
};
var euclideanRingBigInt = {
    degree: $foreign.biDegree,
    div: $foreign.biDiv,
    mod: $foreign.biMod,
    CommutativeRing0: function () {
        return commutativeRingBigInt;
    }
};
var toInt = function ($19) {
    return Data_Int.fromNumber($foreign.toNumber($19));
};
var odd = function (x) {
    return notEq($foreign.and(x)(one))(zero);
};
var fromTLInt = function () {
    return function (dictReflectable) {
        var reflectType = Data_Reflectable.reflectType(dictReflectable);
        return function (v) {
            return $foreign.fromTypeLevelInt(reflectType(Type_Proxy["Proxy"].value));
        };
    };
};
var fromString = /* #__PURE__ */ (function () {
    return $foreign.fromStringImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
})();
var fromNumber = /* #__PURE__ */ (function () {
    return $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
})();
var even = function (x) {
    return eq($foreign.and(x)(one))(zero);
};
var parity = function (n) {
    var $18 = even(n);
    if ($18) {
        return Data_Int.Even.value;
    };
    return Data_Int.Odd.value;
};
export {
    fromInt,
    toNumber,
    asIntN,
    asUintN,
    toString,
    toStringAs,
    pow,
    not,
    and,
    or,
    shl,
    shr,
    xor
} from "./foreign.js";
export {
    fromNumber,
    fromString,
    fromTLInt,
    toInt,
    even,
    odd,
    parity,
    semiringBigInt,
    ringBigInt,
    commutativeRingBigInt,
    euclideanRingBigInt,
    eqBigInt,
    ordBigInt,
    showBigInt
};
export {
    Even,
    Odd,
    binary,
    decimal,
    hexadecimal,
    octal
} from "../Data.Int/index.js";
