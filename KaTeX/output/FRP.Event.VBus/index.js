// Generated by purs version 0.15.9
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Monad_ST_Internal from "../Control.Monad.ST.Internal/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as FRP_Event from "../FRP.Event/index.js";
import * as Record from "../Record/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var pure = /* #__PURE__ */ Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST);
var Vbus = function (x) {
    return x;
};
var vbusNil = {
    vb: function (v) {
        return pure(new Data_Tuple.Tuple({}, {}));
    }
};
var vb = function (dict) {
    return dict.vb;
};
var vbackdoor = {
    vbus: /* #__PURE__ */ (function () {
        var vbus__ = function () {
            return function (dictVBus) {
                var vb1 = vb(dictVBus);
                return function (v) {
                    return function (f) {
                        return FRP_Event.makeLemmingEvent(function (v1) {
                            return function (k) {
                                return function __do() {
                                    var v2 = vb1(Type_Proxy["Proxy"].value)();
                                    k(f(v2.value0)(v2.value1))();
                                    return pure(Data_Unit.unit);
                                };
                            };
                        });
                    };
                };
            };
        };
        var vbus__1 = vbus__();
        var vbus_ = function () {
            return function (dictVBus) {
                return vbus__1(dictVBus);
            };
        };
        return vbus_;
    })()
};
var vbus = function () {
    return function (dictVBus) {
        return function (i) {
            return (function (v) {
                return v()(dictVBus);
            })(vbackdoor.vbus)(i);
        };
    };
};
var vbusCons1 = function (dictIsSymbol) {
    var insert = Record.insert(dictIsSymbol)()();
    return function () {
        return function () {
            return function () {
                return function (dictVBus) {
                    var vb1 = vb(dictVBus);
                    return function (dictVBus1) {
                        var vb2 = vb(dictVBus1);
                        return function () {
                            return function () {
                                return {
                                    vb: function (v) {
                                        return function __do() {
                                            var v1 = vb2(Type_Proxy["Proxy"].value)();
                                            var v2 = vb1(Type_Proxy["Proxy"].value)();
                                            return new Data_Tuple.Tuple(insert(Type_Proxy["Proxy"].value)(v2.value0)(v1.value0), insert(Type_Proxy["Proxy"].value)(v2.value1)(v1.value1));
                                        };
                                    }
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var vbusCons2 = function (dictIsSymbol) {
    var insert = Record.insert(dictIsSymbol)()();
    return function () {
        return function () {
            return function (dictVBus) {
                var vb1 = vb(dictVBus);
                return function () {
                    return function () {
                        return {
                            vb: function (v) {
                                return function __do() {
                                    var v1 = vb1(Type_Proxy["Proxy"].value)();
                                    var v2 = FRP_Event.create();
                                    return new Data_Tuple.Tuple(insert(Type_Proxy["Proxy"].value)(v2.push)(v1.value0), insert(Type_Proxy["Proxy"].value)(v2.event)(v1.value1));
                                };
                            }
                        };
                    };
                };
            };
        };
    };
};
export {
    vbus,
    Vbus,
    vb,
    vbackdoor,
    vbusNil,
    vbusCons1,
    vbusCons2
};
