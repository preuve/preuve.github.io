// Generated by purs version 0.15.9
import * as Deku_Attribute from "../Deku.Attribute/index.js";
var AriaReadonly = /* #__PURE__ */ (function () {
    function AriaReadonly() {

    };
    AriaReadonly.value = new AriaReadonly();
    return AriaReadonly;
})();
var attrView_AriaReadonlyStri = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrUse_AriaReadonlyStrin = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrTspan_AriaReadonlyStr = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrText_AriaReadonlyStri = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrTextPath_AriaReadonly = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrSymbol_AriaReadonlySt = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrSvg_AriaReadonlyStrin = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrRect_AriaReadonlyStri = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrPolyline_AriaReadonly = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrPolygon_AriaReadonlyS = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrPath_AriaReadonlyStri = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrMarker_AriaReadonlySt = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrLine_AriaReadonlyStri = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrG_AriaReadonlyString = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrForeignObject_AriaRea = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrEllipse_AriaReadonlyS = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrCircle_AriaReadonlySt = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrAriaReadonlyUnit = {
    attr: function (v) {
        return function (v1) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-readonly",
                value: Deku_Attribute["unset$prime"]
            });
        };
    }
};
export {
    AriaReadonly,
    attrCircle_AriaReadonlySt,
    attrEllipse_AriaReadonlyS,
    attrForeignObject_AriaRea,
    attrG_AriaReadonlyString,
    attrLine_AriaReadonlyStri,
    attrMarker_AriaReadonlySt,
    attrPath_AriaReadonlyStri,
    attrPolygon_AriaReadonlyS,
    attrPolyline_AriaReadonly,
    attrRect_AriaReadonlyStri,
    attrSvg_AriaReadonlyStrin,
    attrSymbol_AriaReadonlySt,
    attrText_AriaReadonlyStri,
    attrTextPath_AriaReadonly,
    attrTspan_AriaReadonlyStr,
    attrUse_AriaReadonlyStrin,
    attrView_AriaReadonlyStri,
    attrAriaReadonlyUnit
};
