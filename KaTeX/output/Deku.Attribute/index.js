// Generated by purs version 0.15.9
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Plus from "../Control.Plus/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Effect from "../Effect/index.js";
import * as FRP_Event from "../FRP.Event/index.js";
import * as Safe_Coerce from "../Safe.Coerce/index.js";
var pure = /* #__PURE__ */ Control_Applicative.pure(FRP_Event.applicativeEvent);
var empty = /* #__PURE__ */ Control_Plus.empty(FRP_Event.plusEvent);
var Cb = function (x) {
    return x;
};
var Prop$prime = /* #__PURE__ */ (function () {
    function Prop$prime(value0) {
        this.value0 = value0;
    };
    Prop$prime.create = function (value0) {
        return new Prop$prime(value0);
    };
    return Prop$prime;
})();
var Cb$prime = /* #__PURE__ */ (function () {
    function Cb$prime(value0) {
        this.value0 = value0;
    };
    Cb$prime.create = function (value0) {
        return new Cb$prime(value0);
    };
    return Cb$prime;
})();
var Unset$prime = /* #__PURE__ */ (function () {
    function Unset$prime() {

    };
    Unset$prime.value = new Unset$prime();
    return Unset$prime;
})();
var Attribute = function (x) {
    return x;
};
var unset$prime = /* #__PURE__ */ (function () {
    return Unset$prime.value;
})();
var unsafeUnAttribute = /* #__PURE__ */ Safe_Coerce.coerce();
var unsafeAttribute = Attribute;
var xdata = function (k) {
    return function (v) {
        return unsafeAttribute({
            key: "data-" + k,
            value: new Prop$prime(v)
        });
    };
};
var showCb = {
    show: function (v) {
        return "{callback}";
    }
};
var prop$prime = /* #__PURE__ */ (function () {
    return Prop$prime.create;
})();
var newtypeCb = {
    Coercible0: function () {
        return undefined;
    }
};
var eqCb = {
    eq: function (v) {
        return function (v1) {
            return false;
        };
    }
};
var ordCb = {
    compare: function (v) {
        return function (v1) {
            return Data_Ordering.LT.value;
        };
    },
    Eq0: function () {
        return eqCb;
    }
};
var cb$prime = /* #__PURE__ */ (function () {
    return Cb$prime.create;
})();
var cb = /* #__PURE__ */ (function () {
    var $27 = Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Effect.functorEffect)(Data_Function["const"](true)));
    return function ($28) {
        return Cb($27($28));
    };
})();
var attr = function (dict) {
    return dict.attr;
};
var mapAttr = function (dictFunctor) {
    var map = Data_Functor.map(dictFunctor);
    return function (dictAttr) {
        var attr1 = attr(dictAttr);
        return function (a) {
            return function (b) {
                return map(function (v) {
                    return attr1(a)(v);
                })(b);
            };
        };
    };
};
var maybeAttr = function (dictAttr) {
    var attr1 = attr(dictAttr);
    return function (v) {
        return function (v1) {
            if (v1 instanceof Data_Maybe.Just) {
                return pure(attr1(v)(v1.value0));
            };
            if (v1 instanceof Data_Maybe.Nothing) {
                return empty;
            };
            throw new Error("Failed pattern match at Deku.Attribute (line 130, column 1 - line 135, column 29): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var pureAttr = function (dictAttr) {
    var attr1 = attr(dictAttr);
    return function (a) {
        return function (b) {
            return pure(attr1(a)(b));
        };
    };
};
export {
    Prop$prime,
    Cb$prime,
    Unset$prime,
    attr,
    unsafeUnAttribute,
    unsafeAttribute,
    prop$prime,
    cb$prime,
    unset$prime,
    cb,
    Cb,
    xdata,
    pureAttr,
    maybeAttr,
    mapAttr,
    newtypeCb,
    eqCb,
    ordCb,
    showCb
};
