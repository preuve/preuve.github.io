// Generated by purs version 0.15.9
import * as CSS_Property from "../CSS.Property/index.js";
import * as CSS_String from "../CSS.String/index.js";
import * as CSS_Stylesheet from "../CSS.Stylesheet/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Show from "../Data.Show/index.js";
var fromString = /* #__PURE__ */ CSS_String.fromString(CSS_Property.isStringValue);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showString);
var compare = /* #__PURE__ */ Data_Ord.compare(Data_Ord.ordString);
var ListStyleImage = /* #__PURE__ */ (function () {
    function ListStyleImage(value0) {
        this.value0 = value0;
    };
    ListStyleImage.create = function (value0) {
        return new ListStyleImage(value0);
    };
    return ListStyleImage;
})();
var Initial = /* #__PURE__ */ (function () {
    function Initial() {

    };
    Initial.value = new Initial();
    return Initial;
})();
var Inherit = /* #__PURE__ */ (function () {
    function Inherit() {

    };
    Inherit.value = new Inherit();
    return Inherit;
})();
var Unset = /* #__PURE__ */ (function () {
    function Unset() {

    };
    Unset.value = new Unset();
    return Unset;
})();
var None = /* #__PURE__ */ (function () {
    function None() {

    };
    None.value = new None();
    return None;
})();
var valListStyleImage = {
    value: function (v) {
        if (v instanceof Initial) {
            return fromString("initial");
        };
        if (v instanceof Inherit) {
            return fromString("inherit");
        };
        if (v instanceof Unset) {
            return fromString("unset");
        };
        if (v instanceof None) {
            return fromString("none");
        };
        if (v instanceof ListStyleImage) {
            return fromString("url('" + (v.value0 + "')"));
        };
        throw new Error("Failed pattern match at CSS.ListStyle.Image (line 30, column 1 - line 35, column 67): " + [ v.constructor.name ]);
    }
};
var urlListStyleImage = {
    url: function (s) {
        return new ListStyleImage(s);
    }
};
var unsetListStyleImage = /* #__PURE__ */ (function () {
    return {
        unset: Unset.value
    };
})();
var showListStyleImage = {
    show: function (v) {
        if (v instanceof ListStyleImage) {
            return "(ListStyleImage " + (show(v.value0) + ")");
        };
        if (v instanceof Initial) {
            return "Initial";
        };
        if (v instanceof Inherit) {
            return "Inherit";
        };
        if (v instanceof Unset) {
            return "Unset";
        };
        if (v instanceof None) {
            return "None";
        };
        throw new Error("Failed pattern match at CSS.ListStyle.Image (line 23, column 1 - line 28, column 21): " + [ v.constructor.name ]);
    }
};
var noneListImageImage = /* #__PURE__ */ (function () {
    return {
        none: None.value
    };
})();
var listStyleImage = /* #__PURE__ */ CSS_Stylesheet.key(valListStyleImage)(/* #__PURE__ */ CSS_String.fromString(CSS_Property.isStringKey)("list-style-image"));
var initialListStyleImage = /* #__PURE__ */ (function () {
    return {
        initial: Initial.value
    };
})();
var inheritListStyleImage = /* #__PURE__ */ (function () {
    return {
        inherit: Inherit.value
    };
})();
var eqListStyleImage = {
    eq: function (x) {
        return function (y) {
            if (x instanceof ListStyleImage && y instanceof ListStyleImage) {
                return x.value0 === y.value0;
            };
            if (x instanceof Initial && y instanceof Initial) {
                return true;
            };
            if (x instanceof Inherit && y instanceof Inherit) {
                return true;
            };
            if (x instanceof Unset && y instanceof Unset) {
                return true;
            };
            if (x instanceof None && y instanceof None) {
                return true;
            };
            return false;
        };
    }
};
var ordListStyleImage = {
    compare: function (x) {
        return function (y) {
            if (x instanceof ListStyleImage && y instanceof ListStyleImage) {
                return compare(x.value0)(y.value0);
            };
            if (x instanceof ListStyleImage) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof ListStyleImage) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Initial && y instanceof Initial) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Initial) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Initial) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Inherit && y instanceof Inherit) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Inherit) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Inherit) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Unset && y instanceof Unset) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Unset) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Unset) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof None && y instanceof None) {
                return Data_Ordering.EQ.value;
            };
            throw new Error("Failed pattern match at CSS.ListStyle.Image (line 0, column 0 - line 0, column 0): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqListStyleImage;
    }
};
export {
    ListStyleImage,
    Initial,
    Inherit,
    Unset,
    None,
    listStyleImage,
    eqListStyleImage,
    ordListStyleImage,
    showListStyleImage,
    valListStyleImage,
    initialListStyleImage,
    inheritListStyleImage,
    unsetListStyleImage,
    noneListImageImage,
    urlListStyleImage
};
