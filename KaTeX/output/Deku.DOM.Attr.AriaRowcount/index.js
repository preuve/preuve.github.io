// Generated by purs version 0.15.9
import * as Deku_Attribute from "../Deku.Attribute/index.js";
var AriaRowcount = /* #__PURE__ */ (function () {
    function AriaRowcount() {

    };
    AriaRowcount.value = new AriaRowcount();
    return AriaRowcount;
})();
var attrView_AriaRowcountStri = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrUse_AriaRowcountStrin = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrTspan_AriaRowcountStr = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrText_AriaRowcountStri = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrTextPath_AriaRowcount = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrSymbol_AriaRowcountSt = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrSvg_AriaRowcountStrin = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrRect_AriaRowcountStri = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrPolyline_AriaRowcount = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrPolygon_AriaRowcountS = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrPath_AriaRowcountStri = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrMarker_AriaRowcountSt = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrLine_AriaRowcountStri = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrG_AriaRowcountString = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrForeignObject_AriaRow = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrEllipse_AriaRowcountS = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrCircle_AriaRowcountSt = {
    attr: function (v) {
        return function (value) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["prop$prime"](value)
            });
        };
    }
};
var attrAriaRowcountUnit = {
    attr: function (v) {
        return function (v1) {
            return Deku_Attribute.unsafeAttribute({
                key: "aria-rowcount",
                value: Deku_Attribute["unset$prime"]
            });
        };
    }
};
export {
    AriaRowcount,
    attrCircle_AriaRowcountSt,
    attrEllipse_AriaRowcountS,
    attrForeignObject_AriaRow,
    attrG_AriaRowcountString,
    attrLine_AriaRowcountStri,
    attrMarker_AriaRowcountSt,
    attrPath_AriaRowcountStri,
    attrPolygon_AriaRowcountS,
    attrPolyline_AriaRowcount,
    attrRect_AriaRowcountStri,
    attrSvg_AriaRowcountStrin,
    attrSymbol_AriaRowcountSt,
    attrText_AriaRowcountStri,
    attrTextPath_AriaRowcount,
    attrTspan_AriaRowcountStr,
    attrUse_AriaRowcountStrin,
    attrView_AriaRowcountStri,
    attrAriaRowcountUnit
};
