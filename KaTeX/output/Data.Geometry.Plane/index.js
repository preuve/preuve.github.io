// Generated by purs version 0.15.9
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Number from "../Data.Number/index.js";
import * as Data_Ring from "../Data.Ring/index.js";
import * as Data_Semiring from "../Data.Semiring/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Sparse_Polynomial from "../Data.Sparse.Polynomial/index.js";
var sub = /* #__PURE__ */ Data_Ring.sub(/* #__PURE__ */ Data_Sparse_Polynomial.ringPolynomial(Data_Eq.eqNumber)(Data_Ring.ringNumber));
var semiringPolynomial = /* #__PURE__ */ Data_Sparse_Polynomial.semiringPolynomial(Data_Eq.eqNumber)(Data_Semiring.semiringNumber);
var add = /* #__PURE__ */ Data_Semiring.add(semiringPolynomial);
var mul = /* #__PURE__ */ Data_Semiring.mul(semiringPolynomial);
var eq1 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Sparse_Polynomial.eqPolynomial(Data_Eq.eqNumber));
var query = /* #__PURE__ */ Data_Sparse_Polynomial.query(Data_Semiring.semiringNumber);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showNumber);
var Vector = function (x) {
    return x;
};
var Point = function (x) {
    return x;
};
var RightAngle = function (x) {
    return x;
};
var Segment = function (x) {
    return x;
};
var Line = function (x) {
    return x;
};
var HalfLine = function (x) {
    return x;
};
var Circle = function (x) {
    return x;
};
var Arc = function (x) {
    return x;
};
var vector = function (v) {
    return function (v1) {
        return sub(v1.coordinates)(v.coordinates);
    };
};
var summableVectorVector = {
    plus: function (v) {
        return function (v1) {
            return add(v)(v1);
        };
    }
};
var segment = function (origin) {
    return function (extremity) {
        return function (asOriented) {
            return {
                origin: origin,
                extremity: extremity,
                asOriented: asOriented
            };
        };
    };
};
var scale = function (k) {
    return function (v) {
        return mul(Data_Sparse_Polynomial.monoPol(k)(0))(v);
    };
};
var rightangle = function (origin) {
    return function (center) {
        return function (extremity) {
            return function (radius) {
                return {
                    origin: origin,
                    center: center,
                    extremity: extremity,
                    radius: radius
                };
            };
        };
    };
};
var rename = function (str) {
    return function (v) {
        return {
            name: str,
            coordinates: v.coordinates
        };
    };
};
var point = function (name) {
    return function (x) {
        return function (y) {
            return {
                name: name,
                coordinates: add(Data_Sparse_Polynomial.monoPol(x)(0))(Data_Sparse_Polynomial.monoPol(y)(1))
            };
        };
    };
};
var plus = function (dict) {
    return dict.plus;
};
var ord = function (dict) {
    return dict.ord;
};
var middle = function (name) {
    return function (v) {
        return {
            name: name,
            coordinates: mul(add(v.origin.coordinates)(v.extremity.coordinates))(Data_Sparse_Polynomial.monoPol(0.5)(0))
        };
    };
};
var meets = function (dict) {
    return dict.meets;
};
var length = function (dict) {
    return dict.length;
};
var interLineLine = {
    meets: function (v) {
        return function (v1) {
            var delta = v.a * v1.b - v1.a * v.b;
            var next = (function () {
                if (delta === 0.0) {
                    return [  ];
                };
                if (Data_Boolean.otherwise) {
                    return [ point("")((v.b * v1.c - v1.b * v.c) / delta)((v1.a * v.c - v.a * v1.c) / delta) ];
                };
                throw new Error("Failed pattern match at Data.Geometry.Plane (line 190, column 7 - line 193, column 65): " + [  ]);
            })();
            return next;
        };
    }
};
var meets1 = /* #__PURE__ */ meets(interLineLine);
var halfline = function (origin) {
    return function (direction) {
        return {
            origin: origin,
            direction: direction
        };
    };
};
var eqPoint = {
    eq: function (x) {
        return function (y) {
            return eq1(x.coordinates)(y.coordinates) && x.name === y.name;
        };
    }
};
var eq3 = /* #__PURE__ */ Data_Eq.eq(eqPoint);
var eqCircle = {
    eq: function (x) {
        return function (y) {
            return eq3(x.center)(y.center) && x.radius === y.radius;
        };
    }
};
var coords = function (dict) {
    return dict.coords;
};
var circle = function (p) {
    return function (r) {
        return {
            center: p,
            radius: r
        };
    };
};
var basedVector = {
    abs: function (v) {
        return query(v)(0);
    },
    ord: function (v) {
        return query(v)(1);
    },
    coords: function (v) {
        return v;
    }
};
var coords1 = /* #__PURE__ */ coords(basedVector);
var ord1 = /* #__PURE__ */ ord(basedVector);
var basedPoint = {
    abs: function (v) {
        return query(v.coordinates)(0);
    },
    ord: function (v) {
        return query(v.coordinates)(1);
    },
    coords: function (v) {
        return v.coordinates;
    }
};
var coords2 = /* #__PURE__ */ coords(basedPoint);
var ord2 = /* #__PURE__ */ ord(basedPoint);
var summublePointVector = {
    plus: function (p) {
        return function (v) {
            return {
                name: "",
                coordinates: add(coords2(p))(coords1(v))
            };
        };
    }
};
var plus1 = /* #__PURE__ */ plus(summublePointVector);
var arc = function (origin) {
    return function (center) {
        return function (extremity) {
            return function (radius) {
                return function (flag) {
                    return function (flipped) {
                        return function (swapped) {
                            return function (asOriented) {
                                return {
                                    origin: origin,
                                    center: center,
                                    extremity: extremity,
                                    radius: radius,
                                    flag: flag,
                                    flipped: flipped,
                                    swapped: swapped,
                                    asOriented: asOriented
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var abs = function (dict) {
    return dict.abs;
};
var abs1 = /* #__PURE__ */ abs(basedPoint);
var abs2 = /* #__PURE__ */ abs(basedVector);
var line = function (m) {
    return function (n) {
        return {
            a: ord2(m) - ord2(n),
            b: abs1(n) - abs1(m),
            c: abs1(m) * ord2(n) - ord2(m) * abs1(n)
        };
    };
};
var measurableVector = {
    length: function (v) {
        return Data_Number.sqrt(abs2(v) * abs2(v) + ord1(v) * ord1(v));
    }
};
var length1 = /* #__PURE__ */ length(measurableVector);
var cosAngle = function (u) {
    return function (v) {
        return (abs2(u) * abs2(v) + ord1(u) * ord1(v)) / (length1(u) * length1(v));
    };
};
var interLineHalfLine = {
    meets: function (l) {
        return function (v) {
            var l$prime = line(v.origin)(plus1(v.origin)(v.direction));
            return Data_Array.filter(function (p) {
                return cosAngle(vector(v.origin)(p))(v.direction) >= 0.0;
            })(meets1(l)(l$prime));
        };
    }
};
var meets2 = /* #__PURE__ */ meets(interLineHalfLine);
var interHalfLineLine = {
    meets: function (hl) {
        return function (l) {
            return meets2(l)(hl);
        };
    }
};
var meets3 = /* #__PURE__ */ meets(interHalfLineLine);
var interHalfLineHalfLine = {
    meets: function (v) {
        return function (hl) {
            var l = line(v.origin)(plus1(v.origin)(v.direction));
            return Data_Array.filter(function (p) {
                return cosAngle(vector(v.origin)(p))(v.direction) >= 0.0;
            })(meets3(hl)(l));
        };
    }
};
var interSegmentLine = {
    meets: function (v) {
        return function (l) {
            var hl = halfline(v.origin)(vector(v.origin)(v.extremity));
            return Data_Array.filter(function (p) {
                return cosAngle(vector(v.extremity)(p))(vector(v.extremity)(v.origin)) >= 0.0;
            })(meets3(hl)(l));
        };
    }
};
var meets4 = /* #__PURE__ */ meets(interSegmentLine);
var interLineSegment = {
    meets: function (l) {
        return function (s) {
            return meets4(s)(l);
        };
    }
};
var interSegmentHalfLine = {
    meets: function (s) {
        return function (v) {
            var l = line(v.origin)(plus1(v.origin)(v.direction));
            return Data_Array.filter(function (p) {
                return cosAngle(vector(v.origin)(p))(v.direction) >= 0.0;
            })(meets4(s)(l));
        };
    }
};
var meets5 = /* #__PURE__ */ meets(interSegmentHalfLine);
var interHalfLineSegment = {
    meets: function (hl) {
        return function (s) {
            return meets5(s)(hl);
        };
    }
};
var meets6 = /* #__PURE__ */ meets(interHalfLineSegment);
var interSegmentSegment = {
    meets: function (v) {
        return function (s) {
            var hl = halfline(v.origin)(vector(v.origin)(v.extremity));
            return Data_Array.filter(function (p) {
                return cosAngle(vector(v.extremity)(p))(vector(v.extremity)(v.origin)) >= 0.0;
            })(meets6(hl)(s));
        };
    }
};
var measurableSegment = {
    length: function (v) {
        return length1(vector(v.origin)(v.extremity));
    }
};
var normalized = function (v) {
    return scale(1.0 / length1(v))(v);
};
var normalTo = function (v) {
    return add(Data_Sparse_Polynomial.monoPol(-ord1(v))(0))(Data_Sparse_Polynomial.monoPol(abs2(v))(1));
};
var projection = function (direction) {
    return function (v) {
        return scale((abs2(v) * abs2(direction) + ord1(v) * ord1(direction)) / (length1(direction) * length1(direction)))(direction);
    };
};
var rotated = function (ang) {
    return function (v) {
        return add(Data_Sparse_Polynomial.monoPol(abs2(v) * Data_Number.cos(ang) - ord1(v) * Data_Number.sin(ang))(0))(Data_Sparse_Polynomial.monoPol(abs2(v) * Data_Number.sin(ang) + ord1(v) * Data_Number.cos(ang))(1));
    };
};
var showPoint = {
    show: function (v) {
        return v.name + ("(" + (show(abs1(v)) + ("," + (show(ord2(v)) + ")"))));
    }
};
var aVectorOfLine = function (v) {
    return add(Data_Sparse_Polynomial.monoPol(-v.b)(0))(Data_Sparse_Polynomial.monoPol(v.a)(1));
};
var aPointOnLine = function (v) {
    return point("")((-v.a * v.c) / (v.a * v.a + v.b * v.b))((-v.b * v.c) / (v.a * v.a + v.b * v.b));
};
var interLineCircle = {
    meets: function (l) {
        return function (v) {
            var u = aVectorOfLine(l);
            var m = aPointOnLine(l);
            var n = plus1(m)(projection(u)(vector(m)(v.center)));
            var ob = length1(vector(v.center)(n));
            var next = (function () {
                if (ob > v.radius) {
                    return [  ];
                };
                if (ob === v.radius) {
                    return [ n ];
                };
                if (Data_Boolean.otherwise) {
                    var om = Data_Number.sqrt(v.radius * v.radius - ob * ob);
                    var v1 = scale(om / length1(u))(u);
                    return [ plus1(n)(v1), plus1(n)(scale(-1.0)(v1)) ];
                };
                throw new Error("Failed pattern match at Data.Geometry.Plane (line 212, column 9 - line 217, column 55): " + [  ]);
            })();
            return next;
        };
    }
};
var meets7 = /* #__PURE__ */ meets(interLineCircle);
var interCircleLine = {
    meets: function (c) {
        return function (l) {
            return meets7(l)(c);
        };
    }
};
var meets8 = /* #__PURE__ */ meets(interCircleLine);
var interCircleCircle = {
    meets: function (v) {
        return function (v1) {
            var y1 = ord2(v1.center);
            var y0 = ord2(v.center);
            var x1 = abs1(v1.center);
            var x0 = abs1(v.center);
            var l = {
                a: 2.0 * (x0 - x1),
                b: 2.0 * (y0 - y1),
                c: ((((x1 * x1 - x0 * x0) + y1 * y1) - y0 * y0) + v.radius * v.radius) - v1.radius * v1.radius
            };
            return meets8(v1)(l);
        };
    }
};
var interHalfLineCircle = {
    meets: function (v) {
        return function (c) {
            var l$prime = line(v.origin)(plus1(v.origin)(v.direction));
            return Data_Array.filter(function (p) {
                return cosAngle(vector(v.origin)(p))(v.direction) >= 0.0;
            })(meets8(c)(l$prime));
        };
    }
};
var meets9 = /* #__PURE__ */ meets(interHalfLineCircle);
var interCircleHalfLine = {
    meets: function (c) {
        return function (hl) {
            return meets9(hl)(c);
        };
    }
};
var interSegmentCircle = {
    meets: function (v) {
        return function (c) {
            var hl = halfline(v.origin)(vector(v.origin)(v.extremity));
            return Data_Array.filter(function (p) {
                return cosAngle(vector(v.extremity)(p))(vector(v.extremity)(v.origin)) >= 0.0;
            })(meets9(hl)(c));
        };
    }
};
var meets10 = /* #__PURE__ */ meets(interSegmentCircle);
var interCircleSegment = {
    meets: function (c) {
        return function (s) {
            return meets10(s)(c);
        };
    }
};
export {
    abs,
    coords,
    length,
    meets,
    ord,
    plus,
    Point,
    point,
    rename,
    Segment,
    segment,
    middle,
    Vector,
    vector,
    scale,
    normalized,
    normalTo,
    rotated,
    projection,
    cosAngle,
    HalfLine,
    halfline,
    Line,
    line,
    aPointOnLine,
    aVectorOfLine,
    Circle,
    circle,
    Arc,
    arc,
    RightAngle,
    rightangle,
    eqPoint,
    showPoint,
    basedPoint,
    basedVector,
    measurableVector,
    measurableSegment,
    summableVectorVector,
    summublePointVector,
    eqCircle,
    interLineLine,
    interLineHalfLine,
    interHalfLineLine,
    interLineCircle,
    interCircleLine,
    interHalfLineCircle,
    interCircleHalfLine,
    interCircleCircle,
    interHalfLineHalfLine,
    interSegmentLine,
    interLineSegment,
    interSegmentHalfLine,
    interHalfLineSegment,
    interSegmentCircle,
    interCircleSegment,
    interSegmentSegment
};
