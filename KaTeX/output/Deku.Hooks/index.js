// Generated by purs version 0.15.9
import * as Bolson_Core from "../Bolson.Core/index.js";
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_ST_Class from "../Control.Monad.ST.Class/index.js";
import * as Control_Monad_ST_Internal from "../Control.Monad.ST.Internal/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Deku_Core from "../Deku.Core/index.js";
import * as Deku_Do from "../Deku.Do/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Effect_Uncurried from "../Effect.Uncurried/index.js";
import * as FRP_Event from "../FRP.Event/index.js";
import * as FRP_Event_Class from "../FRP.Event.Class/index.js";
import * as Safe_Coerce from "../Safe.Coerce/index.js";
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var liftST = /* #__PURE__ */ Control_Monad_ST_Class.liftST(Control_Monad_ST_Class.monadSTEffect);
var $$void = /* #__PURE__ */ Data_Functor["void"](Control_Monad_ST_Internal.functorST);
var map = /* #__PURE__ */ Data_Functor.map(FRP_Event.functorEvent);
var alt = /* #__PURE__ */ Control_Alt.alt(FRP_Event.altEvent);
var pure = /* #__PURE__ */ Control_Applicative.pure(FRP_Event.applicativeEvent);
var coerce = /* #__PURE__ */ Safe_Coerce.coerce();
var for_ = /* #__PURE__ */ Data_Foldable.for_(Control_Monad_ST_Internal.applicativeST)(Data_Foldable.foldableMaybe);
var keepLatest = /* #__PURE__ */ FRP_Event_Class.keepLatest(FRP_Event.eventIsEvent);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(Effect_Aff.applicativeFiber);
var discard3 = /* #__PURE__ */ discard(Effect_Aff.bindAff);
var bind2 = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorFn);
var useState$prime = Deku_Core.bussedUncurried;
var useRef = function (a) {
    return function (e) {
        return function (f) {
            var ee = FRP_Event.makeLemmingEvent(function (s) {
                return function (k) {
                    return function __do() {
                        var r = Control_Monad_ST_Internal["new"](a)();
                        k(f(liftST(Control_Monad_ST_Internal.read(r))))();
                        return s(e)(function (i) {
                            return $$void(Control_Monad_ST_Internal.write(i)(r));
                        })();
                    };
                };
            });
            var eee = map(function (v) {
                return v;
            })(ee);
            var eeee = Bolson_Core.envy(map(function (v) {
                return v;
            })(eee));
            return eeee;
        };
    };
};
var useMemoized$prime = function (f0) {
    return function (f1) {
        var fx = function (v) {
            var ee = FRP_Event.memoize(f0(v.value1))(function (c) {
                return f1(new Data_Tuple.Tuple(v.value0, c));
            });
            var eee = map(function (v1) {
                return v1;
            })(ee);
            var eeee = Bolson_Core.envy(map(function (v1) {
                return v1;
            })(eee));
            return eeee;
        };
        return Deku_Core.bussedUncurried(fx);
    };
};
var useMemoized = function (e) {
    return function (f1) {
        var ee = FRP_Event.memoize(e)(f1);
        var eee = map(function (v) {
            return v;
        })(ee);
        var eeee = Bolson_Core.envy(map(function (v) {
            return v;
        })(eee));
        return eeee;
    };
};
var useState = function (a) {
    return function (f) {
        return Deku_Do.bind(useState$prime)(function (v) {
            return Deku_Do.bind(useMemoized(alt(v.value1)(pure(a))))(function (m) {
                return f(new Data_Tuple.Tuple(v.value0, m));
            });
        });
    };
};
var useMailboxed = function (dictOrd) {
    var mailboxed = FRP_Event.mailboxed(dictOrd);
    return function (f) {
        var fx = function (v) {
            var ee = mailboxed(v.value1)(function (c) {
                return f(new Data_Tuple.Tuple(v.value0, c));
            });
            var eee = map(function (v1) {
                return v1;
            })(ee);
            var eeee = Bolson_Core.envy(map(function (v1) {
                return v1;
            })(eee));
            return eeee;
        };
        return Deku_Core.bussedUncurried(fx);
    };
};
var useHot$prime = function (f) {
    var ee = Bolson_Core.envy(coerce(FRP_Event.makeLemmingEventO(function (v, k) {
        var v1 = FRP_Event.createPure();
        var current = Control_Monad_ST_Internal["new"](Data_Maybe.Nothing.value)();
        var writeVal = function (v2) {
            return Control_Monad_ST_Internal.write(new Data_Maybe.Just(v2))(current);
        };
        var push$prime$prime = function (i) {
            return liftST(function __do() {
                writeVal(i)();
                return v1.push(i)();
            });
        };
        var event$prime = FRP_Event.makeLemmingEventO(function (v2, k$prime) {
            var val = Control_Monad_ST_Internal.read(current)();
            for_(val)(function (x) {
                return function () {
                    return k$prime(x);
                };
            })();
            return v(v1.event, k$prime);
        });
        k((function (v2) {
            return v2;
        })(f(new Data_Tuple.Tuple(push$prime$prime, event$prime))));
        return v(v1.event, function (v2) {
            return $$void(writeVal(v2))();
        });
    })));
    return ee;
};
var useHot = function (a) {
    return function (f) {
        var ee = Bolson_Core.envy(coerce(FRP_Event.makeLemmingEventO(function (v, k) {
            var v1 = FRP_Event.createPure();
            var current = Control_Monad_ST_Internal["new"](Data_Maybe.Nothing.value)();
            var writeVal = function (v2) {
                return Control_Monad_ST_Internal.write(new Data_Maybe.Just(v2))(current);
            };
            var push$prime$prime = function (i) {
                return liftST(function __do() {
                    writeVal(i)();
                    return v1.push(i)();
                });
            };
            var event$prime = FRP_Event.makeLemmingEventO(function (v2, k$prime) {
                var val = Control_Monad_ST_Internal.read(current)();
                k$prime(Data_Maybe.fromMaybe(a)(val));
                return v(v1.event, k$prime);
            });
            k((function (v2) {
                return v2;
            })(f(new Data_Tuple.Tuple(push$prime$prime, event$prime))));
            return v(v1.event, function (v2) {
                return $$void(writeVal(v2))();
            });
        })));
        return ee;
    };
};
var useEffect = function (e) {
    return function (f1) {
        return function (f2) {
            var eee = FRP_Event.makeEventO(function (k) {
                k(f2(Data_Unit.unit));
                return FRP_Event.subscribeO(e, Effect_Uncurried.mkEffectFn1(f1));
            });
            var eeee = map(function (v) {
                return v;
            })(eee);
            var eeeee = map(function (v) {
                return v;
            })(eeee);
            var ee = Bolson_Core.envy(eeeee);
            return ee;
        };
    };
};
var useDyn = function (i) {
    return function (f) {
        return keepLatest(Deku_Do.bind(function ($99) {
            return Deku_Core.bus(Data_Tuple.curry($99));
        })(function (v) {
            return alt(pure(Deku_Core.insert(i)(f({
                remove: v.value0(Deku_Core.remove),
                sendTo: function ($100) {
                    return v.value0(Deku_Core.sendToPos($100));
                }
            }))))(v.value1);
        }));
    };
};
var useDyn_ = /* #__PURE__ */ useDyn(0);
var useAffWithCancellation = function (e) {
    return function (f1) {
        return function (f2) {
            var eee = FRP_Event.makeEventO(function (k) {
                var r = liftST(Control_Monad_ST_Internal["new"](pure1(Data_Unit.unit)))();
                k(f2(Data_Unit.unit));
                return FRP_Event.subscribeO(e, function (a) {
                    var r$prime = liftST(Control_Monad_ST_Internal.read(r))();
                    var r$prime$prime = Effect_Aff.launchAff(discard3(Effect_Aff.killFiber(Effect_Exception.error("useAffWithCancellation"))(r$prime))(function () {
                        return f1(a);
                    }))();
                    return liftST($$void(Control_Monad_ST_Internal.write(r$prime$prime)(r)))();
                });
            });
            var eeee = map(function (v) {
                return v;
            })(eee);
            var eeeee = map(function (v) {
                return v;
            })(eeee);
            var ee = Bolson_Core.envy(eeeee);
            return ee;
        };
    };
};
var useAffSequentiallyOrDie = function (e) {
    return function (f1) {
        return function (f2) {
            var eee = FRP_Event.makeEventO(function (k) {
                var r = liftST(Control_Monad_ST_Internal["new"](pure1(Data_Unit.unit)))();
                k(f2(Data_Unit.unit));
                return FRP_Event.subscribeO(e, function (v) {
                    if (v instanceof Data_Either.Right) {
                        var r$prime = liftST(Control_Monad_ST_Internal.read(r))();
                        var r$prime$prime = Effect_Aff.launchAff(bind2(Effect_Aff.joinFiber(r$prime))(function () {
                            return f1(v.value0);
                        }))();
                        return liftST($$void(Control_Monad_ST_Internal.write(r$prime$prime)(r)))();
                    };
                    if (v instanceof Data_Either.Left) {
                        var r$prime = liftST(Control_Monad_ST_Internal.read(r))();
                        Effect_Aff.launchAff(Effect_Aff.killFiber(v.value0)(r$prime))();
                        return liftST($$void(Control_Monad_ST_Internal.write(pure1(Data_Unit.unit))(r)))();
                    };
                    throw new Error("Failed pattern match at Deku.Hooks (line 376, column 49 - line 387, column 52): " + [ v.constructor.name ]);
                });
            });
            var eeee = map(function (v) {
                return v;
            })(eee);
            var eeeee = map(function (v) {
                return v;
            })(eeee);
            var ee = Bolson_Core.envy(eeeee);
            return ee;
        };
    };
};
var useAffSequentially = function (e) {
    return function (f1) {
        return function (f2) {
            var eee = FRP_Event.makeEventO(function (k) {
                var r = liftST(Control_Monad_ST_Internal["new"](pure1(Data_Unit.unit)))();
                k(f2(Data_Unit.unit));
                return FRP_Event.subscribeO(e, function (a) {
                    var r$prime = liftST(Control_Monad_ST_Internal.read(r))();
                    var r$prime$prime = Effect_Aff.launchAff(bind2(Effect_Aff.joinFiber(r$prime))(function () {
                        return f1(a);
                    }))();
                    return liftST($$void(Control_Monad_ST_Internal.write(r$prime$prime)(r)))();
                });
            });
            var eeee = map(function (v) {
                return v;
            })(eee);
            var eeeee = map(function (v) {
                return v;
            })(eeee);
            var ee = Bolson_Core.envy(eeeee);
            return ee;
        };
    };
};
var useAffOrDie = function (e) {
    return function (f1) {
        return function (f2) {
            var eee = FRP_Event.makeEventO(function (k) {
                var r = liftST(Control_Monad_ST_Internal["new"]([  ]))();
                k(f2(Data_Unit.unit));
                return FRP_Event.subscribeO(e, function (v) {
                    if (v instanceof Data_Either.Right) {
                        var r$prime = Effect_Aff.launchAff(f1(v.value0))();
                        return liftST($$void(Control_Monad_ST_Internal.modify(Data_Array.cons(r$prime))(r)))();
                    };
                    if (v instanceof Data_Either.Left) {
                        var arr = liftST(Control_Monad_ST_Internal.read(r))();
                        liftST($$void(Control_Monad_ST_Internal.write([  ])(r)))();
                        return Effect.foreachE(arr)(function (r$prime) {
                            return Effect_Aff.launchAff_(Effect_Aff.killFiber(v.value0)(r$prime));
                        })();
                    };
                    throw new Error("Failed pattern match at Deku.Hooks (line 412, column 49 - line 421, column 29): " + [ v.constructor.name ]);
                });
            });
            var eeee = map(function (v) {
                return v;
            })(eee);
            var eeeee = map(function (v) {
                return v;
            })(eeee);
            var ee = Bolson_Core.envy(eeeee);
            return ee;
        };
    };
};
var useAff = function (e) {
    var $101 = useEffect(e);
    var $102 = map1(Effect_Aff.launchAff_);
    return function ($103) {
        return $101($102($103));
    };
};
export {
    useState$prime,
    useState,
    useRef,
    useMemoized$prime,
    useMemoized,
    useMailboxed,
    useEffect,
    useAff,
    useAffWithCancellation,
    useAffSequentially,
    useAffSequentiallyOrDie,
    useAffOrDie,
    useHot,
    useHot$prime,
    useDyn,
    useDyn_
};
