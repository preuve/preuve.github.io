// Generated by purs version 0.15.9
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Semigroupoid from "../Control.Semigroupoid/index.js";
import * as Data_Compactable from "../Data.Compactable/index.js";
import * as Data_EuclideanRing from "../Data.EuclideanRing/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_HeytingAlgebra from "../Data.HeytingAlgebra/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ring from "../Data.Ring/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Semiring from "../Data.Semiring/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as FRP_Event from "../FRP.Event/index.js";
import * as FRP_Event_AnimationFrame from "../FRP.Event.AnimationFrame/index.js";
import * as FRP_Event_Class from "../FRP.Event.Class/index.js";
var compose = /* #__PURE__ */ Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var ABehavior = function (x) {
    return x;
};
var step = function (dictIsEvent) {
    var sampleOnRight = FRP_Event_Class.sampleOnRight(dictIsEvent);
    var Alternative0 = dictIsEvent.Alternative0();
    var alt = Control_Alt.alt((Alternative0.Plus1()).Alt0());
    var pure = Control_Applicative.pure(Alternative0.Applicative0());
    return function (a) {
        return function (e) {
            return sampleOnRight(alt(pure(a))(e));
        };
    };
};
var unfold = function (dictIsEvent) {
    var step1 = step(dictIsEvent);
    var fold = FRP_Event_Class.fold(dictIsEvent);
    return function (f) {
        return function (a) {
            return function (e) {
                return step1(a)(fold(f)(a)(e));
            };
        };
    };
};
var sample = function (v) {
    return function (e) {
        return v(e);
    };
};
var functorABehavior = function (dictFunctor) {
    var map = Data_Functor.map(dictFunctor);
    return {
        map: function (f) {
            return function (v) {
                return function (e) {
                    return v(map(function (v1) {
                        return function ($211) {
                            return v1(f($211));
                        };
                    })(e));
                };
            };
        }
    };
};
var sampleBy = function (dictFunctor) {
    var map = Data_Functor.map(functorABehavior(dictFunctor));
    var map1 = Data_Functor.map(dictFunctor);
    return function (f) {
        return function (b) {
            return function (e) {
                return sample(map(f)(b))(map1(Data_Function.applyFlipped)(e));
            };
        };
    };
};
var gateBy = function (dictFilterable) {
    var compact = Data_Compactable.compact(dictFilterable.Compactable0());
    var sampleBy1 = sampleBy(dictFilterable.Functor1());
    return function (f) {
        return function (ps) {
            return function (xs) {
                return compact(sampleBy1(function (p) {
                    return function (x) {
                        var $189 = f(p)(x);
                        if ($189) {
                            return new Data_Maybe.Just(x);
                        };
                        return Data_Maybe.Nothing.value;
                    };
                })(ps)(xs));
            };
        };
    };
};
var gate = function (dictFilterable) {
    return gateBy(dictFilterable)(Data_Function["const"]);
};
var integral = function (dictIsEvent) {
    var Functor1 = (dictIsEvent.Filterable1()).Functor1();
    var voidLeft = Data_Functor.voidLeft(Functor1);
    var withLast = FRP_Event_Class.withLast(dictIsEvent);
    var sampleBy1 = sampleBy(Functor1);
    var fold = FRP_Event_Class.fold(dictIsEvent);
    var sampleOnRight = FRP_Event_Class.sampleOnRight(dictIsEvent);
    return function (dictField) {
        var Ring0 = (dictField.DivisionRing1()).Ring0();
        var Semiring0 = Ring0.Semiring0();
        var add = Data_Semiring.add(Semiring0);
        var one = Data_Semiring.one(Semiring0);
        var div = Data_EuclideanRing.div(dictField.EuclideanRing0());
        var mul = Data_Semiring.mul(Semiring0);
        var sub = Data_Ring.sub(Ring0);
        return function (dictSemiring) {
            var add1 = Data_Semiring.add(dictSemiring);
            return function (g) {
                return function (initial) {
                    return function (t) {
                        return function (b) {
                            var two = add(one)(one);
                            var approx = function (v) {
                                return function (v1) {
                                    if (v1.last instanceof Data_Maybe.Nothing) {
                                        return v;
                                    };
                                    if (v1.last instanceof Data_Maybe.Just) {
                                        return add1(v)(g(function (f) {
                                            return div(mul(f(add1(v1.last.value0.value1)(v1.now.value1)))(sub(v1.now.value0)(v1.last.value0.value0)))(two);
                                        }));
                                    };
                                    throw new Error("Failed pattern match at FRP.Behavior (line 152, column 3 - line 152, column 33): " + [ v.constructor.name, v1.constructor.name ]);
                                };
                            };
                            return function (e) {
                                var x = sample(b)(voidLeft(e)(identity));
                                var y = withLast(sampleBy1(Data_Tuple.Tuple.create)(t)(x));
                                var z = fold(approx)(initial)(y);
                                return sampleOnRight(z)(e);
                            };
                        };
                    };
                };
            };
        };
    };
};
var integral1 = /* #__PURE__ */ integral(FRP_Event.eventIsEvent);
var integral$prime = function (dictIsEvent) {
    var integral2 = integral(dictIsEvent);
    return function (dictField) {
        return integral2(dictField)(((dictField.DivisionRing1()).Ring0()).Semiring0())(function (v) {
            return v(identity);
        });
    };
};
var sample_ = function (dictFunctor) {
    return sampleBy(dictFunctor)(Data_Function["const"]);
};
var sample_1 = /* #__PURE__ */ sample_(FRP_Event.functorEvent);
var derivative = function (dictIsEvent) {
    var Functor1 = (dictIsEvent.Filterable1()).Functor1();
    var voidLeft = Data_Functor.voidLeft(Functor1);
    var withLast = FRP_Event_Class.withLast(dictIsEvent);
    var sampleBy1 = sampleBy(Functor1);
    var map = Data_Functor.map(Functor1);
    var sampleOnRight = FRP_Event_Class.sampleOnRight(dictIsEvent);
    return function (dictField) {
        var div = Data_EuclideanRing.div(dictField.EuclideanRing0());
        var sub = Data_Ring.sub((dictField.DivisionRing1()).Ring0());
        return function (dictRing) {
            var zero = Data_Semiring.zero(dictRing.Semiring0());
            var sub1 = Data_Ring.sub(dictRing);
            return function (g) {
                return function (t) {
                    return function (b) {
                        var approx = function (v) {
                            if (v.last instanceof Data_Maybe.Nothing) {
                                return zero;
                            };
                            if (v.last instanceof Data_Maybe.Just) {
                                return g(function (f) {
                                    return div(f(sub1(v.now.value1)(v.last.value0.value1)))(sub(v.now.value0)(v.last.value0.value0));
                                });
                            };
                            throw new Error("Failed pattern match at FRP.Behavior (line 199, column 3 - line 199, column 34): " + [ v.constructor.name ]);
                        };
                        return function (e) {
                            var x = sample(b)(voidLeft(e)(identity));
                            var y = withLast(sampleBy1(Data_Tuple.Tuple.create)(t)(x));
                            var z = map(approx)(y);
                            return sampleOnRight(z)(e);
                        };
                    };
                };
            };
        };
    };
};
var derivative$prime = function (dictIsEvent) {
    var derivative1 = derivative(dictIsEvent);
    return function (dictField) {
        return derivative1(dictField)((dictField.DivisionRing1()).Ring0())(function (v) {
            return v(identity);
        });
    };
};
var behavior = ABehavior;
var fixB = function (dictIsEvent) {
    var sampleOnRight = FRP_Event_Class.sampleOnRight(dictIsEvent);
    var fix = FRP_Event_Class.fix(dictIsEvent);
    var step1 = step(dictIsEvent);
    var sample_2 = sample_((dictIsEvent.Filterable1()).Functor1());
    return function (a) {
        return function (f) {
            return behavior(function (s) {
                return sampleOnRight(fix(function (event) {
                    var b = f(step1(a)(event));
                    return sample_2(b)(s);
                }))(s);
            });
        };
    };
};
var fixB1 = /* #__PURE__ */ fixB(FRP_Event.eventIsEvent);
var solve = function (dictField) {
    var integral2 = integral1(dictField);
    return function (dictSemiring) {
        var integral3 = integral2(dictSemiring);
        return function (g) {
            return function (a0) {
                return function (t) {
                    return function (f) {
                        return fixB1(a0)(function (b) {
                            return integral3(g)(a0)(t)(f(b));
                        });
                    };
                };
            };
        };
    };
};
var solve$prime = function (dictField) {
    return solve(dictField)(((dictField.DivisionRing1()).Ring0()).Semiring0())(function (v) {
        return v(identity);
    });
};
var solve2 = function (dictField) {
    var integral2 = integral1(dictField);
    return function (dictSemiring) {
        var integral3 = integral2(dictSemiring);
        return function (g) {
            return function (a0) {
                return function (da0) {
                    return function (t) {
                        return function (f) {
                            return fixB1(a0)(function (b) {
                                return integral3(g)(a0)(t)(fixB1(da0)(function (db) {
                                    return integral3(g)(da0)(t)(f(b)(db));
                                }));
                            });
                        };
                    };
                };
            };
        };
    };
};
var solve2$prime = function (dictField) {
    return solve2(dictField)(((dictField.DivisionRing1()).Ring0()).Semiring0())(function (v) {
        return v(identity);
    });
};
var switcher = function (dictIsEvent) {
    var keepLatest = FRP_Event_Class.keepLatest(dictIsEvent);
    var Alternative0 = dictIsEvent.Alternative0();
    var alt = Control_Alt.alt((Alternative0.Plus1()).Alt0());
    var pure = Control_Applicative.pure(Alternative0.Applicative0());
    var map = Data_Functor.map((dictIsEvent.Filterable1()).Functor1());
    return function (b0) {
        return function (e) {
            return behavior(function (s) {
                return keepLatest(alt(pure(sample(b0)(s)))(map(function (b) {
                    return sample(b)(s);
                })(e)));
            });
        };
    };
};
var applyABehavior = function (dictFunctor) {
    var map = Data_Functor.map(dictFunctor);
    var functorABehavior1 = functorABehavior(dictFunctor);
    return {
        apply: function (v) {
            return function (v1) {
                return function (e) {
                    return v1(v(map(compose)(e)));
                };
            };
        },
        Functor0: function () {
            return functorABehavior1;
        }
    };
};
var semigroupABehavior = function (dictFunctor) {
    var lift2 = Control_Apply.lift2(applyABehavior(dictFunctor));
    return function (dictSemigroup) {
        return {
            append: lift2(Data_Semigroup.append(dictSemigroup))
        };
    };
};
var applicativeABehavior = function (dictFunctor) {
    var map = Data_Functor.map(dictFunctor);
    var applyABehavior1 = applyABehavior(dictFunctor);
    return {
        pure: function (a) {
            return function (e) {
                return map(Data_Function.applyFlipped(a))(e);
            };
        },
        Apply0: function () {
            return applyABehavior1;
        }
    };
};
var heytingAlgebraABehavior = function (dictFunctor) {
    var pure = Control_Applicative.pure(applicativeABehavior(dictFunctor));
    var map = Data_Functor.map(functorABehavior(dictFunctor));
    var lift2 = Control_Apply.lift2(applyABehavior(dictFunctor));
    return function (dictHeytingAlgebra) {
        return {
            tt: pure(Data_HeytingAlgebra.tt(dictHeytingAlgebra)),
            ff: pure(Data_HeytingAlgebra.ff(dictHeytingAlgebra)),
            not: map(Data_HeytingAlgebra.not(dictHeytingAlgebra)),
            implies: lift2(Data_HeytingAlgebra.implies(dictHeytingAlgebra)),
            conj: lift2(Data_HeytingAlgebra.conj(dictHeytingAlgebra)),
            disj: lift2(Data_HeytingAlgebra.disj(dictHeytingAlgebra))
        };
    };
};
var monoidABehavior = function (dictFunctor) {
    var pure = Control_Applicative.pure(applicativeABehavior(dictFunctor));
    var semigroupABehavior1 = semigroupABehavior(dictFunctor);
    return function (dictMonoid) {
        var semigroupABehavior2 = semigroupABehavior1(dictMonoid.Semigroup0());
        return {
            mempty: pure(Data_Monoid.mempty(dictMonoid)),
            Semigroup0: function () {
                return semigroupABehavior2;
            }
        };
    };
};
var semiringABehavior = function (dictFunctor) {
    var pure = Control_Applicative.pure(applicativeABehavior(dictFunctor));
    var lift2 = Control_Apply.lift2(applyABehavior(dictFunctor));
    return function (dictSemiring) {
        return {
            zero: pure(Data_Semiring.zero(dictSemiring)),
            one: pure(Data_Semiring.one(dictSemiring)),
            add: lift2(Data_Semiring.add(dictSemiring)),
            mul: lift2(Data_Semiring.mul(dictSemiring))
        };
    };
};
var ringABehavior = function (dictFunctor) {
    var lift2 = Control_Apply.lift2(applyABehavior(dictFunctor));
    var semiringABehavior1 = semiringABehavior(dictFunctor);
    return function (dictRing) {
        var semiringABehavior2 = semiringABehavior1(dictRing.Semiring0());
        return {
            sub: lift2(Data_Ring.sub(dictRing)),
            Semiring0: function () {
                return semiringABehavior2;
            }
        };
    };
};
var animate = function (scene) {
    return function (render) {
        return FRP_Event.subscribe(sample_1(scene)(FRP_Event_AnimationFrame.animationFrame))(render);
    };
};
export {
    behavior,
    step,
    sample,
    sampleBy,
    sample_,
    gate,
    gateBy,
    unfold,
    switcher,
    integral,
    integral$prime,
    derivative,
    derivative$prime,
    solve,
    solve$prime,
    solve2,
    solve2$prime,
    fixB,
    animate,
    functorABehavior,
    applyABehavior,
    applicativeABehavior,
    semigroupABehavior,
    monoidABehavior,
    heytingAlgebraABehavior,
    semiringABehavior,
    ringABehavior
};
