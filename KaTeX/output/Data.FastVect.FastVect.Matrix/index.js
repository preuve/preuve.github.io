// Generated by purs version 0.15.9
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Distributive from "../Data.Distributive/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_FastVect_Common from "../Data.FastVect.Common/index.js";
import * as Data_FastVect_FastVect from "../Data.FastVect.FastVect/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_FoldableWithIndex from "../Data.FoldableWithIndex/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_FunctorWithIndex from "../Data.FunctorWithIndex/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ring from "../Data.Ring/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Semigroup_Foldable from "../Data.Semigroup.Foldable/index.js";
import * as Data_Semigroup_Traversable from "../Data.Semigroup.Traversable/index.js";
import * as Data_Semiring from "../Data.Semiring/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_TraversableWithIndex from "../Data.TraversableWithIndex/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
var map = /* #__PURE__ */ Data_Functor.map(Data_FastVect_FastVect.functorVect);
var mapWithIndex = /* #__PURE__ */ Data_FunctorWithIndex.mapWithIndex(Data_FastVect_FastVect.functorWithIndexIntVect);
var foldl = /* #__PURE__ */ Data_Foldable.foldl(Data_FastVect_FastVect.foldableVect);
var foldr = /* #__PURE__ */ Data_Foldable.foldr(Data_FastVect_FastVect.foldableVect);
var foldMap = /* #__PURE__ */ Data_Foldable.foldMap(Data_FastVect_FastVect.foldableVect);
var foldlWithIndex = /* #__PURE__ */ Data_FoldableWithIndex.foldlWithIndex(Data_FastVect_FastVect.foldableWithIndexIntVect);
var foldrWithIndex = /* #__PURE__ */ Data_FoldableWithIndex.foldrWithIndex(Data_FastVect_FastVect.foldableWithIndexIntVect);
var foldMapWithIndex = /* #__PURE__ */ Data_FoldableWithIndex.foldMapWithIndex(Data_FastVect_FastVect.foldableWithIndexIntVect);
var traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_FastVect_FastVect.traversableVect);
var sequence = /* #__PURE__ */ Data_Traversable.sequence(Data_FastVect_FastVect.traversableVect);
var traverseWithIndex = /* #__PURE__ */ Data_TraversableWithIndex.traverseWithIndex(Data_FastVect_FastVect.traversableWithIndexIntVe);
var foldable1Vect = /* #__PURE__ */ Data_FastVect_FastVect.foldable1Vect();
var foldl1 = /* #__PURE__ */ Data_Semigroup_Foldable.foldl1(foldable1Vect);
var foldr1 = /* #__PURE__ */ Data_Semigroup_Foldable.foldr1(foldable1Vect);
var foldMap1 = /* #__PURE__ */ Data_Semigroup_Foldable.foldMap1(foldable1Vect);
var traversable1Vect = /* #__PURE__ */ Data_FastVect_FastVect.traversable1Vect();
var traverse1 = /* #__PURE__ */ Data_Semigroup_Traversable.traverse1(traversable1Vect);
var sequence1 = /* #__PURE__ */ Data_Semigroup_Traversable.sequence1(traversable1Vect);
var distributiveVect = /* #__PURE__ */ Data_FastVect_FastVect.distributiveVect();
var lift2 = /* #__PURE__ */ Control_Apply.lift2(Data_FastVect_FastVect.applyVect);
var apply = /* #__PURE__ */ Control_Apply.apply(Data_FastVect_FastVect.applyVect);
var toArray = /* #__PURE__ */ Data_FastVect_FastVect.toArray();
var index1 = /* #__PURE__ */ Data_FastVect_FastVect.index({
    reflectType: function () {
        return 0;
    }
})()()();
var replicate1 = /* #__PURE__ */ Data_FastVect_FastVect.replicate();
var sum = /* #__PURE__ */ Data_Foldable.sum(Data_FastVect_FastVect.foldableVect);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var bindFlipped = /* #__PURE__ */ Control_Bind.bindFlipped(Data_Maybe.bindMaybe);
var sequence2 = /* #__PURE__ */ Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe);
var map2 = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var Matrix = function (x) {
    return x;
};
var functorMatrix = {
    map: function (f) {
        return function (v) {
            return map(map(f))(v);
        };
    }
};
var functorWithIndexTupleIntI = {
    mapWithIndex: function (f) {
        return function (v) {
            return mapWithIndex(function (i) {
                return mapWithIndex(function (j) {
                    return f(new Data_Tuple.Tuple(i, j));
                });
            })(v);
        };
    },
    Functor0: function () {
        return functorMatrix;
    }
};
var foldableMatrix = {
    foldl: function (f) {
        return function (z) {
            return function (v) {
                return foldl(foldl(f))(z)(v);
            };
        };
    },
    foldr: function (f) {
        return function (z) {
            return function (v) {
                return foldr(Data_Function.flip(foldr(f)))(z)(v);
            };
        };
    },
    foldMap: function (dictMonoid) {
        var foldMap2 = foldMap(dictMonoid);
        return function (f) {
            return function (v) {
                return foldMap2(foldMap2(f))(v);
            };
        };
    }
};
var foldableWithIndexTupleInt = {
    foldlWithIndex: function (f) {
        return function (z) {
            return function (v) {
                return foldlWithIndex(function (i) {
                    return foldlWithIndex(function (j) {
                        return f(new Data_Tuple.Tuple(i, j));
                    });
                })(z)(v);
            };
        };
    },
    foldrWithIndex: function (f) {
        return function (z) {
            return function (v) {
                return foldrWithIndex(function (i) {
                    return Data_Function.flip(foldrWithIndex(function (j) {
                        return f(new Data_Tuple.Tuple(i, j));
                    }));
                })(z)(v);
            };
        };
    },
    foldMapWithIndex: function (dictMonoid) {
        var foldMapWithIndex1 = foldMapWithIndex(dictMonoid);
        return function (f) {
            return function (v) {
                return foldMapWithIndex1(function (i) {
                    return foldMapWithIndex1(function (j) {
                        return f(new Data_Tuple.Tuple(i, j));
                    });
                })(v);
            };
        };
    },
    Foldable0: function () {
        return foldableMatrix;
    }
};
var traversableMatrix = {
    traverse: function (dictApplicative) {
        var map3 = Data_Functor.map((dictApplicative.Apply0()).Functor0());
        var traverse2 = traverse(dictApplicative);
        return function (f) {
            return function (v) {
                return map3(Matrix)(traverse2(traverse2(f))(v));
            };
        };
    },
    sequence: function (dictApplicative) {
        var map3 = Data_Functor.map((dictApplicative.Apply0()).Functor0());
        var traverse2 = traverse(dictApplicative);
        var sequence3 = sequence(dictApplicative);
        return function (v) {
            return map3(Matrix)(traverse2(sequence3)(v));
        };
    },
    Functor0: function () {
        return functorMatrix;
    },
    Foldable1: function () {
        return foldableMatrix;
    }
};
var traversableWithIndexTuple = {
    traverseWithIndex: function (dictApplicative) {
        var map3 = Data_Functor.map((dictApplicative.Apply0()).Functor0());
        var traverseWithIndex1 = traverseWithIndex(dictApplicative);
        return function (f) {
            return function (v) {
                return map3(Matrix)(traverseWithIndex1(function (i) {
                    return traverseWithIndex1(function (j) {
                        return f(new Data_Tuple.Tuple(i, j));
                    });
                })(v));
            };
        };
    },
    FunctorWithIndex0: function () {
        return functorWithIndexTupleIntI;
    },
    FoldableWithIndex1: function () {
        return foldableWithIndexTupleInt;
    },
    Traversable2: function () {
        return traversableMatrix;
    }
};
var foldable1Matrix = function () {
    return function () {
        return {
            foldl1: function (f) {
                return function (v) {
                    return foldl1(f)(map(foldl1(f))(v));
                };
            },
            foldr1: function (f) {
                return function (v) {
                    return foldr1(f)(map(foldr1(f))(v));
                };
            },
            foldMap1: function (dictSemigroup) {
                var foldMap11 = foldMap1(dictSemigroup);
                return function (f) {
                    return function (v) {
                        return foldMap11(foldMap11(f))(v);
                    };
                };
            },
            Foldable0: function () {
                return foldableMatrix;
            }
        };
    };
};
var foldable1Matrix1 = /* #__PURE__ */ foldable1Matrix()();
var traversable1Matrix = function () {
    return function () {
        return {
            traverse1: function (dictApply) {
                var map3 = Data_Functor.map(dictApply.Functor0());
                var traverse11 = traverse1(dictApply);
                return function (f) {
                    return function (v) {
                        return map3(Matrix)(traverse11(traverse11(f))(v));
                    };
                };
            },
            sequence1: function (dictApply) {
                var map3 = Data_Functor.map(dictApply.Functor0());
                var traverse11 = traverse1(dictApply);
                var sequence11 = sequence1(dictApply);
                return function (v) {
                    return map3(Matrix)(traverse11(sequence11)(v));
                };
            },
            Foldable10: function () {
                return foldable1Matrix1;
            },
            Traversable1: function () {
                return traversableMatrix;
            }
        };
    };
};
var eqMatrix = function (dictEq) {
    var eq1 = Data_Eq.eq(Data_FastVect_FastVect.eqVect(Data_FastVect_FastVect.eqVect(dictEq)));
    return {
        eq: function (x) {
            return function (y) {
                return eq1(x)(y);
            };
        }
    };
};
var ordMatrix = function (dictOrd) {
    var compare = Data_Ord.compare(Data_FastVect_FastVect.ordVect(Data_FastVect_FastVect.ordVect(dictOrd)));
    var eqMatrix1 = eqMatrix(dictOrd.Eq0());
    return {
        compare: function (x) {
            return function (y) {
                return compare(x)(y);
            };
        },
        Eq0: function () {
            return eqMatrix1;
        }
    };
};
var distributiveMatrix = function () {
    return function () {
        return function (dictReflectable) {
            var distribute = Data_Distributive.distribute(distributiveVect(dictReflectable));
            return function (dictReflectable1) {
                var distribute1 = Data_Distributive.distribute(distributiveVect(dictReflectable1));
                return {
                    distribute: function (dictFunctor) {
                        var $439 = map(distribute(dictFunctor));
                        var $440 = distribute1(dictFunctor);
                        var $441 = Data_Functor.map(dictFunctor)(function (v) {
                            return v;
                        });
                        return function ($442) {
                            return Matrix($439($440($441($442))));
                        };
                    },
                    collect: function (dictFunctor) {
                        return Data_Distributive.collectDefault(distributiveMatrix()()(dictReflectable)(dictReflectable1))(dictFunctor);
                    },
                    Functor0: function () {
                        return functorMatrix;
                    }
                };
            };
        };
    };
};
var distributiveMatrix1 = /* #__PURE__ */ distributiveMatrix()();
var applyMatrix = {
    apply: function (v) {
        return function (v1) {
            return lift2(apply)(v)(v1);
        };
    },
    Functor0: function () {
        return functorMatrix;
    }
};
var apply1 = /* #__PURE__ */ Control_Apply.apply(applyMatrix);
var lift21 = /* #__PURE__ */ Control_Apply.lift2(applyMatrix);
var bindMatrix = function () {
    return function () {
        return function (dictReflectable) {
            var distributiveMatrix2 = distributiveMatrix1(dictReflectable);
            return function (dictReflectable1) {
                var distribute = Data_Distributive.distribute(distributiveMatrix2(dictReflectable1))(Data_Functor.functorFn);
                return {
                    bind: function (matrix) {
                        return function (f) {
                            return apply1(distribute(f))(matrix);
                        };
                    },
                    Apply0: function () {
                        return applyMatrix;
                    }
                };
            };
        };
    };
};
var bindMatrix1 = /* #__PURE__ */ bindMatrix()();
var semigroupMatrix = function (dictSemigroup) {
    return {
        append: lift21(Data_Semigroup.append(dictSemigroup))
    };
};
var toVectVect = function (v) {
    return v;
};
var toVectArray = function () {
    return function () {
        return function (v) {
            return toArray(v);
        };
    };
};
var toVect = function () {
    return function (v) {
        return index1(Data_FastVect_Common.term)(v);
    };
};
var toArrayArray = function () {
    return function () {
        return function (v) {
            return toArray(map(toArray)(v));
        };
    };
};
var toArrayArray1 = /* #__PURE__ */ toArrayArray()();
var showMatrix = function (dictShow) {
    var show = Data_Show.show(Data_Show.showArray(Data_Show.showArray(dictShow)));
    return function () {
        return function () {
            return {
                show: function (m) {
                    return show(toArrayArray1(m));
                }
            };
        };
    };
};
var singleton = function (a) {
    return Data_FastVect_FastVect.singleton(Data_FastVect_FastVect.singleton(a));
};
var replicate = function () {
    return function (dictReflectable) {
        var replicate3 = replicate1(dictReflectable);
        return function () {
            return function (dictReflectable1) {
                var replicate4 = replicate1(dictReflectable1);
                return function (v) {
                    return function (v1) {
                        return function (a) {
                            return replicate4(Data_FastVect_Common.term)(replicate3(Data_FastVect_Common.term)(a));
                        };
                    };
                };
            };
        };
    };
};
var replicate2 = /* #__PURE__ */ replicate();
var applicativeMatrix = function () {
    return function (dictReflectable) {
        var replicate3 = replicate2(dictReflectable)();
        return function () {
            return function (dictReflectable1) {
                return {
                    pure: replicate3(dictReflectable1)(Data_FastVect_Common.term)(Data_FastVect_Common.term),
                    Apply0: function () {
                        return applyMatrix;
                    }
                };
            };
        };
    };
};
var applicativeMatrix1 = /* #__PURE__ */ applicativeMatrix();
var monadMatrix = function () {
    return function () {
        return function (dictReflectable) {
            var applicativeMatrix2 = applicativeMatrix1(dictReflectable)();
            var bindMatrix2 = bindMatrix1(dictReflectable);
            return function (dictReflectable1) {
                var applicativeMatrix3 = applicativeMatrix2(dictReflectable1);
                var bindMatrix3 = bindMatrix2(dictReflectable1);
                return {
                    Applicative0: function () {
                        return applicativeMatrix3;
                    },
                    Bind1: function () {
                        return bindMatrix3;
                    }
                };
            };
        };
    };
};
var monoidMatrix = function () {
    return function (dictReflectable) {
        var applicativeMatrix2 = applicativeMatrix1(dictReflectable)();
        return function () {
            return function (dictReflectable1) {
                var pure = Control_Applicative.pure(applicativeMatrix2(dictReflectable1));
                return function (dictMonoid) {
                    var semigroupMatrix1 = semigroupMatrix(dictMonoid.Semigroup0());
                    return {
                        mempty: pure(Data_Monoid.mempty(dictMonoid)),
                        Semigroup0: function () {
                            return semigroupMatrix1;
                        }
                    };
                };
            };
        };
    };
};
var semiringMatrix = function () {
    return function (dictReflectable) {
        var applicativeMatrix2 = applicativeMatrix1(dictReflectable)();
        return function () {
            return function (dictReflectable1) {
                var pure = Control_Applicative.pure(applicativeMatrix2(dictReflectable1));
                return function (dictSemiring) {
                    return {
                        add: lift21(Data_Semiring.add(dictSemiring)),
                        zero: pure(Data_Semiring.zero(dictSemiring)),
                        mul: lift21(Data_Semiring.mul(dictSemiring)),
                        one: pure(Data_Semiring.one(dictSemiring))
                    };
                };
            };
        };
    };
};
var semiringMatrix1 = /* #__PURE__ */ semiringMatrix();
var ringMatrix = function () {
    return function (dictReflectable) {
        var semiringMatrix2 = semiringMatrix1(dictReflectable)();
        return function () {
            return function (dictReflectable1) {
                var semiringMatrix3 = semiringMatrix2(dictReflectable1);
                return function (dictRing) {
                    var semiringMatrix4 = semiringMatrix3(dictRing.Semiring0());
                    return {
                        sub: lift21(Data_Ring.sub(dictRing)),
                        Semiring0: function () {
                            return semiringMatrix4;
                        }
                    };
                };
            };
        };
    };
};
var ringMatrix1 = /* #__PURE__ */ ringMatrix();
var commutativeRingMatrix = function () {
    return function (dictReflectable) {
        var ringMatrix2 = ringMatrix1(dictReflectable)();
        return function () {
            return function (dictReflectable1) {
                var ringMatrix3 = ringMatrix2(dictReflectable1);
                return function (dictCommutativeRing) {
                    var ringMatrix4 = ringMatrix3(dictCommutativeRing.Ring0());
                    return {
                        Ring0: function () {
                            return ringMatrix4;
                        }
                    };
                };
            };
        };
    };
};
var outerMap = function (dictReflectable) {
    return function () {
        return function (dictReflectable1) {
            return function () {
                return function (f) {
                    return function (v1) {
                        return function (v2) {
                            return map(function (elemW) {
                                return map(function (elemH) {
                                    return f(elemH)(elemW);
                                })(v1);
                            })(v2);
                        };
                    };
                };
            };
        };
    };
};
var outerProduct = function (dictReflectable) {
    var outerMap1 = outerMap(dictReflectable)();
    return function () {
        return function (dictReflectable1) {
            var outerMap2 = outerMap1(dictReflectable1)();
            return function () {
                return function (dictSemiring) {
                    return outerMap2(Data_Semiring.mul(dictSemiring));
                };
            };
        };
    };
};
var modify = function (dictReflectable) {
    var modify1 = Data_FastVect_FastVect.modify(dictReflectable)()()();
    return function () {
        return function () {
            return function () {
                return function (dictReflectable1) {
                    var modify2 = Data_FastVect_FastVect.modify(dictReflectable1)()()();
                    return function () {
                        return function () {
                            return function () {
                                return function (v) {
                                    return function (v1) {
                                        return function (f) {
                                            return function (v2) {
                                                return modify2(Data_FastVect_Common.term)(modify1(Data_FastVect_Common.term)(f))(v2);
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var set = function (dictReflectable) {
    var modify1 = modify(dictReflectable)()()();
    return function () {
        return function () {
            return function () {
                return function (dictReflectable1) {
                    var modify2 = modify1(dictReflectable1)()()();
                    return function () {
                        return function () {
                            return function () {
                                return function (i) {
                                    return function (j) {
                                        return function (a) {
                                            return function (m) {
                                                return modify2(i)(j)(Data_Function["const"](a))(m);
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var mapWithTerm = function (dictReflectable) {
    var mapWithTerm1 = Data_FastVect_FastVect.mapWithTerm(dictReflectable)();
    return function () {
        return function (dictReflectable1) {
            var mapWithTerm2 = Data_FastVect_FastVect.mapWithTerm(dictReflectable1)();
            return function () {
                return function (f) {
                    return function (v) {
                        return mapWithTerm2(function () {
                            return function () {
                                return function (dictReflectable2) {
                                    return function (j) {
                                        return mapWithTerm1(function () {
                                            return function () {
                                                return function (dictReflectable3) {
                                                    var f2 = f(dictReflectable3)(dictReflectable2)()()()();
                                                    return function (i) {
                                                        return f2(i)(j);
                                                    };
                                                };
                                            };
                                        });
                                    };
                                };
                            };
                        })(v);
                    };
                };
            };
        };
    };
};
var index = function () {
    return function () {
        return function () {
            return function () {
                return function () {
                    return function () {
                        return function (dictReflectable) {
                            var index3 = Data_FastVect_FastVect.index(dictReflectable)()()();
                            return function (dictReflectable1) {
                                var index4 = Data_FastVect_FastVect.index(dictReflectable1)()()();
                                return function (v) {
                                    return function (v1) {
                                        return function (v2) {
                                            return index3(Data_FastVect_Common.term)(index4(Data_FastVect_Common.term)(v2));
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var index2 = /* #__PURE__ */ index()()()()()();
var traced = function (dictReflectable) {
    var generate1 = Data_FastVect_FastVect.generate(dictReflectable)();
    return function () {
        return function (m) {
            return generate1(Data_FastVect_Common.term)(function () {
                return function () {
                    return function (dictReflectable1) {
                        var index3 = index2(dictReflectable1)(dictReflectable1);
                        return function (i) {
                            return index3(i)(i)(m);
                        };
                    };
                };
            });
        };
    };
};
var trace = function (dictReflectable) {
    var traced1 = traced(dictReflectable)();
    return function (dictSemiring) {
        var sum1 = sum(dictSemiring);
        return function () {
            return function (m) {
                return sum1(traced1(m));
            };
        };
    };
};
var transform = function (dictReflectable) {
    var generate1 = Data_FastVect_FastVect.generate(dictReflectable)();
    return function () {
        return function (dictReflectable1) {
            var generate2 = Data_FastVect_FastVect.generate(dictReflectable1)();
            return function () {
                return function (dictSemiring) {
                    var sum1 = sum(dictSemiring);
                    var mul = Data_Semiring.mul(dictSemiring);
                    return function (m) {
                        return function (v) {
                            return generate1(Data_FastVect_Common.term)(function () {
                                return function () {
                                    return function (dictReflectable2) {
                                        var index3 = index2(dictReflectable2);
                                        return function (i) {
                                            return sum1(generate2(Data_FastVect_Common.term)(function () {
                                                return function () {
                                                    return function (dictReflectable3) {
                                                        var index4 = index3(dictReflectable3);
                                                        var index5 = Data_FastVect_FastVect.index(dictReflectable3)()()();
                                                        return function (j) {
                                                            return mul(index4(i)(j)(m))(index5(j)(v));
                                                        };
                                                    };
                                                };
                                            }));
                                        };
                                    };
                                };
                            });
                        };
                    };
                };
            };
        };
    };
};
var product = function (dictReflectable) {
    var transform1 = transform(dictReflectable)();
    return function () {
        return function (dictReflectable1) {
            var transform2 = transform1(dictReflectable1)();
            return function () {
                return function (dictReflectable2) {
                    return function () {
                        return function (dictSemiring) {
                            var transform3 = transform2(dictSemiring);
                            return function (m1) {
                                return function (v) {
                                    return map(function (v1) {
                                        return transform3(m1)(v1);
                                    })(v);
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var generate = function (dictReflectable) {
    var generate1 = Data_FastVect_FastVect.generate(dictReflectable)();
    return function () {
        return function (dictReflectable1) {
            var generate2 = Data_FastVect_FastVect.generate(dictReflectable1)();
            return function () {
                return function (v) {
                    return function (v1) {
                        return function (f) {
                            return generate2(Data_FastVect_Common.term)(function () {
                                return function () {
                                    return function (dictReflectable2) {
                                        return function (j) {
                                            return generate1(Data_FastVect_Common.term)(function () {
                                                return function () {
                                                    return function (dictReflectable3) {
                                                        var f1 = f(dictReflectable3)(dictReflectable2)()()()();
                                                        return function (i) {
                                                            return f1(i)(j);
                                                        };
                                                    };
                                                };
                                            });
                                        };
                                    };
                                };
                            });
                        };
                    };
                };
            };
        };
    };
};
var transpose = function (dictReflectable) {
    return function () {
        return function (dictReflectable1) {
            var generate1 = generate(dictReflectable1)()(dictReflectable)();
            return function () {
                return function (m) {
                    return generate1(Data_FastVect_Common.term)(Data_FastVect_Common.term)(function (dictReflectable2) {
                        return function (dictReflectable3) {
                            var index3 = index2(dictReflectable3)(dictReflectable2);
                            return function () {
                                return function () {
                                    return function () {
                                        return function () {
                                            return function (i) {
                                                return function (j) {
                                                    return index3(j)(i)(m);
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    });
                };
            };
        };
    };
};
var fromVectVect = Matrix;
var fromVectArray = function () {
    return function () {
        return function (dictReflectable) {
            var fromArray = Data_FastVect_FastVect.fromArray(dictReflectable)();
            return function (arr) {
                return map1(Matrix)(fromArray(Data_FastVect_Common.term)(arr));
            };
        };
    };
};
var fromVectArray1 = /* #__PURE__ */ fromVectArray()();
var fromVect = function () {
    return function (v) {
        return Data_FastVect_FastVect.singleton(v);
    };
};
var fromArrayArray = function () {
    return function () {
        return function (dictReflectable) {
            var fromVectArray2 = fromVectArray1(dictReflectable);
            return function () {
                return function (dictReflectable1) {
                    var fromArray = Data_FastVect_FastVect.fromArray(dictReflectable1)();
                    return function (arr) {
                        return bindFlipped(fromVectArray2)(sequence2(map2(fromArray(Data_FastVect_Common.term))(arr)));
                    };
                };
            };
        };
    };
};
var empty = Data_FastVect_FastVect.empty;
var dotProduct = function (dictReflectable) {
    return function () {
        return function (dictSemiring) {
            var sum1 = sum(dictSemiring);
            var mul = Data_Semiring.mul(dictSemiring);
            return function (v1) {
                return function (v2) {
                    return sum1(lift2(mul)(v1)(v2));
                };
            };
        };
    };
};
var diag = function (dictReflectable) {
    var generate1 = generate(dictReflectable)()(dictReflectable)();
    return function () {
        return function (dictSemiring) {
            var zero = Data_Semiring.zero(dictSemiring);
            return function (v) {
                return generate1(Data_FastVect_Common.term)(Data_FastVect_Common.term)(function (dictReflectable1) {
                    var toInt = Data_FastVect_Common.toInt(dictReflectable1);
                    var index3 = Data_FastVect_FastVect.index(dictReflectable1)()()();
                    return function (dictReflectable2) {
                        var toInt1 = Data_FastVect_Common.toInt(dictReflectable2);
                        return function () {
                            return function () {
                                return function () {
                                    return function () {
                                        return function (i) {
                                            return function (j) {
                                                var $438 = toInt(i) === toInt1(j);
                                                if ($438) {
                                                    return index3(i)(v);
                                                };
                                                return zero;
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                });
            };
        };
    };
};
export {
    Matrix,
    diag,
    dotProduct,
    empty,
    fromArrayArray,
    fromVect,
    fromVectArray,
    fromVectVect,
    generate,
    index,
    mapWithTerm,
    modify,
    outerMap,
    outerProduct,
    product,
    replicate,
    set,
    singleton,
    toArrayArray,
    toVect,
    toVectArray,
    toVectVect,
    trace,
    traced,
    transform,
    transpose,
    showMatrix,
    eqMatrix,
    ordMatrix,
    functorMatrix,
    functorWithIndexTupleIntI,
    applyMatrix,
    applicativeMatrix,
    bindMatrix,
    monadMatrix,
    foldableMatrix,
    foldableWithIndexTupleInt,
    foldable1Matrix,
    traversableMatrix,
    traversableWithIndexTuple,
    traversable1Matrix,
    distributiveMatrix,
    semigroupMatrix,
    monoidMatrix,
    semiringMatrix,
    ringMatrix,
    commutativeRingMatrix
};
