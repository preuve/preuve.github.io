// Generated by purs version 0.15.9
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Deku_Attribute from "../Deku.Attribute/index.js";
import * as Deku_DOM from "../Deku.DOM/index.js";
import * as Deku_DOM_Attr_OnClick from "../Deku.DOM.Attr.OnClick/index.js";
import * as Deku_DOM_Attr_OnInput from "../Deku.DOM.Attr.OnInput/index.js";
import * as Deku_DOM_Attr_OnKeydown from "../Deku.DOM.Attr.OnKeydown/index.js";
import * as Deku_DOM_Attr_OnKeypress from "../Deku.DOM.Attr.OnKeypress/index.js";
import * as Deku_DOM_Attr_OnKeyup from "../Deku.DOM.Attr.OnKeyup/index.js";
import * as Deku_DOM_Attr_Xtype from "../Deku.DOM.Attr.Xtype/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as FRP_Event from "../FRP.Event/index.js";
import * as Web_Event_Event from "../Web.Event.Event/index.js";
import * as Web_HTML_HTMLInputElement from "../Web.HTML.HTMLInputElement/index.js";
import * as Web_UIEvent_KeyboardEvent from "../Web.UIEvent.KeyboardEvent/index.js";
var map = /* #__PURE__ */ Data_Functor.map(FRP_Event.functorEvent);
var attr = /* #__PURE__ */ Deku_Attribute.attr(Deku_DOM_Attr_OnInput.attrOnInputCb);
var for_ = /* #__PURE__ */ Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe);
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Maybe.bindMaybe);
var composeKleisli = /* #__PURE__ */ Control_Bind.composeKleisli(Effect.bindEffect);
var pure = /* #__PURE__ */ Control_Applicative.pure(FRP_Event.applicativeEvent);
var alt = /* #__PURE__ */ Control_Alt.alt(FRP_Event.altEvent);
var attr1 = /* #__PURE__ */ Deku_Attribute.attr(Deku_DOM_Attr_Xtype.attrInput_XtypeString);
var applySecond = /* #__PURE__ */ Control_Apply.applySecond(Effect_Aff.applyAff);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
var textInput = /* #__PURE__ */ map(function (push) {
    return attr(Deku_DOM_Attr_OnInput.OnInput.value)(Deku_Attribute.cb(function (e) {
        return for_(bind(Web_Event_Event.target(e))(Web_HTML_HTMLInputElement.fromEventTarget))(composeKleisli(Web_HTML_HTMLInputElement.value)(push));
    }));
});
var textInput_ = function ($28) {
    return textInput(pure($28));
};
var slider = /* #__PURE__ */ (function () {
    var $29 = alt(pure(attr1(Deku_DOM_Attr_Xtype.Xtype.value)("range")));
    var $30 = map(function (push) {
        return attr(Deku_DOM_Attr_OnInput.OnInput.value)(Deku_Attribute.cb(function (e) {
            return for_(bind(Web_Event_Event.target(e))(Web_HTML_HTMLInputElement.fromEventTarget))(composeKleisli(Web_HTML_HTMLInputElement.valueAsNumber)(push));
        }));
    });
    return function ($31) {
        return $29($30($31));
    };
})();
var slider_ = function ($32) {
    return slider(pure($32));
};
var numeric = /* #__PURE__ */ (function () {
    var $33 = alt(pure(attr1(Deku_DOM_Attr_Xtype.Xtype.value)("number")));
    var $34 = map(function (push) {
        return attr(Deku_DOM_Attr_OnInput.OnInput.value)(Deku_Attribute.cb(function (e) {
            return for_(bind(Web_Event_Event.target(e))(Web_HTML_HTMLInputElement.fromEventTarget))(composeKleisli(Web_HTML_HTMLInputElement.valueAsNumber)(push));
        }));
    });
    return function ($35) {
        return $33($34($35));
    };
})();
var numeric_ = function ($36) {
    return numeric(pure($36));
};
var keyEvent$prime = function (dictFunctor) {
    var map1 = Data_Functor.map(dictFunctor);
    return function (dictAttr) {
        var attr2 = Deku_Attribute.attr(dictAttr);
        return function (listener) {
            return map1(function (f) {
                return attr2(listener)(Deku_Attribute.cb(function (e) {
                    return for_(Web_UIEvent_KeyboardEvent.fromEvent(e))(f);
                }));
            });
        };
    };
};
var keyEvent$prime1 = /* #__PURE__ */ keyEvent$prime(FRP_Event.functorEvent);
var keyPress = /* #__PURE__ */ (function () {
    return keyEvent$prime1(Deku_DOM_Attr_OnKeypress.attrOnKeypressCb)(Deku_DOM_Attr_OnKeypress.OnKeypress.value);
})();
var keyPress_ = function ($37) {
    return keyPress(pure($37));
};
var keyUp = /* #__PURE__ */ (function () {
    return keyEvent$prime1(Deku_DOM_Attr_OnKeyup.attrOnKeyupCb)(Deku_DOM_Attr_OnKeyup.OnKeyup.value);
})();
var keyUp_ = function ($38) {
    return keyUp(pure($38));
};
var keyDown = /* #__PURE__ */ (function () {
    return keyEvent$prime1(Deku_DOM_Attr_OnKeydown.attrOnKeydownCb)(Deku_DOM_Attr_OnKeydown.OnKeydown.value);
})();
var keyDown_ = function ($39) {
    return keyDown(pure($39));
};
var injectElementT = function (dictAttr) {
    var attr2 = Deku_Attribute.attr(dictAttr);
    return function (f) {
        return pure(attr2(Deku_DOM.SelfT.value)(function (s) {
            return Effect_Aff.launchAff_(applySecond(Effect_Aff.delay(0.0))(liftEffect(f(s))));
        }));
    };
};
var injectElement = function (dictAttr) {
    var attr2 = Deku_Attribute.attr(dictAttr);
    return function (f) {
        return pure(attr2(Deku_DOM.Self.value)(function (s) {
            return Effect_Aff.launchAff_(applySecond(Effect_Aff.delay(0.0))(liftEffect(f(s))));
        }));
    };
};
var click = function (dictAttr) {
    return map(Deku_Attribute.attr(dictAttr)(Deku_DOM_Attr_OnClick.OnClick.value));
};
var click_ = function (dictAttr) {
    var $40 = click(dictAttr);
    return function ($41) {
        return $40(pure($41));
    };
};
var checkbox = /* #__PURE__ */ (function () {
    var $42 = alt(pure(attr1(Deku_DOM_Attr_Xtype.Xtype.value)("checkbox")));
    var $43 = map(function (push) {
        return attr(Deku_DOM_Attr_OnInput.OnInput.value)(Deku_Attribute.cb(function (e) {
            return for_(bind(Web_Event_Event.target(e))(Web_HTML_HTMLInputElement.fromEventTarget))(composeKleisli(Web_HTML_HTMLInputElement.checked)(push));
        }));
    });
    return function ($44) {
        return $42($43($44));
    };
})();
var checkbox_ = function ($45) {
    return checkbox(pure($45));
};
export {
    slider,
    slider_,
    numeric,
    numeric_,
    checkbox,
    checkbox_,
    click,
    click_,
    keyUp,
    keyUp_,
    keyDown,
    keyDown_,
    keyPress,
    keyPress_,
    textInput,
    textInput_,
    injectElement,
    injectElementT
};
