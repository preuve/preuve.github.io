// Generated by purs version 0.15.9
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Complex from "../Data.Complex/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_EuclideanRing from "../Data.EuclideanRing/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_FoldableWithIndex from "../Data.FoldableWithIndex/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Monoid_Multiplicative from "../Data.Monoid.Multiplicative/index.js";
import * as Data_Number from "../Data.Number/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Ratio from "../Data.Ratio/index.js";
import * as Data_Ring from "../Data.Ring/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Semiring from "../Data.Semiring/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as JS_BigInt from "../JS.BigInt/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var filter = /* #__PURE__ */ Data_Map_Internal.filter(Data_Ord.ordInt);
var unionWith = /* #__PURE__ */ Data_Map_Internal.unionWith(Data_Ord.ordInt);
var foldr = /* #__PURE__ */ Data_Foldable.foldr(Data_Foldable.foldableArray);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var foldrWithIndex = /* #__PURE__ */ Data_FoldableWithIndex.foldrWithIndex(Data_Map_Internal.foldableWithIndexMap);
var insert = /* #__PURE__ */ Data_Map_Internal.insert(Data_Ord.ordInt);
var toUnfoldable = /* #__PURE__ */ Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray);
var mapMaybe = /* #__PURE__ */ Data_Map_Internal.mapMaybe(Data_Ord.ordInt);
var eqMap = /* #__PURE__ */ Data_Map_Internal.eqMap(Data_Eq.eqInt);
var union = /* #__PURE__ */ Data_Map_Internal.union(Data_Ord.ordInt);
var compare = /* #__PURE__ */ Data_Ord.compare(Data_Ord.ordInt);
var lookup = /* #__PURE__ */ Data_Map_Internal.lookup(Data_Ord.ordInt);
var mod = /* #__PURE__ */ Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt);
var div = /* #__PURE__ */ Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Complex.functorCartesian);
var semiringCartesian = /* #__PURE__ */ Data_Complex.semiringCartesian(Data_Ring.ringNumber);
var one = /* #__PURE__ */ Data_Semiring.one(semiringCartesian);
var foldl = /* #__PURE__ */ Data_Foldable.foldl(Data_Foldable.foldableArray);
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var eqCartesian = /* #__PURE__ */ Data_Complex.eqCartesian(Data_Eq.eqNumber);
var div1 = /* #__PURE__ */ Data_EuclideanRing.div(Data_Complex.euclideanRingCartesianNumber);
var fromJust = /* #__PURE__ */ Data_Maybe.fromJust();
var mul1 = /* #__PURE__ */ Data_Semiring.mul(semiringCartesian);
var ringCartesian = /* #__PURE__ */ Data_Complex.ringCartesian(Data_Ring.ringNumber);
var sub1 = /* #__PURE__ */ Data_Ring.sub(ringCartesian);
var product = /* #__PURE__ */ Data_Foldable.product(Data_Foldable.foldableArray);
var maximum = /* #__PURE__ */ Data_Foldable.maximum(Data_Ord.ordNumber)(Data_Foldable.foldableArray);
var map2 = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorFn);
var magnitudeSquared = /* #__PURE__ */ Data_Complex.magnitudeSquared(Data_Ring.ringNumber);
var sequence = /* #__PURE__ */ Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Applicative.applicativeArray);
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Maybe.bindMaybe);
var fromFoldable = /* #__PURE__ */ Data_Map_Internal.fromFoldable(Data_Ord.ordInt)(Data_Foldable.foldableArray);
var lookup1 = /* #__PURE__ */ Data_Foldable.lookup(Data_Foldable.foldableArray);
var maximum1 = /* #__PURE__ */ Data_Foldable.maximum(Data_Ord.ordInt)(Data_Foldable.foldableArray);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var Poly = function (x) {
    return x;
};
var unpad$minus1 = function (dictSemiring) {
    return {
        unpad: function (v) {
            return function (p) {
                return p;
            };
        }
    };
};
var univariatePolynomialPolyn = {
    isMultivariate: function (v) {
        return true;
    }
};
var univariate = {
    isMultivariate: function (v) {
        return false;
    }
};
var swapSortEQ = {
    swapSort: function (v) {
        return function (v1) {
            return function (v2) {
                return identity;
            };
        };
    }
};
var semiringPolynomial = function (dictEq) {
    var notEq1 = Data_Eq.notEq(dictEq);
    return function (dictSemiring) {
        var zero = Data_Semiring.zero(dictSemiring);
        var add1 = Data_Semiring.add(dictSemiring);
        var mul2 = Data_Semiring.mul(dictSemiring);
        return {
            add: function (v) {
                return function (v1) {
                    return filter(function (v2) {
                        return notEq1(v2)(zero);
                    })(unionWith(add1)(v)(v1));
                };
            },
            mul: function (v) {
                return function (v1) {
                    return filter(function (v2) {
                        return notEq1(v2)(zero);
                    })(foldr(unionWith(add1))(Data_Map_Internal.empty)(map(function (v2) {
                        return foldrWithIndex(function (j) {
                            return function (w) {
                                return function (acc) {
                                    return insert(v2.value0 + j | 0)(mul2(v2.value1)(w))(acc);
                                };
                            };
                        })(Data_Map_Internal.empty)(v1);
                    })(toUnfoldable(v))));
                };
            },
            zero: Data_Map_Internal.empty,
            one: Data_Map_Internal.singleton(0)(Data_Semiring.one(dictSemiring))
        };
    };
};
var product1 = /* #__PURE__ */ product(/* #__PURE__ */ semiringPolynomial(eqCartesian)(semiringCartesian));
var primitivable = function (dictEq) {
    var semiringPolynomial1 = semiringPolynomial(dictEq);
    return function (dictSemiring) {
        var one1 = Data_Semiring.one(semiringPolynomial1(dictSemiring));
        return {
            primitivePart: function (p) {
                return p;
            },
            globalFactor: function (v) {
                return function (v1) {
                    return one1;
                };
            }
        };
    };
};
var nextAxis1 = function () {
    return {
        nextAxis: function (v) {
            return Type_Proxy["Proxy"].value;
        },
        prevAxis: function (v) {
            return Type_Proxy["Proxy"].value;
        }
    };
};
var nextAxis2 = /* #__PURE__ */ nextAxis1();
var goSwap0 = {
    goSwap: function (v) {
        return function (v1) {
            return identity;
        };
    }
};
var functorPolynomial = {
    map: function (f) {
        return function (v) {
            return mapMaybe(function (v1) {
                return new Data_Maybe.Just(f(v1));
            })(v);
        };
    }
};
var map3 = /* #__PURE__ */ Data_Functor.map(functorPolynomial);
var ringPolynomial = function (dictEq) {
    var semiringPolynomial1 = semiringPolynomial(dictEq);
    return function (dictRing) {
        var Semiring0 = dictRing.Semiring0();
        var semiringPolynomial2 = semiringPolynomial1(Semiring0);
        var add1 = Data_Semiring.add(semiringPolynomial2);
        var mul2 = Data_Semiring.mul(Semiring0);
        var negate1 = Data_Ring.negate(dictRing);
        var one1 = Data_Semiring.one(Semiring0);
        return {
            sub: function (p1) {
                return function (p2) {
                    return add1(p1)(map3(function (v) {
                        return mul2(v)(negate1(one1));
                    })(p2));
                };
            },
            Semiring0: function () {
                return semiringPolynomial2;
            }
        };
    };
};
var sub2 = /* #__PURE__ */ Data_Ring.sub(/* #__PURE__ */ ringPolynomial(eqCartesian)(ringCartesian));
var eqPolynomial = function (dictEq) {
    var eq1 = Data_Eq.eq(eqMap(dictEq));
    return {
        eq: function (v) {
            return function (v1) {
                return eq1(v)(v1);
            };
        }
    };
};
var semigroupPolynomial = function (dictEq) {
    var eq1 = Data_Eq.eq(eqPolynomial(dictEq));
    var semiringPolynomial1 = semiringPolynomial(dictEq);
    return function (dictSemiring) {
        var zero = Data_Semiring.zero(semiringPolynomial1(dictSemiring));
        return {
            append: function (v) {
                return function (v1) {
                    if (eq1(v)(zero) && eq1(v1)(zero)) {
                        return Data_Map_Internal.empty;
                    };
                    if (eq1(v)(zero)) {
                        return v1;
                    };
                    if (Data_Boolean.otherwise) {
                        return union(v)(v1);
                    };
                    throw new Error("Failed pattern match at Data.Sparse.Polynomial (line 717, column 1 - line 724, column 35): " + [ v.constructor.name, v1.constructor.name ]);
                };
            }
        };
    };
};
var monoidPolynomial = function (dictEq) {
    var semigroupPolynomial1 = semigroupPolynomial(dictEq);
    return function (dictSemiring) {
        var semigroupPolynomial2 = semigroupPolynomial1(dictSemiring);
        return {
            mempty: Data_Map_Internal.empty,
            Semigroup0: function () {
                return semigroupPolynomial2;
            }
        };
    };
};
var divisible = function (dictEuclideanRing) {
    var div2 = Data_EuclideanRing.div(dictEuclideanRing);
    return {
        divides: function (a) {
            return function (b) {
                return new Data_Maybe.Just(div2(b)(a));
            };
        }
    };
};
var display1 = function (dictShow) {
    var show1 = Data_Show.show(dictShow);
    return function (dictArity) {
        return {
            arity: function (v) {
                return 0;
            },
            display: function (v) {
                return function (x) {
                    return show1(x);
                };
            }
        };
    };
};
var commutativeRingPolynomial = function (dictEq) {
    var ringPolynomial1 = ringPolynomial(dictEq);
    return function (dictRing) {
        var ringPolynomial2 = ringPolynomial1(dictRing);
        return {
            Ring0: function () {
                return ringPolynomial2;
            }
        };
    };
};
var axed = function (dictSemiring) {
    return function (dictEq) {
        return {
            axes: function (v) {
                return new Data_Tuple.Tuple(identity, [  ]);
            }
        };
    };
};
var arityPolynomialPolynomial = function (dictArity) {
    return function () {
        return {
            "arity'": function (v) {
                return Type_Proxy["Proxy"].value;
            }
        };
    };
};
var arityPolynomial1 = {
    "arity'": function (v) {
        return Type_Proxy["Proxy"].value;
    }
};
var arity0 = {
    "arity'": function (v) {
        return Type_Proxy["Proxy"].value;
    }
};
var unpad = function (dict) {
    return dict.unpad;
};
var unity = function (dictEq) {
    var semiringPolynomial1 = semiringPolynomial(dictEq);
    return function (dictSemiring) {
        var one1 = Data_Semiring.one(semiringPolynomial1(dictSemiring));
        return function (v) {
            return one1;
        };
    };
};
var swapSort = function (dict) {
    return dict.swapSort;
};
var swap1 = function () {
    return function (dictSwapSort) {
        return {
            swap: swapSort(dictSwapSort)(Type_Proxy["Proxy"].value)
        };
    };
};
var swapInOrder = function (dict) {
    return dict.swapInOrder;
};
var swapSortGT = function (dictSwapInOrder) {
    var swapInOrder2 = swapInOrder(dictSwapInOrder);
    return {
        swapSort: function (v) {
            return function (v1) {
                return function (v2) {
                    return swapInOrder2(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                };
            };
        }
    };
};
var swapSortLT = function (dictSwapInOrder) {
    var swapInOrder2 = swapInOrder(dictSwapInOrder);
    return {
        swapSort: function (v) {
            return function (v1) {
                return function (v2) {
                    return swapInOrder2(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                };
            };
        }
    };
};
var swapAdjacent = function (dict) {
    return dict.swapAdjacent;
};
var goSwap1 = function (dictSwapAdjacent) {
    var swapAdjacent1 = swapAdjacent(dictSwapAdjacent);
    return {
        goSwap: function (v) {
            return function (v1) {
                return swapAdjacent1(Type_Proxy["Proxy"].value);
            };
        }
    };
};
var swapAdjacentPolynomial = function (dictSwapAdjacent) {
    var swapAdjacent1 = swapAdjacent(dictSwapAdjacent);
    return function (dictSemiring) {
        return function () {
            return {
                swapAdjacent: function (v) {
                    return map3(swapAdjacent1(Type_Proxy["Proxy"].value));
                }
            };
        };
    };
};
var swap = function (dict) {
    return dict.swap;
};
var sortedMonoms = function (v) {
    return Data_Array.sortBy(function (v1) {
        return function (v2) {
            return compare(v2.value0)(v1.value0);
        };
    })(toUnfoldable(v));
};
var set = function (dict) {
    return dict.set;
};
var query = function (dictSemiring) {
    var zero = Data_Semiring.zero(dictSemiring);
    return function (v) {
        return function (n) {
            return Data_Maybe.fromMaybe(zero)(lookup(n)(v));
        };
    };
};
var peel1 = function (dictSemiring) {
    var query1 = query(dictSemiring);
    return {
        peel: function (p) {
            return query1(p)(0);
        }
    };
};
var unpadPolynomial = function (dictUnpad) {
    var unpad1 = unpad(dictUnpad);
    return function () {
        return function (dictSemiring) {
            return function (dictEq) {
                var query1 = query(semiringPolynomial(dictEq)(dictSemiring));
                return {
                    unpad: function (v) {
                        return function (p) {
                            return (function (v1) {
                                return query1(v1)(0);
                            })(unpad1(Type_Proxy["Proxy"].value)(p));
                        };
                    }
                };
            };
        };
    };
};
var primitivePart = function (dict) {
    return dict.primitivePart;
};
var prevAxis = function (dict) {
    return dict.prevAxis;
};
var prevAxis1 = /* #__PURE__ */ prevAxis(nextAxis2);
var pow = function (dictSemiring) {
    var one1 = Data_Semiring.one(dictSemiring);
    var mul2 = Data_Semiring.mul(dictSemiring);
    return function (v) {
        return function (v1) {
            if (v1 === 0) {
                return one1;
            };
            if (mod(v1)(2) === 0) {
                var y = pow(dictSemiring)(v)(div(v1)(2));
                return mul2(y)(y);
            };
            if (Data_Boolean.otherwise) {
                var y = pow(dictSemiring)(v)(div(v1 - 1 | 0)(2));
                return mul2(mul2(v)(y))(y);
            };
            throw new Error("Failed pattern match at Data.Sparse.Polynomial (line 733, column 1 - line 733, column 45): " + [ v.constructor.name, v1.constructor.name ]);
        };
    };
};
var peel = function (dict) {
    return dict.peel;
};
var peelPolynomial = function (dictPeel) {
    var peel2 = peel(dictPeel);
    return function (dictEq) {
        var semiringPolynomial1 = semiringPolynomial(dictEq);
        return function (dictSemiring) {
            var query1 = query(semiringPolynomial1(dictSemiring));
            return {
                peel: function (p) {
                    return peel2(query1(p)(0));
                }
            };
        };
    };
};
var pad = function (dict) {
    return dict.pad;
};
var ordPoly = function (dictOrd) {
    var compare1 = Data_Ord.compare(dictOrd);
    return function (dictEq) {
        var notEq1 = Data_Eq.notEq(dictEq);
        var eqPolynomial1 = eqPolynomial(dictEq);
        return function (dictCommutativeRing) {
            return {
                compare: function (p) {
                    return function (q) {
                        var sq = sortedMonoms(q);
                        var sp = sortedMonoms(p);
                        var f = function (xs) {
                            return function (ys) {
                                var v = Data_Array.uncons(xs);
                                if (v instanceof Data_Maybe.Just) {
                                    var v1 = Data_Array.uncons(ys);
                                    if (v1 instanceof Data_Maybe.Just) {
                                        var next = (function () {
                                            if (v.value0.head.value0 !== v1.value0.head.value0) {
                                                return compare(v.value0.head.value0)(v1.value0.head.value0);
                                            };
                                            if (notEq1(v.value0.head.value1)(v1.value0.head.value1)) {
                                                return compare1(v.value0.head.value1)(v1.value0.head.value1);
                                            };
                                            if (Data_Boolean.otherwise) {
                                                return f(v.value0.tail)(v1.value0.tail);
                                            };
                                            throw new Error("Failed pattern match at Data.Sparse.Polynomial (line 1171, column 21 - line 1174, column 44): " + [  ]);
                                        })();
                                        return next;
                                    };
                                    return Data_Ordering.GT.value;
                                };
                                var v1 = Data_Array.uncons(ys);
                                if (v1 instanceof Data_Maybe.Just) {
                                    return Data_Ordering.LT.value;
                                };
                                return Data_Ordering.EQ.value;
                            };
                        };
                        return f(sp)(sq);
                    };
                },
                Eq0: function () {
                    return eqPolynomial1;
                }
            };
        };
    };
};
var numberIntLiftable = {
    fromInt: Data_Int.toNumber
};
var nextAxis = function (dict) {
    return dict.nextAxis;
};
var nest = function (dict) {
    return dict.nest;
};
var nestPolynomial = function (dictNest) {
    var nest1 = nest(dictNest);
    return function () {
        return {
            nest: function (v) {
                return map3(nest1(Type_Proxy["Proxy"].value));
            }
        };
    };
};
var monoms = function (v) {
    return toUnfoldable(v);
};
var monoPol = function (x) {
    return function (n) {
        return insert(n)(x)(Data_Map_Internal.empty);
    };
};
var xtend = function (a) {
    return monoPol(a)(0);
};
var nest0 = {
    nest: function (v) {
        return xtend;
    }
};
var pad0Polynomial = {
    pad: function (v) {
        return function (p) {
            return monoPol(p)(0);
        };
    }
};
var pad1 = /* #__PURE__ */ pad(pad0Polynomial);
var padPolynomial = function (dictPad) {
    var pad2 = pad(dictPad);
    return function () {
        return {
            pad: function (v) {
                return function (p) {
                    return monoPol(pad2(Type_Proxy["Proxy"].value)(p))(0);
                };
            }
        };
    };
};
var liftC = function (p) {
    return map3(function (v) {
        return map1(function (v1) {
            return v1 * v;
        })(one);
    })(p);
};
var leader = function (dict) {
    return dict.leader;
};
var isPrime = function (dictOrd) {
    var greaterThan1 = Data_Ord.greaterThan(dictOrd);
    var notEq1 = Data_Eq.notEq(dictOrd.Eq0());
    return function (dictSemiring) {
        return function (dictEuclideanRing) {
            var Semiring0 = ((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0();
            var mul2 = Data_Semiring.mul(Semiring0);
            var mod1 = Data_EuclideanRing.mod(dictEuclideanRing);
            var zero = Data_Semiring.zero(Semiring0);
            var add1 = Data_Semiring.add(Semiring0);
            var one1 = Data_Semiring.one(Semiring0);
            return function (n) {
                var go = function (i) {
                    var $958 = greaterThan1(mul2(i)(i))(n);
                    if ($958) {
                        return true;
                    };
                    return notEq1(mod1(n)(i))(zero) && go(add1(i)(one1));
                };
                return go(add1(one1)(one1));
            };
        };
    };
};
var nextPrime = function (dictOrd) {
    var isPrime1 = isPrime(dictOrd);
    return function (dictSemiring) {
        return function (dictEuclideanRing) {
            var Semiring0 = ((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0();
            var isPrime2 = isPrime1(Semiring0)(dictEuclideanRing);
            var add1 = Data_Semiring.add(Semiring0);
            var one1 = Data_Semiring.one(Semiring0);
            return function (n) {
                var $959 = isPrime2(add1(n)(one1));
                if ($959) {
                    return add1(n)(one1);
                };
                return nextPrime(dictOrd)(Semiring0)(dictEuclideanRing)(add1(n)(one1));
            };
        };
    };
};
var primeFactor = function (dictOrd) {
    var lessThan1 = Data_Ord.lessThan(dictOrd);
    var nextPrime1 = nextPrime(dictOrd);
    return function (dictEq) {
        var eq1 = Data_Eq.eq(dictEq);
        return function (dictEuclideanRing) {
            var mod1 = Data_EuclideanRing.mod(dictEuclideanRing);
            var Semiring0 = ((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0();
            var zero = Data_Semiring.zero(Semiring0);
            var mul2 = Data_Semiring.mul(Semiring0);
            var nextPrime2 = nextPrime1(Semiring0)(dictEuclideanRing);
            var one1 = Data_Semiring.one(Semiring0);
            var add1 = Data_Semiring.add(Semiring0);
            return function (n) {
                var ldpf = function ($copy_p) {
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(p) {
                        var $960 = eq1(mod1(n)(p))(zero);
                        if ($960) {
                            $tco_done = true;
                            return new Data_Tuple.Tuple(p, p);
                        };
                        var $961 = lessThan1(n)(mul2(p)(p));
                        if ($961) {
                            $tco_done = true;
                            return new Data_Tuple.Tuple(n, n);
                        };
                        $copy_p = nextPrime2(p);
                        return;
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($copy_p);
                    };
                    return $tco_result;
                };
                var $962 = eq1(n)(one1);
                if ($962) {
                    return new Data_Tuple.Tuple(false, one1);
                };
                var ldpn = ldpf(add1(one1)(one1));
                return new Data_Tuple.Tuple(eq1(Data_Tuple.fst(ldpn))(n), Data_Tuple.snd(ldpn));
            };
        };
    };
};
var primeFactorization = function (dictOrd) {
    var primeFactor1 = primeFactor(dictOrd);
    return function (dictEq) {
        var eq1 = Data_Eq.eq(dictEq);
        var primeFactor2 = primeFactor1(dictEq);
        return function (dictSemiring) {
            return function (dictEuclideanRing) {
                var Semiring0 = ((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0();
                var one1 = Data_Semiring.one(Semiring0);
                var zero = Data_Semiring.zero(Semiring0);
                var primeFactor3 = primeFactor2(dictEuclideanRing);
                var div2 = Data_EuclideanRing.div(dictEuclideanRing);
                return function (dictSemiring1) {
                    var add1 = Data_Semiring.add(dictSemiring1);
                    var one2 = Data_Semiring.one(dictSemiring1);
                    var zero1 = Data_Semiring.zero(dictSemiring1);
                    return function (m) {
                        var go = function ($copy_acc) {
                            return function ($copy_n) {
                                return function ($copy_current) {
                                    return function ($copy_cpt) {
                                        var $tco_var_acc = $copy_acc;
                                        var $tco_var_n = $copy_n;
                                        var $tco_var_current = $copy_current;
                                        var $tco_done = false;
                                        var $tco_result;
                                        function $tco_loop(acc, n, current, cpt) {
                                            var $963 = eq1(n)(one1);
                                            if ($963) {
                                                $tco_done = true;
                                                return acc;
                                            };
                                            var nogarbage = (function () {
                                                var $964 = eq1(current)(zero);
                                                if ($964) {
                                                    return acc;
                                                };
                                                return Data_Array.cons(new Data_Tuple.Tuple(current, cpt))(acc);
                                            })();
                                            var bool = primeFactor3(n);
                                            var p = Data_Tuple.snd(bool);
                                            var $965 = Data_Tuple.fst(bool);
                                            if ($965) {
                                                var $966 = eq1(p)(current);
                                                if ($966) {
                                                    $tco_done = true;
                                                    return Data_Array.cons(new Data_Tuple.Tuple(p, add1(cpt)(one2)))(acc);
                                                };
                                                $tco_done = true;
                                                return Data_Array.cons(new Data_Tuple.Tuple(p, one2))(nogarbage);
                                            };
                                            var $967 = eq1(p)(current);
                                            if ($967) {
                                                $tco_var_acc = acc;
                                                $tco_var_n = div2(n)(p);
                                                $tco_var_current = current;
                                                $copy_cpt = add1(cpt)(one2);
                                                return;
                                            };
                                            $tco_var_acc = nogarbage;
                                            $tco_var_n = div2(n)(p);
                                            $tco_var_current = p;
                                            $copy_cpt = one2;
                                            return;
                                        };
                                        while (!$tco_done) {
                                            $tco_result = $tco_loop($tco_var_acc, $tco_var_n, $tco_var_current, $copy_cpt);
                                        };
                                        return $tco_result;
                                    };
                                };
                            };
                        };
                        return go([  ])(m)(zero)(zero1);
                    };
                };
            };
        };
    };
};
var isMultivariate = function (dict) {
    return dict.isMultivariate;
};
var interpolate = function (dictEq) {
    var semiringPolynomial1 = semiringPolynomial(eqPolynomial(dictEq));
    var semiringPolynomial2 = semiringPolynomial(dictEq);
    var ringPolynomial1 = ringPolynomial(dictEq);
    return function (dictSemiring) {
        return function (dictEuclideanRing) {
            var Ring0 = (dictEuclideanRing.CommutativeRing0()).Ring0();
            var Semiring0 = Ring0.Semiring0();
            var semiringPolynomial3 = semiringPolynomial2(Semiring0);
            var add1 = Data_Semiring.add(semiringPolynomial1(semiringPolynomial3));
            var div2 = Data_EuclideanRing.div(dictEuclideanRing);
            var sub3 = Data_Ring.sub(Ring0);
            var query1 = query(Semiring0);
            var query2 = query(semiringPolynomial3);
            var add2 = Data_Semiring.add(semiringPolynomial3);
            var mul2 = Data_Semiring.mul(semiringPolynomial3);
            var sub4 = Data_Ring.sub(ringPolynomial1(Ring0));
            var one1 = Data_Semiring.one(Semiring0);
            var zero = Data_Semiring.zero(semiringPolynomial3);
            return function (arr) {
                var go = function ($copy_n) {
                    return function ($copy_build_) {
                        return function ($copy_current_) {
                            return function ($copy_prod_) {
                                return function ($copy_arr_) {
                                    var $tco_var_n = $copy_n;
                                    var $tco_var_build_ = $copy_build_;
                                    var $tco_var_current_ = $copy_current_;
                                    var $tco_var_prod_ = $copy_prod_;
                                    var $tco_done = false;
                                    var $tco_result;
                                    function $tco_loop(n, build_, current_, prod_, arr_) {
                                        var v = Data_Array.uncons(arr_);
                                        if (v instanceof Data_Maybe.Just) {
                                            var build = foldl(function (acc) {
                                                return function (j) {
                                                    var i = (n + 1 | 0) - j | 0;
                                                    return add1(acc)(monoPol(monoPol(div2(sub3(query1(query2(acc)(j - 1 | 0))(i + 1 | 0))(query1(query2(acc)(j - 1 | 0))(i)))(sub3(query1(query2(acc)(0))(n))(query1(query2(acc)(0))(i))))(i))(j));
                                                };
                                            })(add1(add1(build_)(monoPol(monoPol(v.value0.head.value0)(n))(0)))(monoPol(monoPol(v.value0.head.value1)(n))(1)))(Data_Array.range(2)(n + 1 | 0));
                                            $tco_var_n = n + 1 | 0;
                                            $tco_var_build_ = build;
                                            $tco_var_current_ = add2(current_)(mul2(monoPol(query1(query2(build)(n + 1 | 0))(0))(0))(prod_));
                                            $tco_var_prod_ = mul2(prod_)(sub4(monoPol(one1)(1))(monoPol(v.value0.head.value0)(0)));
                                            $copy_arr_ = v.value0.tail;
                                            return;
                                        };
                                        $tco_done = true;
                                        return current_;
                                    };
                                    while (!$tco_done) {
                                        $tco_result = $tco_loop($tco_var_n, $tco_var_build_, $tco_var_current_, $tco_var_prod_, $copy_arr_);
                                    };
                                    return $tco_result;
                                };
                            };
                        };
                    };
                };
                var v = Data_Array.uncons(arr);
                if (v instanceof Data_Maybe.Just) {
                    return go(1)(add1(monoPol(monoPol(v.value0.head.value0)(0))(0))(monoPol(monoPol(v.value0.head.value1)(0))(1)))(monoPol(v.value0.head.value1)(0))(sub4(monoPol(one1)(1))(monoPol(v.value0.head.value0)(0)))(v.value0.tail);
                };
                return zero;
            };
        };
    };
};
var integerLiftable = {
    fromInt: JS_BigInt.fromInt
};
var intIntLiftable = {
    fromInt: identity
};
var goSwap = function (dict) {
    return dict.goSwap;
};
var goSwap2 = function (dictGoSwap) {
    var goSwap3 = goSwap(dictGoSwap);
    return function () {
        return function () {
            return function (dictSwapAdjacent) {
                var swapAdjacent1 = swapAdjacent(dictSwapAdjacent);
                return {
                    goSwap: function (v) {
                        return function (v1) {
                            var $1077 = swapAdjacent1(Type_Proxy["Proxy"].value);
                            var $1078 = goSwap3(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                            var $1079 = swapAdjacent1(Type_Proxy["Proxy"].value);
                            return function ($1080) {
                                return $1077($1078($1079($1080)));
                            };
                        };
                    }
                };
            };
        };
    };
};
var swapInOrder1 = function (dictGoSwap) {
    var goSwap3 = goSwap(dictGoSwap);
    return function () {
        return {
            swapInOrder: function (v) {
                return function (v1) {
                    return goSwap3(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                };
            }
        };
    };
};
var globalFactor = function (dict) {
    return dict.globalFactor;
};
var fullImpl = function (dict) {
    return dict.fullImpl;
};
var fromInt = function (dict) {
    return dict.fromInt;
};
var ratioIntLiftable = function (dictOrd) {
    var reduce = Data_Ratio.reduce(dictOrd);
    return function (dictIntLiftable) {
        var fromInt1 = fromInt(dictIntLiftable);
        return function (dictEuclideanRing) {
            var reduce1 = reduce(dictEuclideanRing);
            var one1 = Data_Semiring.one(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0());
            return {
                fromInt: function (n) {
                    return reduce1(fromInt1(n))(one1);
                }
            };
        };
    };
};
var intLiftablePolynomial = function (dictEq) {
    var semiringPolynomial1 = semiringPolynomial(dictEq);
    return function (dictIntLiftable) {
        var fromInt1 = fromInt(dictIntLiftable);
        return function (dictSemiring) {
            var mul2 = Data_Semiring.mul(dictSemiring);
            var one1 = Data_Semiring.one(semiringPolynomial1(dictSemiring));
            return {
                fromInt: function (n) {
                    return map3(function (v) {
                        return mul2(v)(fromInt1(n));
                    })(one1);
                }
            };
        };
    };
};
var flipXpand = function (dictEq) {
    var semiringPolynomial1 = semiringPolynomial(dictEq);
    return function (dictSemiring) {
        var semiringPolynomial2 = semiringPolynomial1(dictSemiring);
        var add1 = Data_Semiring.add(semiringPolynomial2);
        var mul2 = Data_Semiring.mul(dictSemiring);
        var pow1 = pow(semiringPolynomial2);
        var zero = Data_Semiring.zero(semiringPolynomial2);
        return function (v) {
            return function (xp) {
                return foldrWithIndex(function (i) {
                    return function (v1) {
                        return function (acc) {
                            return add1(acc)(map3(function (v2) {
                                return mul2(v1)(v2);
                            })(pow1(xp)(i)));
                        };
                    };
                })(zero)(v);
            };
        };
    };
};
var xpand = function (dictEq) {
    var flipXpand1 = flipXpand(dictEq);
    return function (dictSemiring) {
        return Data_Function.flip(flipXpand1(dictSemiring));
    };
};
var fillValid0 = function (dictEq) {
    var xpand1 = xpand(dictEq);
    return function (dictSemiring) {
        var xpand2 = xpand1(dictSemiring);
        return {
            fillValid: function (v) {
                return xpand2;
            }
        };
    };
};
var fillValid = function (dict) {
    return dict.fillValid;
};
var evaluate = function (dictSemiring) {
    var add1 = Data_Semiring.add(dictSemiring);
    var mul2 = Data_Semiring.mul(dictSemiring);
    var pow1 = pow(dictSemiring);
    var zero = Data_Semiring.zero(dictSemiring);
    return function (v) {
        return function (x) {
            return foldrWithIndex(function (i) {
                return function (v1) {
                    return function (acc) {
                        return add1(acc)(mul2(v1)(pow1(x)(i)));
                    };
                };
            })(zero)(v);
        };
    };
};
var evaluate1 = /* #__PURE__ */ evaluate(semiringCartesian);
var xpose = function (dictSemiring) {
    return Data_Function.flip(evaluate(dictSemiring));
};
var xchng = function (dictEq) {
    var eqPolynomial1 = eqPolynomial(dictEq);
    var semiringPolynomial1 = semiringPolynomial(eqPolynomial1);
    var semiringPolynomial2 = semiringPolynomial(dictEq);
    var xpand1 = xpand(eqPolynomial(eqPolynomial1));
    return function (dictSemiring) {
        var one1 = Data_Semiring.one(dictSemiring);
        var semiringPolynomial3 = semiringPolynomial1(semiringPolynomial2(dictSemiring));
        var xpose1 = xpose(semiringPolynomial3);
        var zero = Data_Semiring.zero(semiringPolynomial3);
        var xpand2 = xpand1(semiringPolynomial3);
        return function (p) {
            var y = monoPol(monoPol(one1)(1))(0);
            return xpose1(zero)(xpand2(xtend(y))(map3(map3(xtend))(p)));
        };
    };
};
var swapAdjacent0 = function (dictEq) {
    var xchng1 = xchng(dictEq);
    return function (dictSemiring) {
        var xchng2 = xchng1(dictSemiring);
        return {
            swapAdjacent: function (v) {
                return xchng2;
            }
        };
    };
};
var set0 = function (dictSemiring) {
    var xpose1 = xpose(dictSemiring);
    return {
        set: function (v) {
            return xpose1;
        }
    };
};
var fill = function (dictEq) {
    var semiringPolynomial1 = semiringPolynomial(dictEq);
    var fillValid01 = fillValid0(eqPolynomial(dictEq));
    return function (dictSemiring) {
        var semiringPolynomial2 = semiringPolynomial1(dictSemiring);
        var set1 = set(set0(semiringPolynomial2));
        var zero = Data_Semiring.zero(semiringPolynomial2);
        var fillValid1 = fillValid(fillValid01(semiringPolynomial2));
        return function (dictNextAxis) {
            return function (dictGoSwap) {
                var goSwap3 = goSwap(dictGoSwap);
                return function (v) {
                    return function (r) {
                        return function (p) {
                            return set1(Type_Proxy["Proxy"].value)(zero)(fillValid1(Type_Proxy["Proxy"].value)(pad1(Type_Proxy["Proxy"].value)(r))(goSwap3(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(pad1(Type_Proxy["Proxy"].value)(p))));
                        };
                    };
                };
            };
        };
    };
};
var full1 = function (dictFull) {
    var fullImpl1 = fullImpl(dictFull);
    return function () {
        return function (dictNextAxis) {
            return function (dictGoSwap) {
                return function (dictEq) {
                    var fill1 = fill(dictEq);
                    return function (dictSemiring) {
                        var fill2 = fill1(dictSemiring)(dictNextAxis)(dictGoSwap);
                        return {
                            fullImpl: function (v) {
                                return append(fullImpl1(Type_Proxy["Proxy"].value))([ fill2(Type_Proxy["Proxy"].value) ]);
                            }
                        };
                    };
                };
            };
        };
    };
};
var full0 = function (dictEq) {
    var fill1 = fill(dictEq);
    var swapAdjacent01 = swapAdjacent0(dictEq);
    return function (dictSemiring) {
        var fill2 = fill1(dictSemiring)(nextAxis2)(goSwap1(swapAdjacent01(dictSemiring)));
        return {
            fullImpl: function (v) {
                return [ fill2(Type_Proxy["Proxy"].value) ];
            }
        };
    };
};
var down = function (dictFunctor) {
    var map4 = Data_Functor.map(dictFunctor);
    return function (dictSemiring) {
        return function (f) {
            return function ($1081) {
                return map4(f($1081));
            };
        };
    };
};
var down1 = /* #__PURE__ */ down(functorPolynomial);
var setPolynomial = function (dictSet) {
    var set1 = set(dictSet);
    return function () {
        return function (dictSemiring) {
            var down2 = down1(dictSemiring);
            return {
                set: function (v) {
                    return down2(set1(Type_Proxy["Proxy"].value));
                }
            };
        };
    };
};
var dominantMonom = function (dictEq) {
    return function (dictSemiring) {
        var zero = Data_Semiring.zero(dictSemiring);
        return function (p) {
            var ordered = sortedMonoms(p);
            var v = Data_Array.uncons(ordered);
            if (v instanceof Data_Maybe.Just) {
                return v.value0.head;
            };
            return new Data_Tuple.Tuple(0, zero);
        };
    };
};
var dominantMonom1 = /* #__PURE__ */ dominantMonom(eqCartesian)(semiringCartesian);
var roots = function (pnum) {
    var p = liftC(pnum);
    var v = dominantMonom1(p);
    var z0 = new Data_Complex.Cartesian(1.2, 3.4);
    var unitary = map3(function (v1) {
        return div1(v1)(v.value1);
    })(p);
    var th = function (k) {
        return function (xs) {
            return fromJust(Data_Array.index(xs)(k));
        };
    };
    var indices = Data_Array.range(0)(v.value0 - 1 | 0);
    var f = function ($copy_goods) {
        return function ($copy_error$prime) {
            var $tco_var_goods = $copy_goods;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(goods, error$prime) {
                var $995 = error$prime < 1.0e-7;
                if ($995) {
                    $tco_done = true;
                    return goods;
                };
                var betters = map(function (i) {
                    var good = th(i)(goods);
                    var prod = foldr(function (j) {
                        return function (acc) {
                            var $996 = i === j;
                            if ($996) {
                                return acc;
                            };
                            return mul1(acc)(sub1(good)(th(j)(goods)));
                        };
                    })(one)(indices);
                    return sub1(good)(div1(evaluate1(unitary)(good))(prod));
                })(indices);
                var error = (function () {
                    var v1 = sub2(unitary)(product1(map(function (z) {
                        return sub2(monoPol(one)(1))(monoPol(z)(0));
                    })(betters)));
                    return Data_Maybe.fromMaybe(0.0)(maximum(map(map2(map2(Data_Number.sqrt)(magnitudeSquared))(Data_Tuple.snd))(toUnfoldable(v1))));
                })();
                $tco_var_goods = betters;
                $copy_error$prime = error;
                return;
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_goods, $copy_error$prime);
            };
            return $tco_result;
        };
    };
    var candidates = map(function (x) {
        return Data_Complex.pow(z0)(x);
    })(map(Data_Int.toNumber)(indices));
    return f(candidates)(1.0);
};
var leadable = function (dictEq) {
    var dominantMonom2 = dominantMonom(dictEq);
    return function (dictSemiring) {
        var dominantMonom3 = dominantMonom2(dictSemiring);
        return {
            leader: function (p) {
                var v = dominantMonom3(p);
                return monoPol(v.value1)(v.value0);
            },
            Semiring0: function () {
                return dictSemiring;
            }
        };
    };
};
var leadablePolynomial = function (dictEq) {
    var dominantMonom2 = dominantMonom(eqPolynomial(dictEq));
    var semiringPolynomial1 = semiringPolynomial(dictEq);
    return function (dictLeadable) {
        var semiringPolynomial2 = semiringPolynomial1(dictLeadable.Semiring0());
        var dominantMonom3 = dominantMonom2(semiringPolynomial2);
        var leader1 = leader(dictLeadable);
        return function (dictSemiring) {
            return {
                leader: function (p) {
                    var v = dominantMonom3(p);
                    return monoPol(leader1(v.value1))(v.value0);
                },
                Semiring0: function () {
                    return semiringPolynomial2;
                }
            };
        };
    };
};
var divisors = function (dictSemiring) {
    return function (dictEuclideanRing) {
        var Ring0 = (dictEuclideanRing.CommutativeRing0()).Ring0();
        var Semiring0 = Ring0.Semiring0();
        var power = Data_Monoid.power(Data_Monoid_Multiplicative.monoidMultiplicative(Semiring0));
        var product2 = product(Semiring0);
        var negate1 = Data_Ring.negate(Ring0);
        return function (dictEq) {
            return function (dictOrd) {
                var primeFactorization1 = primeFactorization(dictOrd)(dictEq)(Semiring0)(dictEuclideanRing)(Data_Semiring.semiringInt);
                return function (n) {
                    var power$prime = function (m) {
                        return function (i) {
                            var v = power(m)(i);
                            return v;
                        };
                    };
                    var pos = map(product2)(sequence(map(function (v) {
                        return map(power$prime(v.value0))(Data_Array.range(0)(v.value1));
                    })(primeFactorization1(n))));
                    return append(pos)(map(negate1)(pos));
                };
            };
        };
    };
};
var divides = function (dict) {
    return dict.divides;
};
var divisiblePolynomial = function (dictSemiring) {
    var zero = Data_Semiring.zero(dictSemiring);
    return function (dictDivisible) {
        var divides1 = divides(dictDivisible);
        return {
            divides: function (v) {
                return function (v1) {
                    var dummy = {
                        key: -1 | 0,
                        value: zero
                    };
                    var v2 = Data_Maybe.fromMaybe(dummy)(Data_Map_Internal.findMax(v));
                    var v3 = Data_Maybe.fromMaybe(dummy)(Data_Map_Internal.findMax(v1));
                    var $1015 = v2.key > v3.key;
                    if ($1015) {
                        return Data_Maybe.Nothing.value;
                    };
                    return bind(divides1(v2.value)(v3.value))(function (q) {
                        return new Data_Maybe.Just(monoPol(q)(v3.key - v2.key | 0));
                    });
                };
            }
        };
    };
};
var division = function (dictRing) {
    return function (dictEq) {
        var eq1 = Data_Eq.eq(eqPolynomial(dictEq));
        var semiringPolynomial1 = semiringPolynomial(dictEq);
        var sub3 = Data_Ring.sub(ringPolynomial(dictEq)(dictRing));
        return function (dictDivisible) {
            return function (dictLeadable) {
                var leader1 = leader(dictLeadable);
                var Semiring0 = dictLeadable.Semiring0();
                var semiringPolynomial2 = semiringPolynomial1(Semiring0);
                var zero = Data_Semiring.zero(semiringPolynomial2);
                var divides1 = divides(divisiblePolynomial(Semiring0)(dictDivisible));
                var mul2 = Data_Semiring.mul(semiringPolynomial2);
                var add1 = Data_Semiring.add(semiringPolynomial2);
                return function (num) {
                    return function (den) {
                        var ld = leader1(den);
                        var loop = function ($copy_n) {
                            return function ($copy_q) {
                                return function ($copy_r) {
                                    var $tco_var_n = $copy_n;
                                    var $tco_var_q = $copy_q;
                                    var $tco_done = false;
                                    var $tco_result;
                                    function $tco_loop(n, q, r) {
                                        var $1020 = eq1(n)(zero);
                                        if ($1020) {
                                            $tco_done = true;
                                            return {
                                                div: q,
                                                mod: r
                                            };
                                        };
                                        var ln = leader1(n);
                                        var v = divides1(ld)(ln);
                                        if (v instanceof Data_Maybe.Just) {
                                            $tco_var_n = sub3(n)(mul2(v.value0)(den));
                                            $tco_var_q = add1(q)(v.value0);
                                            $copy_r = r;
                                            return;
                                        };
                                        $tco_var_n = sub3(n)(ln);
                                        $tco_var_q = q;
                                        $copy_r = add1(r)(ln);
                                        return;
                                    };
                                    while (!$tco_done) {
                                        $tco_result = $tco_loop($tco_var_n, $tco_var_q, $copy_r);
                                    };
                                    return $tco_result;
                                };
                            };
                        };
                        return loop(num)(zero)(zero);
                    };
                };
            };
        };
    };
};
var display = function (dict) {
    return dict.display;
};
var derivative = function (dictEq) {
    var eq1 = Data_Eq.eq(dictEq);
    return function (dictSemiring) {
        var zero = Data_Semiring.zero(dictSemiring);
        var mul2 = Data_Semiring.mul(dictSemiring);
        return function (fromInt1) {
            return function (v) {
                var deriveMonom = function (v1) {
                    return function (v2) {
                        if (v1 === 0) {
                            return Data_Maybe.Nothing.value;
                        };
                        if (eq1(v2)(zero)) {
                            return Data_Maybe.Nothing.value;
                        };
                        return new Data_Maybe.Just(new Data_Tuple.Tuple(v1 - 1 | 0, mul2(v2)(fromInt1(v1))));
                    };
                };
                return fromFoldable(Data_Array.catMaybes(map(Data_Tuple.uncurry(deriveMonom))(toUnfoldable(v))));
            };
        };
    };
};
var diff = function (dictEq) {
    var derivative1 = derivative(dictEq);
    return function (dictOrd) {
        return function (dictSemiring) {
            return function (dictEuclideanRing) {
                var derivative2 = derivative1(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0());
                return function (dictIntLiftable) {
                    return derivative2(fromInt(dictIntLiftable));
                };
            };
        };
    };
};
var degreeAccordingToFirstVariable = function (dictEq) {
    var dominantMonom2 = dominantMonom(dictEq);
    return function (dictSemiring) {
        var dominantMonom3 = dominantMonom2(dictSemiring);
        return function (p) {
            var $1029 = dominantMonom3(p);
            return $1029.value0;
        };
    };
};
var euclideanRingPoly = function (dictEq) {
    var degreeAccordingToFirstVariable1 = degreeAccordingToFirstVariable(dictEq);
    var commutativeRingPolynomial1 = commutativeRingPolynomial(dictEq);
    return function (dictDivisible) {
        return function (dictRing) {
            return function (dictLeadable) {
                return function (dictCommutativeRing) {
                    var Ring0 = dictCommutativeRing.Ring0();
                    var division1 = division(Ring0)(dictEq)(dictDivisible)(dictLeadable);
                    var commutativeRingPolynomial2 = commutativeRingPolynomial1(Ring0);
                    return {
                        degree: degreeAccordingToFirstVariable1(Ring0.Semiring0()),
                        div: function (p) {
                            return function (q) {
                                return (division1(p)(q)).div;
                            };
                        },
                        mod: function (p) {
                            return function (q) {
                                return (division1(p)(q)).mod;
                            };
                        },
                        CommutativeRing0: function () {
                            return commutativeRingPolynomial2;
                        }
                    };
                };
            };
        };
    };
};
var eisenstein = function (dictEq) {
    var euclideanRingPoly1 = euclideanRingPoly(dictEq);
    var eq1 = Data_Eq.eq(dictEq);
    var notEq1 = Data_Eq.notEq(dictEq);
    return function (dictDivisible) {
        var euclideanRingPoly2 = euclideanRingPoly1(dictDivisible);
        return function (dictLeadable) {
            return function (dictCommutativeRing) {
                var Ring0 = dictCommutativeRing.Ring0();
                var degree = Data_EuclideanRing.degree(euclideanRingPoly2(Ring0)(dictLeadable)(dictCommutativeRing));
                var Semiring0 = Ring0.Semiring0();
                var query1 = query(Semiring0);
                var zero = Data_Semiring.zero(Semiring0);
                var mul2 = Data_Semiring.mul(Semiring0);
                return function (dictEuclideanRing) {
                    var mod1 = Data_EuclideanRing.mod(dictEuclideanRing);
                    return function (f) {
                        return function (p) {
                            var n = degree(f);
                            var ds = Data_Array.all(function (i) {
                                return eq1(mod1(query1(f)(i))(p))(zero);
                            })(Data_Array.range(0)(n - 1 | 0));
                            return notEq1(mod1(query1(f)(n))(p))(zero) && (ds && notEq1(mod1(query1(f)(0))(mul2(p)(p)))(zero));
                        };
                    };
                };
            };
        };
    };
};
var factorOnZ = function (dictOrd) {
    var abs = Data_Ord.abs(dictOrd);
    var Eq0 = dictOrd.Eq0();
    var lookup2 = lookup1(Eq0);
    var ringPolynomial1 = ringPolynomial(Eq0);
    var reduce = Data_Ratio.reduce(dictOrd);
    var interpolate1 = interpolate(Eq0);
    var eqRatio = Data_Ratio.eqRatio(Eq0);
    var eq1 = Data_Eq.eq(eqPolynomial(eqRatio));
    var euclideanRingPoly1 = euclideanRingPoly(eqRatio);
    var euclideanRingRatio = Data_Ratio.euclideanRingRatio(dictOrd);
    var ringRatio = Data_Ratio.ringRatio(dictOrd);
    var leadable1 = leadable(eqRatio);
    var semiringRatio = Data_Ratio.semiringRatio(dictOrd);
    var commutativeRingRatio = Data_Ratio.commutativeRingRatio(dictOrd);
    var semiringPolynomial1 = semiringPolynomial(eqRatio);
    var euclideanRingPoly2 = euclideanRingPoly(Eq0);
    return function (dictRing) {
        return function (dictEuclideanRing) {
            var CommutativeRing0 = dictEuclideanRing.CommutativeRing0();
            var Ring0 = CommutativeRing0.Ring0();
            var Semiring0 = Ring0.Semiring0();
            var add1 = Data_Semiring.add(Semiring0);
            var one1 = Data_Semiring.one(Semiring0);
            var sub3 = Data_Ring.sub(Ring0);
            var zero = Data_Semiring.zero(Semiring0);
            var abs1 = abs(Ring0);
            var evaluate2 = evaluate(Semiring0);
            var sub4 = Data_Ring.sub(ringPolynomial1(Ring0));
            var reduce1 = reduce(dictEuclideanRing);
            var interpolate2 = interpolate1(Semiring0)(dictEuclideanRing);
            var divisors1 = divisors(Semiring0)(dictEuclideanRing)(Eq0)(dictOrd);
            var semiringRatio1 = semiringRatio(dictEuclideanRing);
            var mod1 = Data_EuclideanRing.mod(euclideanRingPoly1(divisible(euclideanRingRatio(dictEuclideanRing)))(ringRatio(dictEuclideanRing))(leadable1(semiringRatio1))(commutativeRingRatio(dictEuclideanRing)));
            var zero1 = Data_Semiring.zero(semiringPolynomial1(semiringRatio1));
            return function (dictDivisible) {
                var euclideanRingPoly3 = euclideanRingPoly2(dictDivisible)(Ring0);
                return function (dictIntLiftable) {
                    var fromInt1 = fromInt(dictIntLiftable);
                    return function (dictLeadable) {
                        var degree = Data_EuclideanRing.degree(euclideanRingPoly3(dictLeadable)(CommutativeRing0));
                        return function (pol) {
                            var search = function (d) {
                                var sample = Data_Array.scanl(function (acc) {
                                    return function (v) {
                                        return add1(acc)(one1);
                                    };
                                })(sub3(zero)(fromInt1(div(d)(2))))(Data_Array.range(0)(d));
                                var probe = map(function ($1082) {
                                    return abs1((function (v) {
                                        return evaluate2(pol)(v);
                                    })($1082));
                                })(sample);
                                var v = lookup2(zero)(Data_Array.zip(probe)(sample));
                                if (v instanceof Data_Maybe.Just) {
                                    return [ sub4(monoPol(one1)(1))(monoPol(v.value0)(0)) ];
                                };
                                var fr = function (v1) {
                                    return reduce1(v1)(one1);
                                };
                                var candidates = map(interpolate2)(map(Data_Array.zip(sample))(sequence(map(divisors1)(probe))));
                                return Data_Array.filter(function (candidate) {
                                    return eq1(mod1(map3(fr)(pol))(map3(fr)(candidate)))(zero1);
                                })(candidates);
                            };
                            var n = degree(pol);
                            return Data_Array.filter(function ($1083) {
                                return (function (v) {
                                    return v !== 0;
                                })(degree($1083));
                            })(foldr(append)([  ])(map(search)(Data_Array.range(1)(div(n)(2)))));
                        };
                    };
                };
            };
        };
    };
};
var factor = function (dictEq) {
    var eqRatio = Data_Ratio.eqRatio(dictEq);
    var eq1 = Data_Eq.eq(eqPolynomial(eqRatio));
    var semiringPolynomial1 = semiringPolynomial(eqRatio);
    var diff1 = diff(eqRatio);
    var lcm = Data_EuclideanRing.lcm(dictEq);
    return function (dictOrd) {
        var semiringRatio = Data_Ratio.semiringRatio(dictOrd);
        var ordRatio = Data_Ratio.ordRatio(dictOrd);
        var euclideanRingRatio = Data_Ratio.euclideanRingRatio(dictOrd);
        var ratioIntLiftable1 = ratioIntLiftable(dictOrd);
        var reduce = Data_Ratio.reduce(dictOrd);
        var factorOnZ1 = factorOnZ(dictOrd);
        return function (dictEuclideanRing) {
            var semiringRatio1 = semiringRatio(dictEuclideanRing);
            var semiringPolynomial2 = semiringPolynomial1(semiringRatio1);
            var zero = Data_Semiring.zero(semiringPolynomial2);
            var mul2 = Data_Semiring.mul(semiringPolynomial2);
            var diff2 = diff1(ordRatio(dictEuclideanRing))(semiringRatio1)(euclideanRingRatio(dictEuclideanRing));
            var mul3 = Data_Semiring.mul(semiringRatio1);
            var reduce1 = reduce(dictEuclideanRing);
            var Ring0 = (dictEuclideanRing.CommutativeRing0()).Ring0();
            var Semiring0 = Ring0.Semiring0();
            var one1 = Data_Semiring.one(Semiring0);
            var one2 = Data_Semiring.one(semiringPolynomial2);
            var add1 = Data_Semiring.add(Semiring0);
            var lcm1 = lcm(dictEuclideanRing);
            var evaluate2 = evaluate(semiringRatio1);
            var zero1 = Data_Semiring.zero(semiringRatio1);
            var factorOnZ2 = factorOnZ1(Ring0)(dictEuclideanRing);
            return function (dictIntLiftable) {
                var diff3 = diff2(ratioIntLiftable1(dictIntLiftable)(dictEuclideanRing));
                return function (dictDivisible) {
                    var factorOnZ3 = factorOnZ2(dictDivisible)(dictIntLiftable);
                    return function (dictLeadable) {
                        var factorOnZ4 = factorOnZ3(dictLeadable);
                        return function (pol) {
                            var zfier = function ($copy_q_) {
                                return function ($copy_n_) {
                                    return function ($copy_l_) {
                                        var $tco_var_q_ = $copy_q_;
                                        var $tco_var_n_ = $copy_n_;
                                        var $tco_done = false;
                                        var $tco_result;
                                        function $tco_loop(q_, n_, l_) {
                                            if (eq1(q_)(zero)) {
                                                $tco_done = true;
                                                return l_;
                                            };
                                            if (Data_Boolean.otherwise) {
                                                var q = mul2(diff3(q_))(map3(function (v) {
                                                    return mul3(reduce1(one1)(n_))(v);
                                                })(one2));
                                                var n = add1(n_)(one1);
                                                var l = lcm1(Data_Ratio.denominator(evaluate2(q_)(zero1)))(l_);
                                                $tco_var_q_ = q;
                                                $tco_var_n_ = n;
                                                $copy_l_ = l;
                                                return;
                                            };
                                            throw new Error("Failed pattern match at Data.Sparse.Polynomial (line 1708, column 7 - line 1714, column 27): " + [ q_.constructor.name, n_.constructor.name, l_.constructor.name ]);
                                        };
                                        while (!$tco_done) {
                                            $tco_result = $tco_loop($tco_var_q_, $tco_var_n_, $copy_l_);
                                        };
                                        return $tco_result;
                                    };
                                };
                            };
                            var d = zfier(pol)(one1)(one1);
                            return map(function (v) {
                                return map3(function (v1) {
                                    return reduce1(v1)(one1);
                                })(v);
                            })(factorOnZ4(map3(Data_Ratio.numerator)(map3(function (v) {
                                return mul3(reduce1(d)(one1))(v);
                            })(pol))));
                        };
                    };
                };
            };
        };
    };
};
var gcd = function (dictOrd) {
    var Eq0 = dictOrd.Eq0();
    var dominantMonom2 = dominantMonom(Eq0);
    var euclideanRingPoly1 = euclideanRingPoly(Eq0);
    var semiringPolynomial1 = semiringPolynomial(Eq0);
    var eq1 = Data_Eq.eq(eqPolynomial(Eq0));
    var ordPoly1 = ordPoly(dictOrd)(Eq0);
    return function (dictDivisible) {
        var euclideanRingPoly2 = euclideanRingPoly1(dictDivisible);
        return function (dictCommutativeRing) {
            var Ring0 = dictCommutativeRing.Ring0();
            var Semiring0 = Ring0.Semiring0();
            var dominantMonom3 = dominantMonom2(Semiring0);
            var euclideanRingPoly3 = euclideanRingPoly2(Ring0);
            var semiringPolynomial2 = semiringPolynomial1(Semiring0);
            var mul2 = Data_Semiring.mul(semiringPolynomial2);
            var pow1 = pow(semiringPolynomial2);
            var zero = Data_Semiring.zero(semiringPolynomial2);
            var greaterThan1 = Data_Ord.greaterThan(ordPoly1(dictCommutativeRing));
            var one1 = Data_Semiring.one(semiringPolynomial2);
            return function (dictLeadable) {
                var euclideanRingPoly4 = euclideanRingPoly3(dictLeadable)(dictCommutativeRing);
                var mod1 = Data_EuclideanRing.mod(euclideanRingPoly4);
                var degree = Data_EuclideanRing.degree(euclideanRingPoly4);
                return function (dictPrimitivable) {
                    var primitivePart1 = primitivePart(dictPrimitivable);
                    var globalFactor1 = globalFactor(dictPrimitivable);
                    return function (pa$prime) {
                        return function (pb$prime) {
                            var pb = primitivePart1(pb$prime);
                            var pa = primitivePart1(pa$prime);
                            var highestCoefficient = function (p) {
                                var $1038 = dominantMonom3(p);
                                return monoPol($1038.value1)(0);
                            };
                            var rprs = function (p1) {
                                return function (p2) {
                                    var p3 = mod1(mul2(p1)(pow1(highestCoefficient(p2))((degree(p1) - degree(p2) | 0) + 1 | 0)))(p2);
                                    var $1041 = eq1(p3)(zero);
                                    if ($1041) {
                                        return [  ];
                                    };
                                    return Data_Array.cons(p3)(rprs(p2)(p3));
                                };
                            };
                            var arr = (function () {
                                var $1042 = greaterThan1(pa$prime)(pb$prime);
                                if ($1042) {
                                    return Data_Array.reverse(Data_Array.cons(pb)(rprs(pa)(pb)));
                                };
                                return Data_Array.reverse(Data_Array.cons(pa)(rprs(pb)(pa)));
                            })();
                            var lastNotNull = Data_Maybe.fromMaybe(one1)(Data_Array.head(arr));
                            return mul2(globalFactor1(pa$prime)(pb$prime))(primitivePart1(lastNotNull));
                        };
                    };
                };
            };
        };
    };
};
var gcds = function (dictOrd) {
    var gcd1 = gcd(dictOrd);
    var semiringPolynomial1 = semiringPolynomial(dictOrd.Eq0());
    return function (dictDivisible) {
        var gcd2 = gcd1(dictDivisible);
        return function (dictLeadable) {
            return function (dictEuclideanRing) {
                var CommutativeRing0 = dictEuclideanRing.CommutativeRing0();
                var gcd3 = gcd2(CommutativeRing0)(dictLeadable);
                var one1 = Data_Semiring.one(semiringPolynomial1((CommutativeRing0.Ring0()).Semiring0()));
                return function (dictPrimitivable) {
                    var gcd4 = gcd3(dictPrimitivable);
                    return function (arr) {
                        var v = Data_Array.uncons(arr);
                        if (v instanceof Data_Maybe.Just) {
                            var v1 = Data_Array.uncons(v.value0.tail);
                            if (v1 instanceof Data_Maybe.Just) {
                                return gcd4(v.value0.head)(gcds(dictOrd)(dictDivisible)(dictLeadable)(dictEuclideanRing)(dictPrimitivable)(v.value0.tail));
                            };
                            return v.value0.head;
                        };
                        if (v instanceof Data_Maybe.Nothing) {
                            return one1;
                        };
                        throw new Error("Failed pattern match at Data.Sparse.Polynomial (line 1072, column 3 - line 1077, column 22): " + [ v.constructor.name ]);
                    };
                };
            };
        };
    };
};
var deep = function (dictFunctor) {
    var map4 = Data_Functor.map(dictFunctor);
    return function (dictSemiring) {
        var query1 = query(dictSemiring);
        return function (f) {
            return function ($1084) {
                return map4(f((function (v) {
                    return query1(v)(0);
                })($1084)));
            };
        };
    };
};
var deep1 = /* #__PURE__ */ deep(functorPolynomial);
var fillValidPolynomial = function (dictFillValid) {
    var fillValid1 = fillValid(dictFillValid);
    return function (dictEq) {
        var semiringPolynomial1 = semiringPolynomial(dictEq);
        return function (dictSemiring) {
            var deep2 = deep1(semiringPolynomial1(dictSemiring));
            return function () {
                return {
                    fillValid: function (v) {
                        return deep2(fillValid1(Type_Proxy["Proxy"].value));
                    }
                };
            };
        };
    };
};
var cont = function (dictOrd) {
    var gcds1 = gcds(dictOrd);
    return function (dictEuclideanRing) {
        return function (dictDivisible) {
            var gcds2 = gcds1(dictDivisible);
            return function (dictLeadable) {
                var gcds3 = gcds2(dictLeadable)(dictEuclideanRing);
                return function (dictPrimitivable) {
                    var gcds4 = gcds3(dictPrimitivable);
                    return function (p) {
                        return gcds4(map(Data_Tuple.snd)(monoms(p)));
                    };
                };
            };
        };
    };
};
var primitivablePolynomial = function (dictOrd) {
    var Eq0 = dictOrd.Eq0();
    var euclideanRingPoly1 = euclideanRingPoly(eqPolynomial(Eq0));
    var ringPolynomial1 = ringPolynomial(Eq0);
    var leadablePolynomial1 = leadablePolynomial(Eq0);
    var commutativeRingPolynomial1 = commutativeRingPolynomial(Eq0);
    var cont1 = cont(dictOrd);
    var gcd1 = gcd(dictOrd);
    return function (dictDivisible) {
        var gcd2 = gcd1(dictDivisible);
        return function (dictLeadable) {
            var leadablePolynomial2 = leadablePolynomial1(dictLeadable);
            return function (dictCommutativeRing) {
                var Ring0 = dictCommutativeRing.Ring0();
                var Semiring0 = Ring0.Semiring0();
                var div2 = Data_EuclideanRing.div(euclideanRingPoly1(divisiblePolynomial(Semiring0)(dictDivisible))(ringPolynomial1(Ring0))(leadablePolynomial2(Semiring0))(commutativeRingPolynomial1(Ring0)));
                var gcd3 = gcd2(dictCommutativeRing)(dictLeadable);
                return function (dictEuclideanRing) {
                    var cont2 = cont1(dictEuclideanRing)(dictDivisible)(dictLeadable);
                    return function (dictPrimitivable) {
                        var cont3 = cont2(dictPrimitivable);
                        var gcd4 = gcd3(dictPrimitivable);
                        return {
                            primitivePart: function (p) {
                                return div2(p)(monoPol(cont3(p))(0));
                            },
                            globalFactor: function (f) {
                                return function (g) {
                                    return monoPol(gcd4(cont3(f))(cont3(g)))(0);
                                };
                            }
                        };
                    };
                };
            };
        };
    };
};
var complexIntLiftable = function (dictSemiring) {
    return function (dictRing) {
        var mul2 = Data_Semiring.mul(dictRing.Semiring0());
        var one1 = Data_Semiring.one(Data_Complex.semiringCartesian(dictRing));
        return function (dictIntLiftable) {
            var fromInt1 = fromInt(dictIntLiftable);
            return {
                fromInt: function (n) {
                    return map1(function (v) {
                        return mul2(v)(fromInt1(n));
                    })(one1);
                }
            };
        };
    };
};
var bezout = function (dictEq) {
    var eq1 = Data_Eq.eq(eqPolynomial(dictEq));
    var semiringPolynomial1 = semiringPolynomial(dictEq);
    var euclideanRingPoly1 = euclideanRingPoly(dictEq);
    var ringPolynomial1 = ringPolynomial(dictEq);
    return function (dictOrd) {
        var ordPoly1 = ordPoly(dictOrd)(dictEq);
        return function (dictCommutativeRing) {
            var Ring0 = dictCommutativeRing.Ring0();
            var semiringPolynomial2 = semiringPolynomial1(Ring0.Semiring0());
            var zero = Data_Semiring.zero(semiringPolynomial2);
            var sub3 = Data_Ring.sub(ringPolynomial1(Ring0));
            var mul2 = Data_Semiring.mul(semiringPolynomial2);
            var one1 = Data_Semiring.one(semiringPolynomial2);
            var lessThan1 = Data_Ord.lessThan(ordPoly1(dictCommutativeRing));
            return function (dictDivisible) {
                var euclideanRingPoly2 = euclideanRingPoly1(dictDivisible)(Ring0);
                return function (dictLeadable) {
                    var div2 = Data_EuclideanRing.div(euclideanRingPoly2(dictLeadable)(dictCommutativeRing));
                    return function (dictUnivariate) {
                        var isMultivariate1 = isMultivariate(dictUnivariate);
                        return function (p1) {
                            return function (p2) {
                                var f = function ($copy_v) {
                                    var $tco_done = false;
                                    var $tco_result;
                                    function $tco_loop(v) {
                                        var $1050 = eq1(v.r)(zero);
                                        if ($1050) {
                                            $tco_done = true;
                                            return new Data_Maybe.Just({
                                                u: v.u_,
                                                v: v.v_
                                            });
                                        };
                                        var q = div2(v.r_)(v.r);
                                        var r = sub3(v.r_)(mul2(q)(v.r));
                                        var u = sub3(v.u_)(mul2(q)(v.u));
                                        var v1 = sub3(v.v_)(mul2(q)(v.v));
                                        $copy_v = {
                                            r_: v.r,
                                            r: r,
                                            u_: v.u,
                                            u: u,
                                            v_: v.v,
                                            v: v1
                                        };
                                        return;
                                    };
                                    while (!$tco_done) {
                                        $tco_result = $tco_loop($copy_v);
                                    };
                                    return $tco_result;
                                };
                                var res = f({
                                    r_: p1,
                                    r: p2,
                                    u_: one1,
                                    v_: zero,
                                    u: zero,
                                    v: one1
                                });
                                var $1057 = isMultivariate1(p1) || isMultivariate1(p2);
                                if ($1057) {
                                    return Data_Maybe.Nothing.value;
                                };
                                var $1058 = lessThan1(p1)(p2);
                                if ($1058) {
                                    return bind(bezout(dictEq)(dictOrd)(dictCommutativeRing)(dictDivisible)(dictLeadable)(dictUnivariate)(p2)(p1))(function (v) {
                                        return new Data_Maybe.Just({
                                            u: v.v,
                                            v: v.u
                                        });
                                    });
                                };
                                return res;
                            };
                        };
                    };
                };
            };
        };
    };
};
var axes = function (dict) {
    return dict.axes;
};
var axedPolynomial = function (dictAxed) {
    var axes1 = axes(dictAxed);
    return function (dictSemiring) {
        var query1 = query(dictSemiring);
        return function (dictPeel) {
            var peel2 = peel(dictPeel);
            return {
                axes: function (arg) {
                    var v = axes1(query1(arg)(0));
                    var a = v.value0(peel2(arg));
                    return new Data_Tuple.Tuple(function ($1085) {
                        return (function (v1) {
                            return monoPol(v1)(0);
                        })(v.value0($1085));
                    }, Data_Array.cons(monoPol(a)(1))(map(function (v1) {
                        return monoPol(v1)(0);
                    })(v.value1)));
                }
            };
        };
    };
};
var arity$prime = function (dict) {
    return dict["arity'"];
};
var full = function (dictFull) {
    var fullImpl1 = fullImpl(dictFull);
    return function () {
        return function (dictArity) {
            var arity$prime1 = arity$prime(dictArity);
            return function (arr) {
                return function (p) {
                    return foldr(identity)(p)(Data_Array.zipWith(Data_Function.apply)(fullImpl1(prevAxis1(arity$prime1(p))))(arr));
                };
            };
        };
    };
};
var arity = function (dict) {
    return dict.arity;
};
var displayPolynomial = function (dictDisplay) {
    var arity1 = arity(dictDisplay);
    var display2 = display(dictDisplay);
    return function (dictOrd) {
        var lessThan1 = Data_Ord.lessThan(dictOrd);
        return function (dictSemiring) {
            var zero = Data_Semiring.zero(dictSemiring);
            return {
                arity: function (p) {
                    return 1 + Data_Maybe.fromMaybe(0)(maximum1(map(function ($1086) {
                        return arity1(Data_Tuple.snd($1086));
                    })(monoms(p)))) | 0;
                },
                display: function (arr) {
                    return function (p) {
                        var v = Data_Array.uncons(arr);
                        if (v instanceof Data_Maybe.Nothing) {
                            return "";
                        };
                        if (v instanceof Data_Maybe.Just) {
                            return Data_String_Common.joinWith("+")(map(function (v1) {
                                var parens = function (x) {
                                    return "(" + (x + ")");
                                };
                                var coef = display2(v.value0.tail)(v1.value1);
                                var next = (function () {
                                    if (v1.value0 === 0) {
                                        var $1070 = lessThan1(v1.value1)(zero);
                                        if ($1070) {
                                            return parens(coef);
                                        };
                                        return coef;
                                    };
                                    if (v1.value0 === 1) {
                                        return parens(coef) + ("\xd7" + v.value0.head);
                                    };
                                    if (Data_Boolean.otherwise) {
                                        return parens(coef) + ("\xd7" + (v.value0.head + ("^" + show(v1.value0))));
                                    };
                                    throw new Error("Failed pattern match at Data.Sparse.Polynomial (line 1494, column 15 - line 1497, column 76): " + [  ]);
                                })();
                                return next;
                            })(sortedMonoms(p)));
                        };
                        throw new Error("Failed pattern match at Data.Sparse.Polynomial (line 1487, column 5 - line 1499, column 33): " + [ v.constructor.name ]);
                    };
                }
            };
        };
    };
};
var showPolynomial = function (dictDisplay) {
    var displayPolynomial1 = displayPolynomial(dictDisplay);
    return function (dictOrd) {
        var displayPolynomial2 = displayPolynomial1(dictOrd);
        return function (dictSemiring) {
            var displayPolynomial3 = displayPolynomial2(dictSemiring);
            var display2 = display(displayPolynomial3);
            var arity1 = arity(displayPolynomial3);
            return {
                show: function (x) {
                    return Data_Function.flip(display2)(x)((function () {
                        var v = arity1(x);
                        if (v === 0) {
                            return [ "" ];
                        };
                        if (v === 1) {
                            return [ "x" ];
                        };
                        if (v === 2) {
                            return [ "x", "y" ];
                        };
                        if (v === 3) {
                            return [ "x", "y", "z" ];
                        };
                        if (v === 4) {
                            return [ "x", "y", "z", "t" ];
                        };
                        return map(function ($1087) {
                            return (function (v1) {
                                return "x" + v1;
                            })(show($1087));
                        })(Data_Array.range(0)(v - 1 | 0));
                    })());
                }
            };
        };
    };
};
export {
    Poly,
    arity,
    arity$prime,
    axes,
    bezout,
    cont,
    deep,
    degreeAccordingToFirstVariable,
    derivative,
    diff,
    display,
    divides,
    division,
    divisors,
    dominantMonom,
    down,
    eisenstein,
    evaluate,
    factor,
    factorOnZ,
    fill,
    fillValid,
    flipXpand,
    fromInt,
    full,
    fullImpl,
    gcd,
    gcds,
    globalFactor,
    goSwap,
    interpolate,
    isMultivariate,
    isPrime,
    leader,
    liftC,
    monoPol,
    monoms,
    nest,
    nextAxis,
    nextPrime,
    pad,
    peel,
    pow,
    prevAxis,
    primeFactor,
    primeFactorization,
    primitivePart,
    query,
    roots,
    set,
    sortedMonoms,
    swap,
    swapAdjacent,
    swapInOrder,
    swapSort,
    unity,
    unpad,
    xchng,
    xpand,
    xpose,
    xtend,
    nextAxis1,
    pad0Polynomial,
    padPolynomial,
    unpad$minus1,
    unpadPolynomial,
    semigroupPolynomial,
    monoidPolynomial,
    set0,
    setPolynomial,
    fillValid0,
    fillValidPolynomial,
    full0,
    full1,
    eqPolynomial,
    functorPolynomial,
    semiringPolynomial,
    ringPolynomial,
    commutativeRingPolynomial,
    leadablePolynomial,
    leadable,
    divisiblePolynomial,
    divisible,
    euclideanRingPoly,
    primitivablePolynomial,
    primitivable,
    ordPoly,
    univariatePolynomialPolyn,
    univariate,
    arityPolynomialPolynomial,
    arityPolynomial1,
    arity0,
    peelPolynomial,
    peel1,
    axedPolynomial,
    axed,
    nest0,
    nestPolynomial,
    swapAdjacent0,
    swapAdjacentPolynomial,
    swap1,
    swapSortLT,
    swapSortGT,
    swapSortEQ,
    swapInOrder1,
    goSwap0,
    goSwap1,
    goSwap2,
    displayPolynomial,
    display1,
    showPolynomial,
    intIntLiftable,
    numberIntLiftable,
    integerLiftable,
    complexIntLiftable,
    ratioIntLiftable,
    intLiftablePolynomial
};
