// Generated by purs version 0.15.9
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_EuclideanRing from "../Data.EuclideanRing/index.js";
import * as Data_FastVect_Common from "../Data.FastVect.Common/index.js";
import * as Data_Filterable from "../Data.Filterable/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_FunctorWithIndex from "../Data.FunctorWithIndex/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Profunctor_Strong from "../Data.Profunctor.Strong/index.js";
import * as Data_Semiring from "../Data.Semiring/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var showMap = /* #__PURE__ */ Data_Map_Internal.showMap(Data_Show.showInt);
var ordMap = /* #__PURE__ */ Data_Map_Internal.ordMap(Data_Ord.ordInt);
var eqMap = /* #__PURE__ */ Data_Map_Internal.eqMap(Data_Eq.eqInt);
var fromFoldable = /* #__PURE__ */ Data_Map_Internal.fromFoldable(Data_Ord.ordInt)(Data_Foldable.foldableArray);
var toUnfoldableUnordered = /* #__PURE__ */ Data_Map_Internal.toUnfoldableUnordered(Data_Unfoldable.unfoldableArray);
var insert = /* #__PURE__ */ Data_Map_Internal.insert(Data_Ord.ordInt);
var alter = /* #__PURE__ */ Data_Map_Internal.alter(Data_Ord.ordInt);
var unfoldr = /* #__PURE__ */ Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray);
var add = /* #__PURE__ */ Data_Semiring.add(Data_Semiring.semiringInt);
var update = /* #__PURE__ */ Data_Map_Internal.update(Data_Ord.ordInt);
var lookup = /* #__PURE__ */ Data_Map_Internal.lookup(Data_Ord.ordInt);
var mod = /* #__PURE__ */ Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var filterMap = /* #__PURE__ */ Data_Filterable.filterMap(Data_Filterable.filterableArray);
var first = /* #__PURE__ */ Data_Profunctor_Strong.first(Data_Profunctor_Strong.strongFn);
var union = /* #__PURE__ */ Data_Map_Internal.union(Data_Ord.ordInt);
var Vect = function (x) {
    return x;
};
var traversableWithIndexIntVe = Data_Map_Internal.traversableWithIndexMap;
var traversableVect = Data_Map_Internal.traversableMap;
var showVect = function (dictShow) {
    var show1 = Data_Show.show(showMap(dictShow));
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return {
            show: function (v) {
                return "Vect.Sparse.Read " + (show(toInt(Data_FastVect_Common.term)) + (" " + show1(v)));
            }
        };
    };
};
var ordVect = function (dictOrd) {
    return ordMap(dictOrd);
};
var isVectVect = {
    TraversableWithIndex0: function () {
        return traversableWithIndexIntVe;
    }
};
var functorWithIndexIntVect = Data_Map_Internal.functorWithIndexMap;
var mapWithIndex = /* #__PURE__ */ Data_FunctorWithIndex.mapWithIndex(functorWithIndexIntVect);
var functorVect = Data_Map_Internal.functorMap;
var foldableWithIndexIntVect = Data_Map_Internal.foldableWithIndexMap;
var foldableVect = Data_Map_Internal.foldableMap;
var eqVect = function (dictEq) {
    return eqMap(dictEq);
};
var applyVect = /* #__PURE__ */ Data_Map_Internal.applyMap(Data_Ord.ordInt);
var unsafeCoerceTerm = function (v) {
    return function (f) {
        var f1 = f()();
        return function (i) {
            return (function () {
                return function () {
                    return function (dictReflectable) {
                        return f1(dictReflectable);
                    };
                };
            })(Data_Unit.unit)(Data_Unit.unit)({
                reflectType: function (v1) {
                    return i;
                }
            })(Type_Proxy["Proxy"].value);
        };
    };
};
var toMap = function () {
    return function (v) {
        return v;
    };
};
var take = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function () {
            return function () {
                return function (proxy) {
                    return function (v) {
                        var takes = toInt(proxy);
                        return fromFoldable(Data_Array.filter(function ($156) {
                            return (function (v1) {
                                return v1 < takes;
                            })(Data_Tuple.fst($156));
                        })(toUnfoldableUnordered(v)));
                    };
                };
            };
        };
    };
};
var splitAt = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function () {
            return function () {
                return function (proxy) {
                    return function (v) {
                        var splits = toInt(proxy);
                        return (function (v1) {
                            return {
                                before: fromFoldable(v1.yes),
                                after: fromFoldable(v1.no)
                            };
                        })(Data_Array.partition(function ($157) {
                            return (function (v1) {
                                return v1 < splits;
                            })(Data_Tuple.fst($157));
                        })(toUnfoldableUnordered(v)));
                    };
                };
            };
        };
    };
};
var sparse = Data_Map_Internal.empty;
var snoc = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function () {
            return function (v) {
                return function (elem) {
                    return insert(toInt(Type_Proxy["Proxy"].value))(elem)(v);
                };
            };
        };
    };
};
var singleton = function (elem) {
    return Data_Map_Internal.singleton(0)(elem);
};
var set = function (dictReflectable) {
    var toInt = Data_FastVect_Common.toInt(dictReflectable);
    return function () {
        return function () {
            return function () {
                return function (proxy) {
                    return function (a) {
                        return function (v) {
                            return alter(Data_Function["const"](new Data_Maybe.Just(a)))(toInt(proxy))(v);
                        };
                    };
                };
            };
        };
    };
};
var replicate = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function (proxy) {
            return function (elem) {
                var terminus = toInt(proxy);
                return fromFoldable(unfoldr(function (v) {
                    var $129 = v.value0 === terminus;
                    if ($129) {
                        return Data_Maybe.Nothing.value;
                    };
                    return new Data_Maybe.Just(new Data_Tuple.Tuple(v, new Data_Tuple.Tuple(v.value0 + 1 | 0, v.value1)));
                })(new Data_Tuple.Tuple(0, elem)));
            };
        };
    };
};
var replicate1 = /* #__PURE__ */ replicate();
var applicativeVect = function () {
    return function (dictReflectable) {
        return {
            pure: replicate1(dictReflectable)(Type_Proxy["Proxy"].value),
            Apply0: function () {
                return applyVect;
            }
        };
    };
};
var modify = function (dictReflectable) {
    var toInt = Data_FastVect_Common.toInt(dictReflectable);
    return function () {
        return function () {
            return function () {
                return function (proxy) {
                    return function (f) {
                        return function (v) {
                            return update(function ($158) {
                                return Data_Maybe.Just.create(f($158));
                            })(toInt(proxy))(v);
                        };
                    };
                };
            };
        };
    };
};
var mapWithTerm = function (dictReflectable) {
    return function () {
        return function (f) {
            var f1 = f()();
            return function (xs) {
                return mapWithIndex(function (i) {
                    return function (elem) {
                        return unsafeCoerceTerm(Type_Proxy["Proxy"].value)(function () {
                            return function () {
                                return function (dictReflectable1) {
                                    return f1(dictReflectable1);
                                };
                            };
                        })(i)(elem);
                    };
                })(xs);
            };
        };
    };
};
var indexModulo = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function (i) {
            return function (v) {
                return lookup(mod(i)(toInt(Type_Proxy["Proxy"].value)))(v);
            };
        };
    };
};
var index = function (dictReflectable) {
    var toInt = Data_FastVect_Common.toInt(dictReflectable);
    return function () {
        return function () {
            return function () {
                return function (proxy) {
                    return function (v) {
                        return lookup(toInt(proxy))(v);
                    };
                };
            };
        };
    };
};
var head = function () {
    return function (v) {
        return lookup(0)(v);
    };
};
var generate = function (dictReflectable) {
    var toInt = Data_FastVect_Common.toInt(dictReflectable);
    return function () {
        return function (v) {
            return function (f) {
                var f1 = f()();
                return fromFoldable(map(function (i) {
                    return new Data_Tuple.Tuple(i, unsafeCoerceTerm(Type_Proxy["Proxy"].value)(function () {
                        return function () {
                            return function (dictReflectable1) {
                                return f1(dictReflectable1);
                            };
                        };
                    })(i));
                })(Data_Array.range(0)(toInt(Type_Proxy["Proxy"].value) - 1 | 0)));
            };
        };
    };
};
var fromMap = function (dictReflectable) {
    var toInt = Data_FastVect_Common.toInt(dictReflectable);
    return function () {
        return function (v) {
            return function (v1) {
                var v2 = function (v3) {
                    return Data_Maybe.Nothing.value;
                };
                var $142 = Data_Map_Internal.findMax(v1);
                if ($142 instanceof Data_Maybe.Just) {
                    var $143 = $142.value0.key < toInt(v) && $142.value0.key >= 0;
                    if ($143) {
                        return new Data_Maybe.Just(v1);
                    };
                    return v2(true);
                };
                return v2(true);
            };
        };
    };
};
var empty = Data_Map_Internal.empty;
var drop = function () {
    return function (dictReflectable) {
        var toInt = Data_FastVect_Common.toInt(dictReflectable);
        return function () {
            return function () {
                return function (proxy) {
                    return function (v) {
                        var drops = toInt(proxy);
                        return fromFoldable(filterMap(function (v1) {
                            var $149 = v1.value0 >= drops;
                            if ($149) {
                                return new Data_Maybe.Just(new Data_Tuple.Tuple(v1.value0 - drops | 0, v1.value1));
                            };
                            return Data_Maybe.Nothing.value;
                        })(toUnfoldableUnordered(v)));
                    };
                };
            };
        };
    };
};
var cons = function () {
    return function () {
        return function (elem) {
            return function (v) {
                return insert(0)(elem)(fromFoldable(map(first(add(1)))(toUnfoldableUnordered(v))));
            };
        };
    };
};
var append = function () {
    return function () {
        return function (dictReflectable) {
            var toInt = Data_FastVect_Common.toInt(dictReflectable);
            return function () {
                return function (v) {
                    return function (v1) {
                        return union(v)(fromFoldable(map(first(add(toInt(Type_Proxy["Proxy"].value))))(toUnfoldableUnordered(v1))));
                    };
                };
            };
        };
    };
};
export {
    append,
    cons,
    drop,
    empty,
    fromMap,
    generate,
    head,
    index,
    indexModulo,
    mapWithTerm,
    modify,
    replicate,
    set,
    singleton,
    snoc,
    sparse,
    splitAt,
    take,
    toMap,
    showVect,
    eqVect,
    ordVect,
    functorVect,
    applyVect,
    applicativeVect,
    functorWithIndexIntVect,
    foldableVect,
    foldableWithIndexIntVect,
    traversableVect,
    traversableWithIndexIntVe,
    isVectVect
};
