// Generated by purs version 0.15.9
import * as $foreign from "./foreign.js";
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Monad_ST_Class from "../Control.Monad.ST.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_ST from "../Data.Array.ST/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Filterable from "../Data.Filterable/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_HeytingAlgebra from "../Data.HeytingAlgebra/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ring from "../Data.Ring/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Semiring from "../Data.Semiring/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Effect_Timer from "../Effect.Timer/index.js";
import * as Effect_Uncurried from "../Effect.Uncurried/index.js";
import * as FRP_Event_Class from "../FRP.Event.Class/index.js";
import * as Unsafe_Reference from "../Unsafe.Reference/index.js";
var $runtime_lazy = function (name, moduleName, init) {
    var state = 0;
    var val;
    return function (lineNumber) {
        if (state === 2) return val;
        if (state === 1) throw new ReferenceError(name + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
        state = 1;
        val = init();
        state = 2;
        return val;
    };
};
var for_ = /* #__PURE__ */ Data_Foldable.for_(Effect.applicativeEffect);
var for_1 = /* #__PURE__ */ for_(Data_Foldable.foldableMaybe);
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect.applicativeEffect);
var liftST = /* #__PURE__ */ Control_Monad_ST_Class.liftST(Control_Monad_ST_Class.monadSTEffect);
var monoidEffect = /* #__PURE__ */ Effect.monoidEffect(Data_Monoid.monoidUnit);
var $$void = /* #__PURE__ */ Data_Functor["void"](Effect.functorEffect);
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var mempty = /* #__PURE__ */ Data_Monoid.mempty(/* #__PURE__ */ Effect_Uncurried.monoidEffectFn1(Data_Monoid.monoidUnit));
var mempty1 = /* #__PURE__ */ Data_Monoid.mempty(/* #__PURE__ */ Data_Set.monoidSet(Effect_Timer.ordTimeoutId));
var $$delete = /* #__PURE__ */ Data_Set["delete"](Effect_Timer.ordTimeoutId);
var append1 = /* #__PURE__ */ Data_Semigroup.append(/* #__PURE__ */ Data_Set.semigroupSet(Effect_Timer.ordTimeoutId));
var for_2 = /* #__PURE__ */ for_(Data_Set.foldableSet);
var apply = /* #__PURE__ */ Control_Apply.apply(Effect.applyEffect);
var map = /* #__PURE__ */ Data_Functor.map(Effect.functorEffect);
var Event = function (x) {
    return x;
};
var Hot = function (x) {
    return x;
};
var Mailbox = function (x) {
    return x;
};
var Mailboxed = function (x) {
    return x;
};
var MakeEventO = function (x) {
    return x;
};
var MakeEvent = function (x) {
    return x;
};
var MakeLemmingEvent = function (x) {
    return x;
};
var MakePureEvent = function (x) {
    return x;
};
var Memoize = function (x) {
    return x;
};
var SubscribeO = function (x) {
    return x;
};
var SubscribePureO = function (x) {
    return x;
};
var SubscribePure = function (x) {
    return x;
};
var Subscribe = function (x) {
    return x;
};
var Subscriber = function (x) {
    return x;
};
var MakeLemmingEventO = function (x) {
    return x;
};
var Delay = function (x) {
    return x;
};
var CreatePureO = function (x) {
    return x;
};
var CreatePure = function (x) {
    return x;
};
var CreateO = function (x) {
    return x;
};
var Create = function (x) {
    return x;
};
var Bus = function (x) {
    return x;
};
var sampleOnRight = function (v) {
    return function (v1) {
        return function (b, k) {
            var latest = Effect_Ref["new"](Data_Maybe.Nothing.value)();
            var c1 = v(b, function (a) {
                return Effect_Ref.write(new Data_Maybe.Just(a))(latest)();
            });
            var c2 = v1(b, function (f) {
                var o = Effect_Ref.read(latest)();
                return for_1(o)(function (a) {
                    return function () {
                        return k(f(a));
                    };
                })();
            });
            return function __do() {
                c1();
                return c2();
            };
        };
    };
};
var sampleOnLeft = function (v) {
    return function (v1) {
        return function (b, k) {
            var latest = Effect_Ref["new"](Data_Maybe.Nothing.value)();
            var c1 = v(b, function (a) {
                var o = Effect_Ref.read(latest)();
                return for_1(o)(function (f) {
                    return function () {
                        return k(f(a));
                    };
                })();
            });
            var c2 = v1(b, function (f) {
                return Effect_Ref.write(new Data_Maybe.Just(f))(latest)();
            });
            return function __do() {
                c1();
                return c2();
            };
        };
    };
};
var merge = function (dictFoldable) {
    var foldMap = Data_Foldable.foldMap(dictFoldable)(monoidEffect);
    return function (f) {
        return function (tf, k) {
            var a = liftST(Data_Array_ST["new"])();
            foldMap(function (v) {
                return function __do() {
                    var u = v(tf, k);
                    return $$void(liftST(Data_Array_ST.push(u)(a)))();
                };
            })(f)();
            return function __do() {
                var o = liftST(Data_Array_ST.freeze(a))();
                return $foreign.fastForeachThunk(o);
            };
        };
    };
};
var mailbox$prime = function (dictOrd) {
    var alter = Data_Map_Internal.alter(dictOrd);
    var lookup = Data_Map_Internal.lookup(dictOrd);
    return function __do() {
        var r = Effect_Ref["new"](Data_Map_Internal.empty)();
        return {
            event: function (a) {
                return function (v, k2) {
                    $$void(Effect_Ref.modify(alter(function (v1) {
                        if (v1 instanceof Data_Maybe.Nothing) {
                            return new Data_Maybe.Just([ k2 ]);
                        };
                        if (v1 instanceof Data_Maybe.Just) {
                            return new Data_Maybe.Just(append(v1.value0)([ k2 ]));
                        };
                        throw new Error("Failed pattern match at FRP.Event (line 568, column 17 - line 570, column 51): " + [ v1.constructor.name ]);
                    })(a))(r))();
                    return $$void(Effect_Ref.modify(alter(function (v1) {
                        if (v1 instanceof Data_Maybe.Nothing) {
                            return Data_Maybe.Nothing.value;
                        };
                        if (v1 instanceof Data_Maybe.Just) {
                            return new Data_Maybe.Just(Data_Array.deleteBy(Unsafe_Reference.unsafeRefEq)(k2)(v1.value0));
                        };
                        throw new Error("Failed pattern match at FRP.Event (line 577, column 17 - line 579, column 65): " + [ v1.constructor.name ]);
                    })(a))(r));
                };
            },
            push: function (v) {
                var o = Effect_Ref.read(r)();
                var v1 = lookup(v.address)(o);
                if (v1 instanceof Data_Maybe.Nothing) {
                    return Data_Unit.unit;
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return $foreign.fastForeachE(v1.value0, function (i) {
                        return i(v.payload);
                    });
                };
                throw new Error("Failed pattern match at FRP.Event (line 586, column 9 - line 588, column 95): " + [ v1.constructor.name ]);
            }
        };
    };
};
var keepLatest = function (v) {
    return function (tf, k) {
        var cancelInner = Effect_Ref["new"](pure(Data_Unit.unit))();
        var cancelOuter = v(tf, function (v1) {
            var ci = Effect_Ref.read(cancelInner)();
            ci();
            var c = v1(tf, k);
            return Effect_Ref.write(c)(cancelInner)();
        });
        return function __do() {
            var ci = Effect_Ref.read(cancelInner)();
            ci();
            return cancelOuter();
        };
    };
};
var functorEvent = {
    map: function (f) {
        return function (v) {
            return function (b, k) {
                return v(b, function (a) {
                    return k(f(a));
                });
            };
        };
    }
};
var map1 = /* #__PURE__ */ Data_Functor.map(functorEvent);
var filter = function (p) {
    return function (v) {
        return function (tf, k) {
            return v(tf, function (a) {
                var v1 = p(a);
                if (v1 instanceof Data_Maybe.Just) {
                    return k(v1.value0);
                };
                if (v1 instanceof Data_Maybe.Nothing) {
                    return Data_Unit.unit;
                };
                throw new Error("Failed pattern match at FRP.Event (line 225, column 31 - line 227, column 35): " + [ v1.constructor.name ]);
            });
        };
    };
};
var filter$prime = function (f) {
    return filter(function (a) {
        var v = f(a);
        if (v) {
            return new Data_Maybe.Just(a);
        };
        if (!v) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at FRP.Event (line 141, column 13 - line 143, column 25): " + [ v.constructor.name ]);
    });
};
var create$prime = function __do() {
    var subscribers = $foreign.objHack();
    var idx = Effect_Ref["new"](0)();
    return {
        event: function (v, k) {
            var rk = Effect_Ref["new"](k)();
            var ix = Effect_Ref.read(idx)();
            $foreign.insertObjHack(ix, rk, subscribers);
            Effect_Ref.modify_(function (v1) {
                return v1 + 1 | 0;
            })(idx)();
            return function __do() {
                Effect_Ref.write(mempty)(rk)();
                $foreign.deleteObjHack(ix, subscribers);
                return Data_Unit.unit;
            };
        },
        push: function (a) {
            return $foreign.fastForeachOhE(subscribers, function (rk) {
                var k = Effect_Ref.read(rk)();
                return k(a);
            });
        }
    };
};
var fix = function (f) {
    return function (tf, k) {
        var v = create$prime();
        var v1 = f(v.event);
        var c2 = v.event(tf, k);
        var c1 = v1(tf, v.push);
        return function __do() {
            c1();
            return c2();
        };
    };
};
var compactableEvent = {
    compact: /* #__PURE__ */ filter(/* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn)),
    separate: function (xs) {
        return {
            left: filter(function (v) {
                if (v instanceof Data_Either.Left) {
                    return new Data_Maybe.Just(v.value0);
                };
                if (v instanceof Data_Either.Right) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at FRP.Event (line 124, column 13 - line 126, column 33): " + [ v.constructor.name ]);
            })(xs),
            right: filter(function (v) {
                if (v instanceof Data_Either.Right) {
                    return new Data_Maybe.Just(v.value0);
                };
                if (v instanceof Data_Either.Left) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at FRP.Event (line 131, column 13 - line 133, column 32): " + [ v.constructor.name ]);
            })(xs)
        };
    }
};
var filterableEvent = {
    filter: filter$prime,
    filterMap: filter,
    partition: function (p) {
        return function (xs) {
            return {
                yes: filter$prime(p)(xs),
                no: filter$prime(function ($232) {
                    return !p($232);
                })(xs)
            };
        };
    },
    partitionMap: function (f) {
        return function (xs) {
            return {
                left: Data_Filterable.filterMap(filterableEvent)((function () {
                    var $233 = Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value));
                    return function ($234) {
                        return $233(f($234));
                    };
                })())(xs),
                right: Data_Filterable.filterMap(filterableEvent)(function ($235) {
                    return Data_Either.hush(f($235));
                })(xs)
            };
        };
    },
    Compactable0: function () {
        return compactableEvent;
    },
    Functor1: function () {
        return functorEvent;
    }
};
var biSampleOn = function (v) {
    return function (v1) {
        return function (tf, k) {
            var latest1 = Effect_Ref["new"](Data_Maybe.Nothing.value)();
            var replay1 = liftST(Data_Array_ST["new"])();
            var latest2 = Effect_Ref["new"](Data_Maybe.Nothing.value)();
            var replay2 = liftST(Data_Array_ST["new"])();
            var capturing = Effect_Ref["new"](true)();
            var c1 = v(tf, function (a) {
                var o = Effect_Ref.read(capturing)();
                if (o) {
                    return $$void(liftST(Data_Array_ST.push(a)(replay1)))();
                };
                Effect_Ref.write(new Data_Maybe.Just(a))(latest1)();
                var res = Effect_Ref.read(latest2)();
                return for_1(res)(function (f) {
                    return function () {
                        return k(f(a));
                    };
                })();
            });
            var c2 = v1(tf, function (f) {
                var o = Effect_Ref.read(capturing)();
                if (o) {
                    return $$void(liftST(Data_Array_ST.push(f)(replay2)))();
                };
                Effect_Ref.write(new Data_Maybe.Just(f))(latest2)();
                var res = Effect_Ref.read(latest1)();
                return for_1(res)(function (a) {
                    return function () {
                        return k(f(a));
                    };
                })();
            });
            Effect_Ref.write(false)(capturing)();
            var samples1 = liftST(Data_Array_ST.freeze(replay1))();
            var samples2 = liftST(Data_Array_ST.freeze(replay2))();
            (function () {
                if (samples1.length === 0) {
                    return Effect_Ref.write(Data_Array.last(samples2))(latest2)();
                };
                return $foreign.fastForeachE(samples1, function (a) {
                    Effect_Ref.write(new Data_Maybe.Just(a))(latest1)();
                    return $foreign.fastForeachE(samples2, function (f) {
                        Effect_Ref.write(new Data_Maybe.Just(f))(latest2)();
                        return k(f(a));
                    });
                });
            })();
            liftST(Data_Array_ST.splice(0)(Data_Array.length(samples1))([  ])(replay1))();
            liftST(Data_Array_ST.splice(0)(Data_Array.length(samples2))([  ])(replay2))();
            return function __do() {
                c1();
                return c2();
            };
        };
    };
};
var subscribe = function (i) {
    return (function (v) {
        return v;
    })(($lazy_backdoor(345)).subscribe)(i);
};
var $lazy_backdoor = /* #__PURE__ */ $runtime_lazy("backdoor", "FRP.Event", function () {
    var create_ = function __do() {
        var subscribers = $foreign.objHack();
        var idx = Effect_Ref["new"](0)();
        return {
            event: function (v, k) {
                var rk = Effect_Ref["new"](k)();
                var ix = Effect_Ref.read(idx)();
                $foreign.insertObjHack(ix, rk, subscribers);
                Effect_Ref.modify_(function (v1) {
                    return v1 + 1 | 0;
                })(idx)();
                return function __do() {
                    Effect_Ref.write(mempty)(rk)();
                    $foreign.deleteObjHack(ix, subscribers);
                    return Data_Unit.unit;
                };
            },
            push: function (a) {
                return function () {
                    return $foreign.fastForeachOhE(subscribers, function (rk) {
                        var k = Effect_Ref.read(rk)();
                        return k(a);
                    });
                };
            }
        };
    };
    return {
        createO: create$prime,
        makeEvent: (function () {
            var makeEvent_ = function (e) {
                return function (tf, k) {
                    if (tf) {
                        return pure(Data_Unit.unit);
                    };
                    return e(function (a) {
                        return function () {
                            return k(a);
                        };
                    })();
                };
            };
            return makeEvent_;
        })(),
        makeEventO: (function () {
            var makeEventO_ = function (e) {
                return function (tf, k) {
                    if (tf) {
                        return pure(Data_Unit.unit);
                    };
                    return e(k);
                };
            };
            return makeEventO_;
        })(),
        makePureEvent: (function () {
            var makePureEvent_ = function (e) {
                return function (v, k) {
                    return e(function (a) {
                        return function () {
                            return k(a);
                        };
                    })();
                };
            };
            return makePureEvent_;
        })(),
        makeLemmingEvent: (function () {
            var makeLemmingEvent_ = function (e) {
                return function (tf, k) {
                    var o = function (v) {
                        return function (kx) {
                            return function () {
                                return v(tf, Effect_Uncurried.mkEffectFn1(kx));
                            };
                        };
                    };
                    return e(o)(function (a) {
                        return function () {
                            return k(a);
                        };
                    })();
                };
            };
            return makeLemmingEvent_;
        })(),
        makeLemmingEventO: (function () {
            var makeLemmingEventO_ = function (e) {
                return function (tf, k) {
                    var o = function (v, kx) {
                        return v(tf, kx);
                    };
                    return e(o, k);
                };
            };
            return makeLemmingEventO_;
        })(),
        create: create_,
        createPure: create_,
        createPureO: create$prime,
        subscribe: (function () {
            var subscribe_ = function (v) {
                return function (k) {
                    return function () {
                        return v(false, Effect_Uncurried.mkEffectFn1(k));
                    };
                };
            };
            return subscribe_;
        })(),
        subscribeO: (function () {
            var subscribeO_ = function (v, k) {
                return v(false, k);
            };
            return subscribeO_;
        })(),
        subscribePureO: (function () {
            var subscribePureO_ = function (v, k) {
                return v(true, k);
            };
            return subscribePureO_;
        })(),
        subscribePure: (function () {
            var subscribePure_ = (function () {
                var o = function (v) {
                    return function (k) {
                        return function () {
                            return v(true, Effect_Uncurried.mkEffectFn1(k));
                        };
                    };
                };
                return o;
            })();
            return subscribePure_;
        })(),
        bus: (function () {
            var bus_ = function (f) {
                return function (v, k) {
                    var v1 = $lazy_create(819)();
                    k(f(v1.push)(v1.event));
                    return pure(Data_Unit.unit);
                };
            };
            return bus_;
        })(),
        memoize: (function () {
            var memoize_ = function (v) {
                return function (f) {
                    return function (b, k) {
                        var v1 = create$prime();
                        k(f(v1.event));
                        return v(b, v1.push);
                    };
                };
            };
            return memoize_;
        })(),
        hot: (function () {
            var hot_ = function (e) {
                return function __do() {
                    var v = $lazy_create(837)();
                    var unsubscribe = subscribe(e)(v.push)();
                    return {
                        event: v.event,
                        unsubscribe: unsubscribe
                    };
                };
            };
            return hot_;
        })(),
        mailbox: (function () {
            var mailbox_ = function (dictOrd) {
                return function __do() {
                    var v = mailbox$prime(dictOrd)();
                    return {
                        event: v.event,
                        push: function (k) {
                            return function () {
                                return v.push(k);
                            };
                        }
                    };
                };
            };
            return mailbox_;
        })(),
        mailboxed: (function () {
            var mailboxed_ = function (dictOrd) {
                var mailbox$prime1 = mailbox$prime(dictOrd);
                return function (v) {
                    return function (f) {
                        return function (b, k) {
                            var v1 = mailbox$prime1();
                            k(f(v1.event));
                            return v(b, v1.push);
                        };
                    };
                };
            };
            return mailboxed_;
        })(),
        delay: (function () {
            var delay_ = function (n) {
                return function (v) {
                    return function (tf, k) {
                        var tid = Effect_Ref["new"](mempty1)();
                        var canceler = v(tf, function (a) {
                            var localId = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                            var id = Effect_Timer.setTimeout(n)(function __do() {
                                k(a);
                                var lid = Effect_Ref.read(localId)();
                                return Data_Maybe.maybe(pure(Data_Unit.unit))(function (id) {
                                    return Effect_Ref.modify_($$delete(id))(tid);
                                })(lid)();
                            })();
                            Effect_Ref.write(new Data_Maybe.Just(id))(localId)();
                            return Effect_Ref.modify_(append1(Data_Set.singleton(id)))(tid)();
                        });
                        return function __do() {
                            var ids = Effect_Ref.read(tid)();
                            for_2(ids)(Effect_Timer.clearTimeout)();
                            return canceler();
                        };
                    };
                };
            };
            return delay_;
        })()
    };
});
var $lazy_create = /* #__PURE__ */ $runtime_lazy("create", "FRP.Event", function () {
    return function __do() {
        Data_Unit.unit;
        return (function (v) {
            return v;
        })(($lazy_backdoor(461)).create)();
    };
});
var backdoor = /* #__PURE__ */ $lazy_backdoor(678);
var create = /* #__PURE__ */ $lazy_create(458);
var bus = function (i) {
    return (function (v) {
        return v;
    })(backdoor.bus)(i);
};
var createO = function __do() {
    Data_Unit.unit;
    return backdoor.createO();
};
var createPure = function __do() {
    Data_Unit.unit;
    return backdoor.createPure();
};
var createPureO = function __do() {
    Data_Unit.unit;
    return backdoor.createPureO();
};
var delay = function (i) {
    return (function (v) {
        return v;
    })(backdoor.delay)(i);
};
var hot = function (i) {
    return (function (v) {
        return v;
    })(backdoor.hot)(i);
};
var mailbox = function (dictOrd) {
    return function __do() {
        Data_Unit.unit;
        return backdoor.mailbox(dictOrd)();
    };
};
var mailboxed = function (dictOrd) {
    return function (i) {
        return (function (v) {
            return v(dictOrd);
        })(backdoor.mailboxed)(i);
    };
};
var makeEvent = function (i) {
    return (function (v) {
        return v;
    })(backdoor.makeEvent)(i);
};
var makeEventO = function (i) {
    return (function (v) {
        return v;
    })(backdoor.makeEventO)(i);
};
var makeLemmingEvent = function (i) {
    return (function (v) {
        return v;
    })(backdoor.makeLemmingEvent)(i);
};
var makeLemmingEventO = function (i) {
    return (function (v) {
        return v;
    })(backdoor.makeLemmingEventO)(i);
};
var makePureEvent = function (i) {
    return (function (v) {
        return v;
    })(backdoor.makePureEvent)(i);
};
var memoize = function (i) {
    return (function (v) {
        return v;
    })(backdoor.memoize)(i);
};
var subscribeO = /* #__PURE__ */ (function () {
    return (function (v) {
        return v;
    })(backdoor.subscribeO);
})();
var subscribePure = function (i) {
    return (function (v) {
        return v;
    })(backdoor.subscribePure)(i);
};
var subscribePureO = /* #__PURE__ */ (function () {
    return (function (v) {
        return v;
    })(backdoor.subscribePureO);
})();
var applyEvent = {
    apply: function (a) {
        return function (b) {
            return biSampleOn(a)(map1(Data_Function.applyFlipped)(b));
        };
    },
    Functor0: function () {
        return functorEvent;
    }
};
var lift2 = /* #__PURE__ */ Control_Apply.lift2(applyEvent);
var semigroupEvent = function (dictSemigroup) {
    return {
        append: lift2(Data_Semigroup.append(dictSemigroup))
    };
};
var applicativeEvent = {
    pure: function (a) {
        return function (v, k) {
            k(a);
            return pure(Data_Unit.unit);
        };
    },
    Apply0: function () {
        return applyEvent;
    }
};
var pure2 = /* #__PURE__ */ Control_Applicative.pure(applicativeEvent);
var heytingAlgebraEvent = function (dictHeytingAlgebra) {
    return {
        tt: pure2(Data_HeytingAlgebra.tt(dictHeytingAlgebra)),
        ff: pure2(Data_HeytingAlgebra.ff(dictHeytingAlgebra)),
        not: map1(Data_HeytingAlgebra.not(dictHeytingAlgebra)),
        implies: lift2(Data_HeytingAlgebra.implies(dictHeytingAlgebra)),
        conj: lift2(Data_HeytingAlgebra.conj(dictHeytingAlgebra)),
        disj: lift2(Data_HeytingAlgebra.disj(dictHeytingAlgebra))
    };
};
var monoidEvent = function (dictMonoid) {
    var semigroupEvent1 = semigroupEvent(dictMonoid.Semigroup0());
    return {
        mempty: pure2(Data_Monoid.mempty(dictMonoid)),
        Semigroup0: function () {
            return semigroupEvent1;
        }
    };
};
var semiringEvent = function (dictSemiring) {
    return {
        zero: pure2(Data_Semiring.zero(dictSemiring)),
        one: pure2(Data_Semiring.one(dictSemiring)),
        add: lift2(Data_Semiring.add(dictSemiring)),
        mul: lift2(Data_Semiring.mul(dictSemiring))
    };
};
var ringEvent = function (dictRing) {
    var semiringEvent1 = semiringEvent(dictRing.Semiring0());
    return {
        sub: lift2(Data_Ring.sub(dictRing)),
        Semiring0: function () {
            return semiringEvent1;
        }
    };
};
var altEvent = {
    alt: function (v) {
        return function (v1) {
            return function (tf, k) {
                return apply(map(function (v2) {
                    return function (v3) {
                        return function __do() {
                            v2();
                            return v3();
                        };
                    };
                })(function () {
                    return v(tf, k);
                }))(function () {
                    return v1(tf, k);
                })();
            };
        };
    },
    Functor0: function () {
        return functorEvent;
    }
};
var alt = /* #__PURE__ */ Control_Alt.alt(altEvent);
var burning = function (i) {
    return function (v) {
        return function __do() {
            var r = Effect_Ref["new"](i)();
            var v1 = create$prime();
            var unsubscribe = v(true, function (x) {
                Effect_Ref.write(x)(r)();
                return v1.push(x);
            });
            return {
                event: alt(v1.event)(function (v2, k) {
                    var o = Effect_Ref.read(r)();
                    k(o);
                    return pure(Data_Unit.unit);
                }),
                unsubscribe: unsubscribe
            };
        };
    };
};
var plusEvent = {
    empty: function (v, v1) {
        return pure(Data_Unit.unit);
    },
    Alt0: function () {
        return altEvent;
    }
};
var alternativeEvent = {
    Applicative0: function () {
        return applicativeEvent;
    },
    Plus1: function () {
        return plusEvent;
    }
};
var eventIsEvent = {
    keepLatest: keepLatest,
    sampleOnRight: sampleOnRight,
    sampleOnLeft: sampleOnLeft,
    fix: fix,
    Alternative0: function () {
        return alternativeEvent;
    },
    Filterable1: function () {
        return filterableEvent;
    }
};
export {
    Bus,
    Create,
    CreateO,
    CreatePure,
    CreatePureO,
    Delay,
    Hot,
    Mailbox,
    Mailboxed,
    MakeEvent,
    MakeEventO,
    MakeLemmingEvent,
    MakeLemmingEventO,
    MakePureEvent,
    Memoize,
    Subscribe,
    SubscribeO,
    SubscribePure,
    SubscribePureO,
    Subscriber,
    backdoor,
    burning,
    bus,
    merge,
    create,
    createO,
    createPure,
    createPureO,
    delay,
    hot,
    mailbox,
    mailboxed,
    makeEvent,
    makeEventO,
    makeLemmingEvent,
    makeLemmingEventO,
    makePureEvent,
    memoize,
    subscribe,
    subscribeO,
    subscribePure,
    subscribePureO,
    functorEvent,
    compactableEvent,
    filterableEvent,
    altEvent,
    plusEvent,
    applyEvent,
    applicativeEvent,
    alternativeEvent,
    eventIsEvent,
    semigroupEvent,
    monoidEvent,
    heytingAlgebraEvent,
    semiringEvent,
    ringEvent
};
export {
    count,
    filterMap,
    fix,
    fold,
    folded,
    gate,
    gateBy,
    keepLatest,
    mapAccum,
    sampleOnRight,
    sampleOnRight_,
    withLast
} from "../FRP.Event.Class/index.js";
