// Generated by purs version 0.15.9
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as FRP_Event from "../FRP.Event/index.js";
import * as FRP_Event_VBus from "../FRP.Event.VBus/index.js";
var compare = /* #__PURE__ */ Data_Ord.compare(Data_Ord.ordString);
var vbus = /* #__PURE__ */ FRP_Event_VBus.vbus();
var Local = /* #__PURE__ */ (function () {
    function Local(value0) {
        this.value0 = value0;
    };
    Local.create = function (value0) {
        return new Local(value0);
    };
    return Local;
})();
var Global = /* #__PURE__ */ (function () {
    function Global() {

    };
    Global.value = new Global();
    return Global;
})();
var Element = function (x) {
    return x;
};
var Insert = /* #__PURE__ */ (function () {
    function Insert(value0) {
        this.value0 = value0;
    };
    Insert.create = function (value0) {
        return new Insert(value0);
    };
    return Insert;
})();
var Remove = /* #__PURE__ */ (function () {
    function Remove() {

    };
    Remove.value = new Remove();
    return Remove;
})();
var Logic = /* #__PURE__ */ (function () {
    function Logic(value0) {
        this.value0 = value0;
    };
    Logic.create = function (value0) {
        return new Logic(value0);
    };
    return Logic;
})();
var DynamicChildren$prime = /* #__PURE__ */ (function () {
    function DynamicChildren$prime(value0) {
        this.value0 = value0;
    };
    DynamicChildren$prime.create = function (value0) {
        return new DynamicChildren$prime(value0);
    };
    return DynamicChildren$prime;
})();
var FixedChildren$prime = /* #__PURE__ */ (function () {
    function FixedChildren$prime(value0) {
        this.value0 = value0;
    };
    FixedChildren$prime.create = function (value0) {
        return new FixedChildren$prime(value0);
    };
    return FixedChildren$prime;
})();
var EventfulElement$prime = /* #__PURE__ */ (function () {
    function EventfulElement$prime(value0) {
        this.value0 = value0;
    };
    EventfulElement$prime.create = function (value0) {
        return new EventfulElement$prime(value0);
    };
    return EventfulElement$prime;
})();
var Element$prime = /* #__PURE__ */ (function () {
    function Element$prime(value0) {
        this.value0 = value0;
    };
    Element$prime.create = function (value0) {
        return new Element$prime(value0);
    };
    return Element$prime;
})();
var DynamicChildren = function (x) {
    return x;
};
var FixedChildren = function (x) {
    return x;
};
var EventfulElement = function (x) {
    return x;
};
var eqScope = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Local && y instanceof Local) {
                return x.value0 === y.value0;
            };
            if (x instanceof Global && y instanceof Global) {
                return true;
            };
            return false;
        };
    }
};
var ordScope = {
    compare: function (x) {
        return function (y) {
            if (x instanceof Local && y instanceof Local) {
                return compare(x.value0)(y.value0);
            };
            if (x instanceof Local) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Local) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Global && y instanceof Global) {
                return Data_Ordering.EQ.value;
            };
            throw new Error("Failed pattern match at Bolson.Core (line 0, column 0 - line 0, column 0): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqScope;
    }
};
var vbussed = function () {
    return function (dictVBus) {
        var vbus1 = vbus(dictVBus);
        return function (px) {
            return function (f) {
                return new EventfulElement$prime(vbus1(px)(f));
            };
        };
    };
};
var fixed = function (a) {
    return new FixedChildren$prime(a);
};
var envy = function (a) {
    return new EventfulElement$prime(a);
};
var dyn = function (a) {
    return new DynamicChildren$prime(a);
};
var bussed = function (f) {
    return new EventfulElement$prime(FRP_Event.bus(f));
};
export {
    Element,
    Insert,
    Remove,
    Logic,
    DynamicChildren,
    FixedChildren,
    EventfulElement,
    Local,
    Global,
    DynamicChildren$prime,
    FixedChildren$prime,
    EventfulElement$prime,
    Element$prime,
    fixed,
    dyn,
    envy,
    bussed,
    vbussed,
    eqScope,
    ordScope
};
