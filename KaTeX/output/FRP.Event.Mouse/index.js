// Generated by purs version 0.15.9
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Data_Compactable from "../Data.Compactable/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as FRP_Event from "../FRP.Event/index.js";
import * as Web_Event_EventTarget from "../Web.Event.EventTarget/index.js";
import * as Web_HTML from "../Web.HTML/index.js";
import * as Web_HTML_Window from "../Web.HTML.Window/index.js";
import * as Web_UIEvent_MouseEvent from "../Web.UIEvent.MouseEvent/index.js";
var map = /* #__PURE__ */ Data_Functor.map(Effect.functorEffect);
var traverse_ = /* #__PURE__ */ Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe);
var wrap = /* #__PURE__ */ Data_Newtype.wrap();
var compact = /* #__PURE__ */ Data_Compactable.compact(FRP_Event.compactableEvent);
var map1 = /* #__PURE__ */ Data_Functor.map(FRP_Event.functorEvent);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(FRP_Event.applicativeEvent);
var insert = /* #__PURE__ */ Data_Set.insert(Data_Ord.ordInt);
var $$delete = /* #__PURE__ */ Data_Set["delete"](Data_Ord.ordInt);
var Mouse = function (x) {
    return x;
};
var withPosition = function (v) {
    return function (e) {
        return FRP_Event.makeEvent(function (k) {
            return FRP_Event.subscribe(e)(function (value) {
                return function __do() {
                    var pos = Effect_Ref.read(v.position)();
                    return k({
                        value: value,
                        pos: pos
                    })();
                };
            });
        });
    };
};
var withButtons = function (v) {
    return function (e) {
        return FRP_Event.makeEvent(function (k) {
            return FRP_Event.subscribe(e)(function (value) {
                return function __do() {
                    var buttonsValue = Effect_Ref.read(v.buttons)();
                    return k({
                        value: value,
                        buttons: buttonsValue
                    })();
                };
            });
        });
    };
};
var up = /* #__PURE__ */ FRP_Event.makeEvent(function (k) {
    return function __do() {
        var target = map(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
        var mouseUpListener = Web_Event_EventTarget.eventListener(function (e) {
            return traverse_(function (me) {
                return k(Web_UIEvent_MouseEvent.button(me));
            })(Web_UIEvent_MouseEvent.fromEvent(e));
        })();
        Web_Event_EventTarget.addEventListener(wrap("mouseup"))(mouseUpListener)(false)(target)();
        return Web_Event_EventTarget.removeEventListener(wrap("mouseup"))(mouseUpListener)(false)(target);
    };
});
var move = function (m) {
    return compact(map1(function (v) {
        return v.pos;
    })(withPosition(m)(pure1(Data_Unit.unit))));
};
var getMouse = function __do() {
    var position = Effect_Ref["new"](Data_Maybe.Nothing.value)();
    var buttons = Effect_Ref["new"](Data_Set.empty)();
    var target = map(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
    var mouseMoveListener = Web_Event_EventTarget.eventListener(function (e) {
        return traverse_(function (me) {
            return Effect_Ref.write(new Data_Maybe.Just({
                x: Web_UIEvent_MouseEvent.clientX(me),
                y: Web_UIEvent_MouseEvent.clientY(me)
            }))(position);
        })(Web_UIEvent_MouseEvent.fromEvent(e));
    })();
    var mouseDownListener = Web_Event_EventTarget.eventListener(function (e) {
        return traverse_(function (me) {
            return Effect_Ref.modify(insert(Web_UIEvent_MouseEvent.button(me)))(buttons);
        })(Web_UIEvent_MouseEvent.fromEvent(e));
    })();
    var mouseUpListener = Web_Event_EventTarget.eventListener(function (e) {
        return traverse_(function (me) {
            return Effect_Ref.modify($$delete(Web_UIEvent_MouseEvent.button(me)))(buttons);
        })(Web_UIEvent_MouseEvent.fromEvent(e));
    })();
    Web_Event_EventTarget.addEventListener(wrap("mousemove"))(mouseMoveListener)(false)(target)();
    Web_Event_EventTarget.addEventListener(wrap("mousedown"))(mouseDownListener)(false)(target)();
    Web_Event_EventTarget.addEventListener(wrap("mouseup"))(mouseUpListener)(false)(target)();
    var dispose = function __do() {
        Web_Event_EventTarget.removeEventListener(wrap("mousemove"))(mouseMoveListener)(false)(target)();
        Web_Event_EventTarget.removeEventListener(wrap("mousedown"))(mouseDownListener)(false)(target)();
        return Web_Event_EventTarget.removeEventListener(wrap("mouseup"))(mouseUpListener)(false)(target)();
    };
    return {
        position: position,
        buttons: buttons,
        dispose: dispose
    };
};
var down = /* #__PURE__ */ FRP_Event.makeEvent(function (k) {
    return function __do() {
        var target = map(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
        var mouseDownListener = Web_Event_EventTarget.eventListener(function (e) {
            return traverse_(function (me) {
                return k(Web_UIEvent_MouseEvent.button(me));
            })(Web_UIEvent_MouseEvent.fromEvent(e));
        })();
        Web_Event_EventTarget.addEventListener(wrap("mousedown"))(mouseDownListener)(false)(target)();
        return Web_Event_EventTarget.removeEventListener(wrap("mousedown"))(mouseDownListener)(false)(target);
    };
});
var disposeMouse = function (v) {
    return v.dispose;
};
export {
    getMouse,
    disposeMouse,
    move,
    down,
    up,
    withPosition,
    withButtons
};
