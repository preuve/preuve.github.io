// Generated by purs version 0.13.3
"use strict";
var Data_Array = require("../Data.Array/index.js");
var Data_Boolean = require("../Data.Boolean/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Foldable = require("../Data.Foldable/index.js");
var Data_Functor = require("../Data.Functor/index.js");
var Data_Maybe = require("../Data.Maybe/index.js");
var Data_Monoid = require("../Data.Monoid/index.js");
var Data_Ring = require("../Data.Ring/index.js");
var Data_Semigroup = require("../Data.Semigroup/index.js");
var Data_Semiring = require("../Data.Semiring/index.js");
var Data_Show = require("../Data.Show/index.js");
var Data_Sparse_Polynomial = require("../Data.Sparse.Polynomial/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Graphics_Drawing = require("../Graphics.Drawing/index.js");
var Graphics_Drawing_Font = require("../Graphics.Drawing.Font/index.js");
var $$Math = require("../Math/index.js");
var Vector = function (x) {
    return x;
};
var Point = function (x) {
    return x;
};
var RightAngle = function (x) {
    return x;
};
var Segment = function (x) {
    return x;
};
var Line = function (x) {
    return x;
};
var HalfLine = function (x) {
    return x;
};
var Circle = function (x) {
    return x;
};
var Arc = function (x) {
    return x;
};
var Summable = function (plus) {
    this.plus = plus;
};
var Measurable = function (length) {
    this.length = length;
};
var Intersectable = function (meets) {
    this.meets = meets;
};
var DrawableSet = function (drawIn) {
    this.drawIn = drawIn;
};
var Based = function (abs, coords, ord) {
    this.abs = abs;
    this.coords = coords;
    this.ord = ord;
};
var vector = function (v) {
    return function (v1) {
        return Vector(Data_Ring.sub(Data_Sparse_Polynomial.ringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber)(Data_Ring.ringNumber))(v1.coordinates)(v.coordinates));
    };
};
var summableVectorVector = new Summable(function (v) {
    return function (v1) {
        return Vector(Data_Semiring.add(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(v)(v1));
    };
});
var segment = function (origin) {
    return function (extremity) {
        return function (asOriented) {
            return {
                origin: origin,
                extremity: extremity,
                asOriented: asOriented
            };
        };
    };
};
var scale = function (k) {
    return function (v) {
        return Vector(Data_Semiring.mul(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(Data_Sparse_Polynomial.monoPol(k)(0))(v));
    };
};
var rightangle = function (origin) {
    return function (center) {
        return function (extremity) {
            return function (radius) {
                return {
                    origin: origin,
                    center: center,
                    extremity: extremity,
                    radius: radius
                };
            };
        };
    };
};
var rename = function (str) {
    return function (v) {
        return Point({
            name: str,
            coordinates: v.coordinates
        });
    };
};
var point = function (name) {
    return function (x) {
        return function (y) {
            return Point({
                name: name,
                coordinates: Data_Semiring.add(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(Data_Sparse_Polynomial.monoPol(x)(0))(Data_Sparse_Polynomial.monoPol(y)(1))
            });
        };
    };
};
var plus = function (dict) {
    return dict.plus;
};
var ord = function (dict) {
    return dict.ord;
};
var middle = function (name) {
    return function (v) {
        return {
            name: name,
            coordinates: Data_Semiring.mul(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(Data_Semiring.add(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(v.origin.coordinates)(v.extremity.coordinates))(Data_Sparse_Polynomial.monoPol(0.5)(0))
        };
    };
};
var meets = function (dict) {
    return dict.meets;
};
var length = function (dict) {
    return dict.length;
};
var interLineLine = new Intersectable(function (v) {
    return function (v1) {
        var delta = v.a * v1.b - v1.a * v.b;
        if (delta === 0.0) {
            return [  ];
        };
        if (Data_Boolean.otherwise) {
            return [ point("")((v.b * v1.c - v1.b * v.c) / delta)((v1.a * v.c - v.a * v1.c) / delta) ];
        };
        throw new Error("Failed pattern match at Graphics.Canvas.Geometry (line 181, column 8 - line 184, column 65): " + [ Data_Unit.unit.constructor.name ]);
    };
});
var halfline = function (origin) {
    return function (direction) {
        return {
            origin: origin,
            direction: direction
        };
    };
};
var drawIn = function (dict) {
    return dict.drawIn;
};
var drawableSequence = function (dictDrawableSet) {
    return new DrawableSet(function (ctx) {
        return function (arr) {
            return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Semigroup.append(Graphics_Drawing.semigroupDrawing))(Data_Monoid.mempty(Graphics_Drawing.monoidDrawing))(Data_Functor.map(Data_Functor.functorArray)(drawIn(dictDrawableSet)(ctx))(arr));
        };
    });
};
var coords = function (dict) {
    return dict.coords;
};
var circle = function (p) {
    return function (r) {
        return {
            center: p,
            radius: r
        };
    };
};
var basedVector = new Based(function (v) {
    return Data_Sparse_Polynomial.query(Data_Semiring.semiringNumber)(v)(0);
}, function (v) {
    return v;
}, function (v) {
    return Data_Sparse_Polynomial.query(Data_Semiring.semiringNumber)(v)(1);
});
var basedPoint = new Based(function (v) {
    return Data_Sparse_Polynomial.query(Data_Semiring.semiringNumber)(v.coordinates)(0);
}, function (v) {
    return v.coordinates;
}, function (v) {
    return Data_Sparse_Polynomial.query(Data_Semiring.semiringNumber)(v.coordinates)(1);
});
var summublePointVector = new Summable(function (p) {
    return function (v) {
        return {
            name: "",
            coordinates: Data_Semiring.add(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(coords(basedPoint)(p))(coords(basedVector)(v))
        };
    };
});
var arrowLength = 20.0;
var arrowBluntness = 0.3;
var arc = function (origin) {
    return function (center) {
        return function (extremity) {
            return function (radius) {
                return function (flipped) {
                    return function (swapped) {
                        return function (asOriented) {
                            return {
                                origin: origin,
                                center: center,
                                extremity: extremity,
                                radius: radius,
                                flipped: flipped,
                                swapped: swapped,
                                asOriented: asOriented
                            };
                        };
                    };
                };
            };
        };
    };
};
var abs = function (dict) {
    return dict.abs;
};
var drawableCircle = new DrawableSet(function (v) {
    return function (v1) {
        return Graphics_Drawing.outlined(Data_Semigroup.append(Graphics_Drawing.semigroupOutlineStyle)(Graphics_Drawing.outlineColor(v.color))(Graphics_Drawing.lineWidth(v.lineWidth)))(Graphics_Drawing.circle(abs(basedPoint)(v1.center))(ord(basedPoint)(v1.center))(v1.radius));
    };
});
var drawableHalfLine = new DrawableSet(function (v) {
    return function (v1) {
        var far = plus(summublePointVector)(v1.origin)(scale(10.0)(v1.direction));
        return Graphics_Drawing.outlined(Data_Semigroup.append(Graphics_Drawing.semigroupOutlineStyle)(Graphics_Drawing.outlineColor(v.color))(Graphics_Drawing.lineWidth(v.lineWidth)))(Graphics_Drawing.path(Data_Foldable.foldableArray)([ {
            x: abs(basedPoint)(v1.origin),
            y: ord(basedPoint)(v1.origin)
        }, {
            x: abs(basedPoint)(far),
            y: ord(basedPoint)(far)
        } ]));
    };
});
var drawablePoint = new DrawableSet(function (v) {
    return function (v1) {
        return Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(Graphics_Drawing.outlined(Data_Semigroup.append(Graphics_Drawing.semigroupOutlineStyle)(Graphics_Drawing.outlineColor(v.color))(Graphics_Drawing.lineWidth(v.lineWidth)))(Graphics_Drawing.path(Data_Foldable.foldableArray)([ {
            x: abs(basedPoint)(v1) - 5.0,
            y: ord(basedPoint)(v1) - 5.0
        }, {
            x: abs(basedPoint)(v1) + 5.0,
            y: ord(basedPoint)(v1) + 5.0
        } ])))(Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(Graphics_Drawing.outlined(Data_Semigroup.append(Graphics_Drawing.semigroupOutlineStyle)(Graphics_Drawing.outlineColor(v.color))(Graphics_Drawing.lineWidth(v.lineWidth)))(Graphics_Drawing.path(Data_Foldable.foldableArray)([ {
            x: abs(basedPoint)(v1) - 5.0,
            y: ord(basedPoint)(v1) + 5.0
        }, {
            x: abs(basedPoint)(v1) + 5.0,
            y: ord(basedPoint)(v1) - 5.0
        } ])))(Graphics_Drawing.text(Graphics_Drawing_Font.font(Graphics_Drawing_Font.fantasy)(25)(Data_Monoid.mempty(Graphics_Drawing_Font.monoidFontOptions)))(abs(basedPoint)(v1) + 10.0)(ord(basedPoint)(v1) - 10.0)(Graphics_Drawing.fillColor(v.color))(v1.name)));
    };
});
var line = function (m) {
    return function (n) {
        return Line({
            a: ord(basedPoint)(m) - ord(basedPoint)(n),
            b: abs(basedPoint)(n) - abs(basedPoint)(m),
            c: abs(basedPoint)(m) * ord(basedPoint)(n) - ord(basedPoint)(m) * abs(basedPoint)(n)
        });
    };
};
var measurableVector = new Measurable(function (v) {
    return $$Math.sqrt(abs(basedVector)(v) * abs(basedVector)(v) + ord(basedVector)(v) * ord(basedVector)(v));
});
var cosAngle = function (u) {
    return function (v) {
        return (abs(basedVector)(u) * abs(basedVector)(v) + ord(basedVector)(u) * ord(basedVector)(v)) / (length(measurableVector)(u) * length(measurableVector)(v));
    };
};
var interLineHalfLine = new Intersectable(function (l) {
    return function (v) {
        var l$prime = line(v.origin)(plus(summublePointVector)(v.origin)(v.direction));
        return Data_Array.filter(function (p) {
            return cosAngle(vector(v.origin)(p))(v.direction) >= 0.0;
        })(meets(interLineLine)(l)(l$prime));
    };
});
var interHalfLineLine = new Intersectable(function (hl) {
    return function (l) {
        return meets(interLineHalfLine)(l)(hl);
    };
});
var interHalfLineHalfLine = new Intersectable(function (v) {
    return function (hl) {
        var l = line(v.origin)(plus(summublePointVector)(v.origin)(v.direction));
        return Data_Array.filter(function (p) {
            return cosAngle(vector(v.origin)(p))(v.direction) >= 0.0;
        })(meets(interHalfLineLine)(hl)(l));
    };
});
var interSegmentLine = new Intersectable(function (v) {
    return function (l) {
        var hl = halfline(v.origin)(vector(v.origin)(v.extremity));
        return Data_Array.filter(function (p) {
            return cosAngle(vector(v.extremity)(p))(vector(v.extremity)(v.origin)) >= 0.0;
        })(meets(interHalfLineLine)(hl)(l));
    };
});
var interLineSegment = new Intersectable(function (l) {
    return function (s) {
        return meets(interSegmentLine)(s)(l);
    };
});
var interSegmentHalfLine = new Intersectable(function (s) {
    return function (v) {
        var l = line(v.origin)(plus(summublePointVector)(v.origin)(v.direction));
        return Data_Array.filter(function (p) {
            return cosAngle(vector(v.origin)(p))(v.direction) >= 0.0;
        })(meets(interSegmentLine)(s)(l));
    };
});
var interHalfLineSegment = new Intersectable(function (hl) {
    return function (s) {
        return meets(interSegmentHalfLine)(s)(hl);
    };
});
var interSegmentSegment = new Intersectable(function (v) {
    return function (s) {
        var hl = halfline(v.origin)(vector(v.origin)(v.extremity));
        return Data_Array.filter(function (p) {
            return cosAngle(vector(v.extremity)(p))(vector(v.extremity)(v.origin)) >= 0.0;
        })(meets(interHalfLineSegment)(hl)(s));
    };
});
var drawRightAngle = new DrawableSet(function (v) {
    return function (v1) {
        var w = scale(v1.radius / length(measurableVector)(v1.extremity))(v1.origin);
        var v2 = scale(v1.radius / length(measurableVector)(v1.extremity))(v1.extremity);
        var u = plus(summableVectorVector)(v2)(w);
        var o = plus(summublePointVector)(v1.center)(w);
        var n = plus(summublePointVector)(v1.center)(v2);
        var m = plus(summublePointVector)(v1.center)(u);
        return Graphics_Drawing.outlined(Data_Semigroup.append(Graphics_Drawing.semigroupOutlineStyle)(Graphics_Drawing.outlineColor(v.color))(Graphics_Drawing.lineWidth(v.lineWidth)))(Graphics_Drawing.path(Data_Foldable.foldableArray)([ {
            x: abs(basedPoint)(o),
            y: ord(basedPoint)(o)
        }, {
            x: abs(basedPoint)(m),
            y: ord(basedPoint)(m)
        }, {
            x: abs(basedPoint)(n),
            y: ord(basedPoint)(n)
        } ]));
    };
});
var measurableSegment = new Measurable(function (v) {
    return length(measurableVector)(vector(v.origin)(v.extremity));
});
var normalized = function (v) {
    return scale(1.0 / length(measurableVector)(v))(v);
};
var normalTo = function (v) {
    return Vector(Data_Semiring.add(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(Data_Sparse_Polynomial.monoPol(-ord(basedVector)(v))(0))(Data_Sparse_Polynomial.monoPol(abs(basedVector)(v))(1)));
};
var projection = function (direction) {
    return function (v) {
        return scale((abs(basedVector)(v) * abs(basedVector)(direction) + ord(basedVector)(v) * ord(basedVector)(direction)) / (length(measurableVector)(direction) * length(measurableVector)(direction)))(direction);
    };
};
var rotated = function (ang) {
    return function (v) {
        return Vector(Data_Semiring.add(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(Data_Sparse_Polynomial.monoPol(abs(basedVector)(v) * $$Math.cos(ang) - ord(basedVector)(v) * $$Math.sin(ang))(0))(Data_Sparse_Polynomial.monoPol(abs(basedVector)(v) * $$Math.sin(ang) + ord(basedVector)(v) * $$Math.cos(ang))(1)));
    };
};
var arrowTip = function (v) {
    var v1 = vector(v.origin)(v.extremity);
    var v0 = Vector(Data_Sparse_Polynomial.monoPol(length(measurableVector)(v1))(0));
    var ang = $$Math.atan2(ord(basedVector)(v1))(abs(basedVector)(v1));
    var f = function (theta) {
        var v11 = rotated(theta)(Vector(Data_Sparse_Polynomial.monoPol(arrowLength)(0)));
        return plus(summublePointVector)(v.origin)(rotated(ang)(plus(summableVectorVector)(v11)(v0)));
    };
    return {
        at1: f($$Math.pi - arrowBluntness),
        at2: f($$Math.pi + arrowBluntness)
    };
};
var drawableArc = new DrawableSet(function (v) {
    return function (v1) {
        var start = (function () {
            if (v1.swapped) {
                return $$Math.atan2(ord(basedVector)(v1.extremity))(abs(basedVector)(v1.extremity));
            };
            return $$Math.atan2(ord(basedVector)(v1.origin))(abs(basedVector)(v1.origin));
        })();
        var end = (function () {
            if (v1.swapped) {
                return $$Math.atan2(ord(basedVector)(v1.origin))(abs(basedVector)(v1.origin));
            };
            return $$Math.atan2(ord(basedVector)(v1.extremity))(abs(basedVector)(v1.extremity));
        })();
        return Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(Graphics_Drawing.outlined(Data_Semigroup.append(Graphics_Drawing.semigroupOutlineStyle)(Graphics_Drawing.outlineColor(v.color))(Graphics_Drawing.lineWidth(v.lineWidth)))(Graphics_Drawing.arc(abs(basedPoint)(v1.center))(ord(basedPoint)(v1.center))(start)(end)(v1.radius)))((function () {
            var v2 = scale(v1.radius / length(measurableVector)(v1.extremity))(v1.extremity);
            var m = plus(summublePointVector)(v1.center)(v2);
            var d = 0.8 - 4.0e-3 * v1.radius;
            var p = plus(summableVectorVector)(plus(summableVectorVector)(scale((function () {
                if (v1.flipped) {
                    return d;
                };
                return -d;
            })())(v2))(v1.origin))(scale(-1.0)(projection(v1.extremity)(v1.origin)));
            var n = plus(summublePointVector)(m)(scale((function () {
                if (v1.flipped) {
                    return -1.0;
                };
                return 1.0;
            })())(p));
            var v3 = arrowTip(segment(n)(m)(Data_Maybe.Nothing.value));
            return Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(Graphics_Drawing.filled(Graphics_Drawing.fillColor(v.color))(Data_Maybe.maybe(Data_Monoid.mempty(Graphics_Drawing.monoidShape))(function (str) {
                return Graphics_Drawing.closed(Data_Foldable.foldableArray)([ {
                    x: abs(basedPoint)(v3.at2),
                    y: ord(basedPoint)(v3.at2)
                }, {
                    x: abs(basedPoint)(m),
                    y: ord(basedPoint)(m)
                }, {
                    x: abs(basedPoint)(v3.at1),
                    y: ord(basedPoint)(v3.at1)
                } ]);
            })(v1.asOriented)))((function () {
                var u = scale(v1.radius / length(measurableVector)(v1.origin))(v1.origin);
                var uv = plus(summableVectorVector)(u)(v2);
                var i = plus(summublePointVector)(v1.center)(scale((v1.radius * 0.8) / length(measurableVector)(uv))(plus(summableVectorVector)(u)(v2)));
                return Data_Maybe.maybe(Data_Monoid.mempty(Graphics_Drawing.monoidDrawing))(function (str) {
                    return Graphics_Drawing.text(Graphics_Drawing_Font.font(Graphics_Drawing_Font.fantasy)(25)(Data_Monoid.mempty(Graphics_Drawing_Font.monoidFontOptions)))(abs(basedPoint)(i))(ord(basedPoint)(i))(Graphics_Drawing.fillColor(v.color))(str);
                })(v1.asOriented);
            })());
        })());
    };
});
var drawableSegment = new DrawableSet(function (v) {
    return function (v1) {
        return Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(Graphics_Drawing.outlined(Data_Semigroup.append(Graphics_Drawing.semigroupOutlineStyle)(Graphics_Drawing.outlineColor(v.color))(Graphics_Drawing.lineWidth(v.lineWidth)))(Graphics_Drawing.path(Data_Foldable.foldableArray)([ {
            x: abs(basedPoint)(v1.origin),
            y: ord(basedPoint)(v1.origin)
        }, {
            x: abs(basedPoint)(v1.extremity),
            y: ord(basedPoint)(v1.extremity)
        } ])))(Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(Graphics_Drawing.filled(Graphics_Drawing.fillColor(v.color))(Data_Maybe.maybe(Data_Monoid.mempty(Graphics_Drawing.monoidShape))(function (str) {
            var v2 = arrowTip(v1);
            return Graphics_Drawing.closed(Data_Foldable.foldableArray)([ {
                x: abs(basedPoint)(v2.at1),
                y: ord(basedPoint)(v2.at1)
            }, {
                x: abs(basedPoint)(v1.extremity),
                y: ord(basedPoint)(v1.extremity)
            }, {
                x: abs(basedPoint)(v2.at2),
                y: ord(basedPoint)(v2.at2)
            } ]);
        })(v1.asOriented)))((function () {
            var m = middle("")(v1);
            return Data_Maybe.maybe(Data_Monoid.mempty(Graphics_Drawing.monoidDrawing))(function (str) {
                return Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(Graphics_Drawing.text(Graphics_Drawing_Font.font(Graphics_Drawing_Font.fantasy)(25)(Data_Monoid.mempty(Graphics_Drawing_Font.monoidFontOptions)))(abs(basedPoint)(m) + 10.0)(ord(basedPoint)(m) - 10.0)(Graphics_Drawing.fillColor(v.color))(str))(Graphics_Drawing.text(Graphics_Drawing_Font.font(Graphics_Drawing_Font.fantasy)(25)(Data_Monoid.mempty(Graphics_Drawing_Font.monoidFontOptions)))(abs(basedPoint)(m) + 10.0)(ord(basedPoint)(m) - 23.0)(Graphics_Drawing.fillColor(v.color))((function () {
                    var $156 = str === "";
                    if ($156) {
                        return "";
                    };
                    return "\ud83e\udc16";
                })()));
            })(v1.asOriented);
        })()));
    };
});
var showPoint = new Data_Show.Show(function (v) {
    return v.name + ("(" + (Data_Show.show(Data_Show.showNumber)(abs(basedPoint)(v)) + ("," + (Data_Show.show(Data_Show.showNumber)(ord(basedPoint)(v)) + ")"))));
});
var aVectorOfLine = function (v) {
    return Vector(Data_Semiring.add(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(Data_Sparse_Polynomial.monoPol(-v.b)(0))(Data_Sparse_Polynomial.monoPol(v.a)(1)));
};
var aPointOnLine = function (v) {
    return point("")((-v.a * v.c) / (v.a * v.a + v.b * v.b))((-v.b * v.c) / (v.a * v.a + v.b * v.b));
};
var drawableLine = new DrawableSet(function (ctx) {
    return function (l) {
        var v = aVectorOfLine(l);
        var m = aPointOnLine(l);
        return drawIn(drawableSequence(drawableHalfLine))(ctx)([ halfline(m)(v), halfline(m)(scale(-1.0)(v)) ]);
    };
});
var interLineCircle = new Intersectable(function (v) {
    return function (v1) {
        var u = aVectorOfLine(v);
        var m = aPointOnLine(v);
        var n = plus(summublePointVector)(m)(projection(u)(vector(m)(v1.center)));
        var ob = length(measurableVector)(vector(v1.center)(n));
        if (ob > v1.radius) {
            return [  ];
        };
        if (ob === v1.radius) {
            return [ n ];
        };
        if (Data_Boolean.otherwise) {
            var om = $$Math.sqrt(v1.radius * v1.radius - ob * ob);
            var v2 = scale(om / length(measurableVector)(u))(u);
            return [ plus(summublePointVector)(n)(v2), plus(summublePointVector)(n)(scale(-1.0)(v2)) ];
        };
        throw new Error("Failed pattern match at Graphics.Canvas.Geometry (line 201, column 10 - line 207, column 55): " + [ Data_Unit.unit.constructor.name ]);
    };
});
var interCircleLine = new Intersectable(function (c) {
    return function (l) {
        return meets(interLineCircle)(l)(c);
    };
});
var interCircleCircle = new Intersectable(function (v) {
    return function (v1) {
        var y1 = ord(basedPoint)(v1.center);
        var y0 = ord(basedPoint)(v.center);
        var x1 = abs(basedPoint)(v1.center);
        var x0 = abs(basedPoint)(v.center);
        var l = {
            a: 2.0 * (x0 - x1),
            b: 2.0 * (y0 - y1),
            c: ((((x1 * x1 - x0 * x0) + y1 * y1) - y0 * y0) + v.radius * v.radius) - v1.radius * v1.radius
        };
        return meets(interCircleLine)(v1)(l);
    };
});
var interHalfLineCircle = new Intersectable(function (v) {
    return function (c) {
        var l$prime = line(v.origin)(plus(summublePointVector)(v.origin)(v.direction));
        return Data_Array.filter(function (p) {
            return cosAngle(vector(v.origin)(p))(v.direction) >= 0.0;
        })(meets(interCircleLine)(c)(l$prime));
    };
});
var interCircleHalfLine = new Intersectable(function (c) {
    return function (hl) {
        return meets(interHalfLineCircle)(hl)(c);
    };
});
var interSegmentCircle = new Intersectable(function (v) {
    return function (c) {
        var hl = halfline(v.origin)(vector(v.origin)(v.extremity));
        return Data_Array.filter(function (p) {
            return cosAngle(vector(v.extremity)(p))(vector(v.extremity)(v.origin)) >= 0.0;
        })(meets(interHalfLineCircle)(hl)(c));
    };
});
var interCircleSegment = new Intersectable(function (c) {
    return function (s) {
        return meets(interSegmentCircle)(s)(c);
    };
});
module.exports = {
    Arc: Arc,
    Circle: Circle,
    HalfLine: HalfLine,
    Line: Line,
    Point: Point,
    RightAngle: RightAngle,
    Segment: Segment,
    Vector: Vector,
    Based: Based,
    DrawableSet: DrawableSet,
    Intersectable: Intersectable,
    Measurable: Measurable,
    Summable: Summable,
    aPointOnLine: aPointOnLine,
    aVectorOfLine: aVectorOfLine,
    abs: abs,
    arc: arc,
    arrowBluntness: arrowBluntness,
    arrowLength: arrowLength,
    arrowTip: arrowTip,
    circle: circle,
    coords: coords,
    cosAngle: cosAngle,
    drawIn: drawIn,
    halfline: halfline,
    length: length,
    line: line,
    meets: meets,
    middle: middle,
    normalTo: normalTo,
    normalized: normalized,
    ord: ord,
    plus: plus,
    point: point,
    projection: projection,
    rename: rename,
    rightangle: rightangle,
    rotated: rotated,
    scale: scale,
    segment: segment,
    vector: vector,
    showPoint: showPoint,
    basedPoint: basedPoint,
    basedVector: basedVector,
    measurableVector: measurableVector,
    measurableSegment: measurableSegment,
    summableVectorVector: summableVectorVector,
    summublePointVector: summublePointVector,
    interLineLine: interLineLine,
    interLineHalfLine: interLineHalfLine,
    interHalfLineLine: interHalfLineLine,
    interLineCircle: interLineCircle,
    interCircleLine: interCircleLine,
    interHalfLineCircle: interHalfLineCircle,
    interCircleHalfLine: interCircleHalfLine,
    interCircleCircle: interCircleCircle,
    interHalfLineHalfLine: interHalfLineHalfLine,
    interSegmentLine: interSegmentLine,
    interLineSegment: interLineSegment,
    interSegmentHalfLine: interSegmentHalfLine,
    interHalfLineSegment: interHalfLineSegment,
    interSegmentCircle: interSegmentCircle,
    interCircleSegment: interCircleSegment,
    interSegmentSegment: interSegmentSegment,
    drawablePoint: drawablePoint,
    drawableHalfLine: drawableHalfLine,
    drawableLine: drawableLine,
    drawableSegment: drawableSegment,
    drawableCircle: drawableCircle,
    drawableArc: drawableArc,
    drawRightAngle: drawRightAngle,
    drawableSequence: drawableSequence
};
