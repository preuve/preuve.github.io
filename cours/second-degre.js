// Generated by purs bundle 0.13.3
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqCharImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Type.Data.RowList"] = $PS["Type.Data.RowList"] || {};
  var exports = $PS["Type.Data.RowList"];
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];                
  var EqRecord = function (eqRecord) {
      this.eqRecord = eqRecord;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };                                           
  var eqRowNil = new EqRecord(function (v) {
      return function (v1) {
          return function (v2) {
              return true;
          };
      };
  });
  var eqRecord = function (dict) {
      return dict.eqRecord;
  };
  var eqRec = function (dictRowToList) {
      return function (dictEqRecord) {
          return new Eq(eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value));
      };
  };
  var eqNumber = new Eq($foreign.eqNumberImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq = function (dict) {
      return dict.eq;
  }; 
  var eqRowCons = function (dictEqRecord) {
      return function (dictCons) {
          return function (dictIsSymbol) {
              return function (dictEq) {
                  return new EqRecord(function (v) {
                      return function (ra) {
                          return function (rb) {
                              var tail = eqRecord(dictEqRecord)(Type_Data_RowList.RLProxy.value)(ra)(rb);
                              var key = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var get = Record_Unsafe.unsafeGet(key);
                              return eq(dictEq)(get(ra))(get(rb)) && tail;
                          };
                      };
                  });
              };
          };
      };
  };
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqRec"] = eqRec;
  exports["eqRowNil"] = eqRowNil;
  exports["eqRowCons"] = eqRowCons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                                                                                 
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 167, column 3 - line 170, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord (line 158, column 3 - line 161, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  exports["compare"] = compare;
  exports["min"] = min;
  exports["max"] = max;
  exports["clamp"] = clamp;
  exports["ordInt"] = ordInt;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  }; 
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["altMaybe"] = altMaybe;
  exports["eqMaybe"] = eqMaybe;
})(PS);
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS);
(function(exports) {
  "use strict";

  // module Math

  exports.abs = Math.abs;  

  exports.atan2 = function (y) {
    return function (x) {
      return Math.atan2(y, x);
    };
  };

  exports.ceil = Math.ceil;

  exports.cos = Math.cos;

  exports.floor = Math.floor;

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };

  exports.round = Math.round;

  exports.sin = Math.sin;

  exports.sqrt = Math.sqrt;    

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["atan2"] = $foreign.atan2;
  exports["ceil"] = $foreign.ceil;
  exports["cos"] = $foreign.cos;
  exports["floor"] = $foreign.floor;
  exports["round"] = $foreign.round;
  exports["sin"] = $foreign.sin;
  exports["sqrt"] = $foreign.sqrt;
  exports["remainder"] = $foreign.remainder;
  exports["pi"] = $foreign.pi;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Global = $PS["Global"];
  var $$Math = $PS["Math"];         
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  }; 
  var ceil = function ($25) {
      return unsafeClamp($$Math.ceil($25));
  };
  exports["ceil"] = ceil;
  exports["floor"] = floor;
  exports["round"] = round;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Color"] = $PS["Color"] || {};
  var exports = $PS["Color"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Int = $PS["Data.Int"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var $$Math = $PS["Math"];
  var HSLA = (function () {
      function HSLA(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      HSLA.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new HSLA(value0, value1, value2, value3);
                  };
              };
          };
      };
      return HSLA;
  })();
  var modPos = function (x) {
      return function (y) {
          return $$Math.remainder($$Math.remainder(x)(y) + y)(y);
      };
  };
  var rgba = function (red$prime) {
      return function (green$prime) {
          return function (blue$prime) {
              return function (alpha) {
                  var red = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(red$prime);
                  var r = Data_Int.toNumber(red) / 255.0;
                  var green = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(green$prime);
                  var g = Data_Int.toNumber(green) / 255.0;
                  var blue = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(blue$prime);
                  var maxChroma = Data_Ord.max(Data_Ord.ordInt)(Data_Ord.max(Data_Ord.ordInt)(red)(green))(blue);
                  var minChroma = Data_Ord.min(Data_Ord.ordInt)(Data_Ord.min(Data_Ord.ordInt)(red)(green))(blue);
                  var chroma = maxChroma - minChroma | 0;
                  var chroma$prime = Data_Int.toNumber(chroma) / 255.0;
                  var lightness = Data_Int.toNumber(maxChroma + minChroma | 0) / (255.0 * 2.0);
                  var saturation = (function () {
                      if (chroma === 0) {
                          return 0.0;
                      };
                      if (Data_Boolean.otherwise) {
                          return chroma$prime / (1.0 - $$Math.abs(2.0 * lightness - 1.0));
                      };
                      throw new Error("Failed pattern match at Color (line 157, column 5 - line 158, column 75): " + [  ]);
                  })();
                  var b = Data_Int.toNumber(blue) / 255.0;
                  var hue$prime = function (v) {
                      if (v === 0) {
                          return 0.0;
                      };
                      if (maxChroma === red) {
                          return modPos((g - b) / chroma$prime)(6.0);
                      };
                      if (maxChroma === green) {
                          return (b - r) / chroma$prime + 2.0;
                      };
                      if (Data_Boolean.otherwise) {
                          return (r - g) / chroma$prime + 4.0;
                      };
                      throw new Error("Failed pattern match at Color (line 148, column 5 - line 148, column 17): " + [ v.constructor.name ]);
                  };
                  var hue = 60.0 * hue$prime(chroma);
                  return new HSLA(hue, saturation, lightness, alpha);
              };
          };
      };
  };
  var rgb = function (r) {
      return function (g) {
          return function (b) {
              return rgba(r)(g)(b)(1.0);
          };
      };
  };
  var cssStringHSLA = function (v) {
      var toString = function (n) {
          return Data_Show.show(Data_Show.showNumber)(Data_Int.toNumber(Data_Int.round(100.0 * n)) / 100.0);
      };
      var saturation = toString(v.value1 * 100.0) + "%";
      var lightness = toString(v.value2 * 100.0) + "%";
      var hue = toString(v.value0);
      var alpha = Data_Show.show(Data_Show.showNumber)(v.value3);
      var $69 = v.value3 === 1.0;
      if ($69) {
          return "hsl(" + (hue + (", " + (saturation + (", " + (lightness + ")")))));
      };
      return "hsla(" + (hue + (", " + (saturation + (", " + (lightness + (", " + (alpha + ")")))))));
  };
  exports["rgb"] = rgb;
  exports["cssStringHSLA"] = cssStringHSLA;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];              
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];               
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var unlessM = function (dictMonad) {
      return function (mb) {
          return function (m) {
              return Control_Bind.bind(dictMonad.Bind1())(mb)(function (v) {
                  return Control_Applicative.unless(dictMonad.Applicative0())(v)(m);
              });
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
  exports["unlessM"] = unlessM;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                   
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };
  exports["Plus"] = Plus;
})(PS);
(function(exports) {
  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };
})(PS["DOM.Editor"] = PS["DOM.Editor"] || {});
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.createElement = function (localName) {
    return function (doc) {
      return function () {
        return doc.createElement(localName);
      };
    };
  };
})(PS["Web.DOM.Document"] = PS["Web.DOM.Document"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Web.DOM.Document"] = $PS["Web.DOM.Document"] || {};
  var exports = $PS["Web.DOM.Document"];
  var $foreign = $PS["Web.DOM.Document"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];     
  var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
  exports["toNonElementParentNode"] = toNonElementParentNode;
  exports["createElement"] = $foreign.createElement;
})(PS);
(function(exports) {
  "use strict";

  exports.setId = function (id) {
    return function (node) {
      return function () {
        node.id = id;
        return {};
      };
    };
  };

  exports.setAttribute = function (name) {
    return function (value) {
      return function (element) {
        return function () {
          element.setAttribute(name, value);
          return {};
        };
      };
    };
  };
})(PS["Web.DOM.Element"] = PS["Web.DOM.Element"] || {});
(function(exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];
      if (ty != null && value instanceof ty) {
        return just(value);
      }
      return nothing;
    } 
    var obj = value;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var $foreign = $PS["Web.DOM.Element"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];             
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;                                      
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Element");
  exports["fromNode"] = fromNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toNode"] = toNode;
  exports["toEventTarget"] = toEventTarget;
  exports["setId"] = $foreign.setId;
  exports["setAttribute"] = $foreign.setAttribute;
})(PS);
(function(exports) {
  "use strict";

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };

  exports.textContent = getEffProp("textContent");

  exports.setTextContent = function (value) {
    return function (node) {
      return function () {
        node.textContent = value;
        return {};
      };
    };
  };

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        return parent.appendChild(node);
      };
    };
  };
})(PS["Web.DOM.Node"] = PS["Web.DOM.Node"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Web.DOM.Node"] = $PS["Web.DOM.Node"] || {};
  var exports = $PS["Web.DOM.Node"];
  var $foreign = $PS["Web.DOM.Node"];
  exports["textContent"] = $foreign.textContent;
  exports["setTextContent"] = $foreign.setTextContent;
  exports["appendChild"] = $foreign.appendChild;
})(PS);
(function(exports) {
  "use strict";

  exports._getElementById = function (id) {
    return function (node) {
      return function () {
        return node.getElementById(id);
      };
    };
  };
})(PS["Web.DOM.NonElementParentNode"] = PS["Web.DOM.NonElementParentNode"] || {});
(function(exports) {
  "use strict";          

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];                                   
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Web.DOM.NonElementParentNode"] = $PS["Web.DOM.NonElementParentNode"] || {};
  var exports = $PS["Web.DOM.NonElementParentNode"];
  var $foreign = $PS["Web.DOM.NonElementParentNode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];                
  var getElementById = function (eid) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_getElementById"](eid);
      return function ($2) {
          return $0($1($2));
      };
  };
  exports["getElementById"] = getElementById;
})(PS);
(function(exports) {
  "use strict";

  exports._target = function (e) {
    return e.target;
  };
})(PS["Web.Event.Event"] = PS["Web.Event.Event"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];                                   
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Web.Event.Event"] = $PS["Web.Event.Event"] || {};
  var exports = $PS["Web.Event.Event"];
  var $foreign = $PS["Web.Event.Event"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Nullable = $PS["Data.Nullable"];                              
  var EventType = function (x) {
      return x;
  };
  var target = function ($4) {
      return Data_Nullable.toMaybe($foreign["_target"]($4));
  };                                    
  var newtypeEventType = new Data_Newtype.Newtype(function (n) {
      return n;
  }, EventType);
  exports["target"] = target;
  exports["newtypeEventType"] = newtypeEventType;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };

  exports.removeEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.removeEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
})(PS);
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Web.HTML.Event.EventTypes"] = $PS["Web.HTML.Event.EventTypes"] || {};
  var exports = $PS["Web.HTML.Event.EventTypes"];
  var click = "click";
  var change = "change";
  exports["change"] = change;
  exports["click"] = click;
})(PS);
(function(exports) {
  "use strict";

  exports._body = function (doc) {
    return function () {
      return doc.body;
    };
  };
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var $foreign = $PS["Web.HTML.HTMLDocument"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];      
  var toDocument = Unsafe_Coerce.unsafeCoerce;
  var body = (function () {
      var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($9) {
          return $8($foreign["_body"]($9));
      };
  })();
  exports["toDocument"] = toDocument;
  exports["body"] = body;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  exports["toNode"] = toNode;
})(PS);
(function(exports) {
  "use strict";

  // ----------------------------------------------------------------------------

  exports.value = function (input) {
    return function () {
      return input.value;
    };
  };

  exports.setValue = function (value) {
    return function (input) {
      return function () {
        input.value = value;
      };
    };
  };
})(PS["Web.HTML.HTMLInputElement"] = PS["Web.HTML.HTMLInputElement"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Web.HTML.HTMLInputElement"] = $PS["Web.HTML.HTMLInputElement"] || {};
  var exports = $PS["Web.HTML.HTMLInputElement"];
  var $foreign = $PS["Web.HTML.HTMLInputElement"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                                               
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");       
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  exports["fromElement"] = fromElement;
  exports["fromNode"] = fromNode;
  exports["value"] = $foreign.value;
  exports["setValue"] = $foreign.setValue;
})(PS);
(function(exports) {
  "use strict";

  // ----------------------------------------------------------------------------

  exports.value = function (select) {
    return function () {
      return select.value;
    };
  };
})(PS["Web.HTML.HTMLSelectElement"] = PS["Web.HTML.HTMLSelectElement"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Web.HTML.HTMLSelectElement"] = $PS["Web.HTML.HTMLSelectElement"] || {};
  var exports = $PS["Web.HTML.HTMLSelectElement"];
  var $foreign = $PS["Web.HTML.HTMLSelectElement"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                                   
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLSelectElement");
  exports["fromElement"] = fromElement;
  exports["value"] = $foreign.value;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };

  exports._requestAnimationFrame = function(fn) {
    return function(window) {
      return function() {
        return window.requestAnimationFrame(fn);
      };
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var RequestAnimationFrameId = function (x) {
      return x;
  };
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var requestAnimationFrame = function (fn) {
      var $33 = Data_Functor.map(Effect.functorEffect)(RequestAnimationFrameId);
      var $34 = $foreign["_requestAnimationFrame"](fn);
      return function ($35) {
          return $33($34($35));
      };
  };
  exports["toEventTarget"] = toEventTarget;
  exports["requestAnimationFrame"] = requestAnimationFrame;
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["DOM.Editor"] = $PS["DOM.Editor"] || {};
  var exports = $PS["DOM.Editor"];
  var $foreign = $PS["DOM.Editor"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Web_DOM_Document = $PS["Web.DOM.Document"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_DOM_Node = $PS["Web.DOM.Node"];
  var Web_DOM_NonElementParentNode = $PS["Web.DOM.NonElementParentNode"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Event_EventTypes = $PS["Web.HTML.Event.EventTypes"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_HTMLInputElement = $PS["Web.HTML.HTMLInputElement"];
  var Web_HTML_HTMLSelectElement = $PS["Web.HTML.HTMLSelectElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var toNode = Web_DOM_Element.toNode;
  var textContent = Web_DOM_Node.textContent;
  var setup = function __do() {
      var v = Web_HTML.window();
      var v1 = Web_HTML_Window.document(v)();
      var document = Web_HTML_HTMLDocument.toDocument(v1);
      var v2 = Web_HTML_HTMLDocument.body(v1)();
      var bodyRaw = Data_Maybe.fromJust()(v2);
      var body = Web_HTML_HTMLElement.toNode(bodyRaw);
      return {
          window: v,
          document: document,
          body: body
      };
  };
  var setTextContent = Web_DOM_Node.setTextContent;
  var setInputValue = function (str) {
      return function (input) {
          return Web_HTML_HTMLInputElement.setValue(str)(Data_Maybe.fromJust()(Web_HTML_HTMLInputElement.fromElement(Data_Maybe.fromJust()(Web_DOM_Element.fromNode(input)))));
      };
  };
  var setId = function (id) {
      return function (node) {
          return Web_DOM_Element.setId(id)(Data_Maybe.fromJust()(Web_DOM_Element.fromNode(node)));
      };
  };
  var setAttribute = function (key) {
      return function (val) {
          return function (node) {
              return Web_DOM_Element.setAttribute(key)(val)(Data_Maybe.fromJust()(Web_DOM_Element.fromNode(node)));
          };
      };
  };
  var selectedValueFromEvent = function (ev) {
      return Web_HTML_HTMLSelectElement.value(Data_Maybe.fromJust()(Web_HTML_HTMLSelectElement.fromElement(Data_Maybe.fromJust()(Web_DOM_Element.fromEventTarget(Data_Maybe.fromJust()(Web_Event_Event.target(ev)))))));
  };
  var inputedValueFromEvent = function (ev) {
      return Web_HTML_HTMLInputElement.value(Data_Maybe.fromJust()(Web_HTML_HTMLInputElement.fromElement(Data_Maybe.fromJust()(Web_DOM_Element.fromEventTarget(Data_Maybe.fromJust()(Web_Event_Event.target(ev)))))));
  };
  var inputedValue = function (node) {
      return Web_HTML_HTMLInputElement.value(Data_Maybe.fromJust()(Web_HTML_HTMLInputElement.fromNode(node)));
  };
  var getElementById = function (str) {
      return function (doc) {
          return Data_Functor.map(Effect.functorEffect)(function (x) {
              return Web_DOM_Element.toNode(Data_Maybe.fromJust()(x));
          })(Web_DOM_NonElementParentNode.getElementById(str)(Web_DOM_Document.toNonElementParentNode(doc)));
      };
  };
  var createElement = function (str) {
      return function (doc) {
          return Data_Functor.map(Effect.functorEffect)(Web_DOM_Element.toNode)(Web_DOM_Document.createElement(str)(doc));
      };
  };
  var click = Web_HTML_Event_EventTypes.click;
  var change = Web_HTML_Event_EventTypes.change;
  var appendChild = Web_DOM_Node.appendChild;
  var addEventListener = function (cb) {
      return function (ev) {
          return function (node) {
              return function __do() {
                  var v = Web_Event_EventTarget.eventListener(cb)();
                  var v1 = Web_Event_EventTarget.addEventListener(ev)(v)(false)(Web_DOM_Element.toEventTarget(Data_Maybe.fromJust()(Web_DOM_Element.fromNode(node))))();
                  return Data_Unit.unit;
              };
          };
      };
  };
  exports["addEventListener"] = addEventListener;
  exports["appendChild"] = appendChild;
  exports["change"] = change;
  exports["click"] = click;
  exports["createElement"] = createElement;
  exports["getElementById"] = getElementById;
  exports["inputedValue"] = inputedValue;
  exports["inputedValueFromEvent"] = inputedValueFromEvent;
  exports["selectedValueFromEvent"] = selectedValueFromEvent;
  exports["setAttribute"] = setAttribute;
  exports["setId"] = setId;
  exports["setInputValue"] = setInputValue;
  exports["setTextContent"] = setTextContent;
  exports["setup"] = setup;
  exports["textContent"] = textContent;
  exports["getContext2D"] = $foreign.getContext2D;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };   

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var tail = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var span = function (p) {
      return function (arr) {
          var go = function ($copy_i) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i) {
                  var v = index(arr)(i);
                  if (v instanceof Data_Maybe.Just) {
                      var $77 = p(v.value0);
                      if ($77) {
                          $copy_i = i + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return new Data_Maybe.Just(i);
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Data.Array (line 834, column 5 - line 836, column 25): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_i);
              };
              return $tco_result;
          };
          var breakIndex = go(0);
          if (breakIndex instanceof Data_Maybe.Just && breakIndex.value0 === 0) {
              return {
                  init: [  ],
                  rest: arr
              };
          };
          if (breakIndex instanceof Data_Maybe.Just) {
              return {
                  init: $foreign.slice(0)(breakIndex.value0)(arr),
                  rest: $foreign.slice(breakIndex.value0)($foreign.length(arr))(arr)
              };
          };
          if (breakIndex instanceof Data_Maybe.Nothing) {
              return {
                  init: arr,
                  rest: [  ]
              };
          };
          throw new Error("Failed pattern match at Data.Array (line 821, column 3 - line 827, column 30): " + [ breakIndex.constructor.name ]);
      };
  };
  var head = function (xs) {
      return index(xs)(0);
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var dropWhile = function (p) {
      return function (xs) {
          return (span(p)(xs)).rest;
      };
  };
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
  exports["dropWhile"] = dropWhile;
  exports["deleteBy"] = deleteBy;
  exports["range"] = $foreign.range;
  exports["length"] = $foreign.length;
  exports["filter"] = $foreign.filter;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  }; 
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };
  var ringNumber = new Ring(function () {
      return Data_Semiring.semiringNumber;
  }, $foreign.numSub);
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["negate"] = negate;
  exports["ringInt"] = ringInt;
  exports["ringNumber"] = ringNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Compactable"] = $PS["Data.Compactable"] || {};
  var exports = $PS["Data.Compactable"];           
  var Compactable = function (compact, separate) {
      this.compact = compact;
      this.separate = separate;
  };
  exports["Compactable"] = Compactable;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();                                                                                                   
  var fromRight = function (dictPartial) {
      return function (v) {
          if (v instanceof Right) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Either (line 261, column 1 - line 261, column 52): " + [ v.constructor.name ]);
      };
  };
  var fromLeft = function (dictPartial) {
      return function (v) {
          if (v instanceof Left) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Either (line 256, column 1 - line 256, column 51): " + [ v.constructor.name ]);
      };
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var hush = either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
  var isLeft = either(Data_Function["const"](true))(Data_Function["const"](false));
  var isRight = either(Data_Function["const"](false))(Data_Function["const"](true));
  exports["either"] = either;
  exports["isLeft"] = isLeft;
  exports["isRight"] = isRight;
  exports["fromLeft"] = fromLeft;
  exports["fromRight"] = fromRight;
  exports["hush"] = hush;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Filterable"] = $PS["Data.Filterable"] || {};
  var exports = $PS["Data.Filterable"];                      
  var Filterable = function (Compactable0, Functor1, filter, filterMap, partition, partitionMap) {
      this.Compactable0 = Compactable0;
      this.Functor1 = Functor1;
      this.filter = filter;
      this.filterMap = filterMap;
      this.partition = partition;
      this.partitionMap = partitionMap;
  };
  var filterMap = function (dict) {
      return dict.filterMap;
  };
  exports["Filterable"] = Filterable;
  exports["filterMap"] = filterMap;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($198) {
                      return $197(f($198));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable (line 129, column 1 - line 135, column 27): " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["fold"] = fold;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["sequence_"] = sequence_;
  exports["intercalate"] = intercalate;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  exports["FoldableWithIndex"] = FoldableWithIndex;
  exports["foldrWithIndex"] = foldrWithIndex;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function(exports) {
  "use strict";

  exports.defer = function (thunk) {
    var v = null;
    return function() {
      if (thunk === undefined) return v;

      v = thunk();
      thunk = undefined; // eslint-disable-line no-param-reassign
      return v;
    };
  };

  exports.force = function (l) {
    return l();
  };
})(PS["Data.Lazy"] = PS["Data.Lazy"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Lazy"] = $PS["Data.Lazy"] || {};
  var exports = $PS["Data.Lazy"];
  var $foreign = $PS["Data.Lazy"];
  var Data_Functor = $PS["Data.Functor"];
  var functorLazy = new Data_Functor.Functor(function (f) {
      return function (l) {
          return $foreign.defer(function (v) {
              return f($foreign.force(l));
          });
      };
  });
  exports["functorLazy"] = functorLazy;
  exports["defer"] = $foreign.defer;
  exports["force"] = $foreign.force;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                         
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($203) {
                  return $202(f($203));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($205) {
              return $204(rev($205));
          };
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var monoidList = new Data_Monoid.Monoid(function () {
      return semigroupList;
  }, Nil.value);
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 133, column 22 - line 135, column 61): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 140, column 22 - line 142, column 52): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;
  exports["monoidList"] = monoidList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["applicativeList"] = applicativeList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List_Types = $PS["Data.List.Types"];
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.List.Lazy.Types"] = $PS["Data.List.Lazy.Types"] || {};
  var exports = $PS["Data.List.Lazy.Types"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var List = function (x) {
      return x;
  };
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var nil = List(Data_Lazy.defer(function (v) {
      return Nil.value;
  }));             
  var newtypeList = new Data_Newtype.Newtype(function (n) {
      return n;
  }, List);
  var step = (function () {
      var $215 = Data_Newtype.unwrap(newtypeList);
      return function ($216) {
          return Data_Lazy.force($215($216));
      };
  })();   
  var lazyList = new Control_Lazy.Lazy(function (f) {
      return List(Data_Lazy.defer(function ($217) {
          return step(f($217));
      }));
  });
  var cons = function (x) {
      return function (xs) {
          return List(Data_Lazy.defer(function (v) {
              return new Cons(x, xs);
          }));
      };
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (b) {
              return function (a) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(b)(f(a));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (op) {
      var go = function ($copy_b) {
          return function ($copy_xs) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, xs) {
                  var v = step(xs);
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = op(b)(v.value0);
                      $copy_xs = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types (line 122, column 7 - line 124, column 40): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_xs);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (op) {
      return function (z) {
          return function (xs) {
              var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(cons))(nil);
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(op))(z)(rev(xs));
          };
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1((function () {
      var go = function (f) {
          return function (b) {
              return Control_Lazy.defer(lazyList)(function (v) {
                  var v1 = f(b);
                  if (v1.value1 instanceof Data_Maybe.Just) {
                      return cons(v1.value0)(go(f)(v1.value1.value0));
                  };
                  if (v1.value1 instanceof Data_Maybe.Nothing) {
                      return cons(v1.value0)(nil);
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types (line 146, column 28 - line 148, column 33): " + [ v1.constructor.name ]);
              });
          };
      };
      return go;
  })());
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, (function () {
      var go = function (f) {
          return function (b) {
              return Control_Lazy.defer(lazyList)(function (v) {
                  var v1 = f(b);
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return nil;
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return cons(v1.value0.value0)(go(f)(v1.value0.value1));
                  };
                  throw new Error("Failed pattern match at Data.List.Lazy.Types (line 152, column 28 - line 154, column 39): " + [ v1.constructor.name ]);
              });
          };
      };
      return go;
  })());
  exports["List"] = List;
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["step"] = step;
  exports["newtypeList"] = newtypeList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.List.Lazy"] = $PS["Data.List.Lazy"] || {};
  var exports = $PS["Data.List.Lazy"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Lazy = $PS["Data.Lazy"];
  var Data_List_Lazy_Types = $PS["Data.List.Lazy.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var filter = function (p) {
      var go = function ($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
              if (v instanceof Data_List_Lazy_Types.Nil) {
                  $tco_done = true;
                  return Data_List_Lazy_Types.Nil.value;
              };
              if (v instanceof Data_List_Lazy_Types.Cons) {
                  if (p(v.value0)) {
                      $tco_done = true;
                      return new Data_List_Lazy_Types.Cons(v.value0, filter(p)(v.value1));
                  };
                  if (Data_Boolean.otherwise) {
                      $copy_v = Data_List_Lazy_Types.step(v.value1);
                      return;
                  };
              };
              throw new Error("Failed pattern match at Data.List.Lazy (line 428, column 3 - line 428, column 15): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_v);
          };
          return $tco_result;
      };
      var $266 = Data_Functor.map(Data_Lazy.functorLazy)(go);
      var $267 = Data_Newtype.unwrap(Data_List_Lazy_Types.newtypeList);
      return function ($268) {
          return Data_List_Lazy_Types.List($266($267($268)));
      };
  };
  exports["filter"] = filter;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_List_Lazy = $PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = $PS["Data.List.Lazy.Types"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 612, column 1 - line 612, column 40): " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 577, column 18 - line 586, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 576, column 3 - line 576, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var isEmpty = function (v) {
      if (v instanceof Leaf) {
          return true;
      };
      return false;
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var filterWithKey = function (dictOrd) {
      return function (predicate) {
          var $758 = fromFoldable(dictOrd)(Data_List_Lazy_Types.foldableList);
          var $759 = Data_List_Lazy.filter(Data_Tuple.uncurry(predicate));
          var $760 = toUnfoldable(Data_List_Lazy_Types.unfoldableList);
          return function ($761) {
              return $758($759($760($761)));
          };
      };
  };
  var filter = function (dictOrd) {
      return function (predicate) {
          return filterWithKey(dictOrd)(Data_Function["const"](predicate));
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var asList = Control_Category.identity(Control_Category.categoryFn);
  var foldableWithIndexMap = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableMap;
  }, function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(Data_Tuple.uncurry(f))(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)((function () {
                  var $763 = Data_Function.flip(f);
                  return function ($764) {
                      return Data_Tuple.uncurry($763($764));
                  };
              })())(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Tuple.uncurry(f))(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  });
  var mapMaybeWithKey = function (dictOrd) {
      return function (f) {
          return Data_FoldableWithIndex.foldrWithIndex(foldableWithIndexMap)(function (k) {
              return function (a) {
                  return function (acc) {
                      return Data_Maybe.maybe(acc)(function (b) {
                          return insert(dictOrd)(k)(b)(acc);
                      })(f(k)(a));
                  };
              };
          })(empty);
      };
  };
  var mapMaybe = function (dictOrd) {
      var $765 = mapMaybeWithKey(dictOrd);
      return function ($766) {
          return $765(Data_Function["const"]($766));
      };
  }; 
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 549, column 15 - line 551, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)((function () {
                              var $769 = Data_Maybe.maybe(v.value1)(f(v.value1));
                              return function ($770) {
                                  return Data_Maybe.Just.create($769($770));
                              };
                          })())(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["toUnfoldable"] = toUnfoldable;
  exports["delete"] = $$delete;
  exports["unionWith"] = unionWith;
  exports["filter"] = filter;
  exports["mapMaybe"] = mapMaybe;
  exports["foldableWithIndexMap"] = foldableWithIndexMap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Unit = $PS["Data.Unit"];
  var isEmpty = function (v) {
      return Data_Map_Internal.isEmpty(v);
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  }; 
  var empty = Data_Map_Internal.empty;
  var $$delete = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal["delete"](dictOrd)(a)(v);
          };
      };
  };
  exports["empty"] = empty;
  exports["isEmpty"] = isEmpty;
  exports["insert"] = insert;
  exports["delete"] = $$delete;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.Sparse.Polynomial"] = $PS["Data.Sparse.Polynomial"] || {};
  var exports = $PS["Data.Sparse.Polynomial"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Poly = (function () {
      function Poly(value0) {
          this.value0 = value0;
      };
      Poly.create = function (value0) {
          return new Poly(value0);
      };
      return Poly;
  })();
  var semiringPoly = function (dictEq) {
      return function (dictSemiring) {
          return new Data_Semiring.Semiring(function (v) {
              return function (v1) {
                  return Poly.create(Data_Map_Internal.filter(Data_Ord.ordInt)(function (v2) {
                      return Data_Eq.notEq(dictEq)(v2)(Data_Semiring.zero(dictSemiring));
                  })(Data_Map_Internal.unionWith(Data_Ord.ordInt)(Data_Semiring.add(dictSemiring))(v.value0)(v1.value0)));
              };
          }, function (v) {
              return function (v1) {
                  return Poly.create(Data_Map_Internal.filter(Data_Ord.ordInt)(function (v2) {
                      return Data_Eq.notEq(dictEq)(v2)(Data_Semiring.zero(dictSemiring));
                  })(Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Map_Internal.unionWith(Data_Ord.ordInt)(Data_Semiring.add(dictSemiring)))(Data_Map_Internal.empty)(Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                      return Data_FoldableWithIndex.foldrWithIndex(Data_Map_Internal.foldableWithIndexMap)(function (j) {
                          return function (w) {
                              return function (acc) {
                                  return Data_Map_Internal.insert(Data_Ord.ordInt)(v2.value0 + j | 0)(Data_Semiring.mul(dictSemiring)(v2.value1)(w))(acc);
                              };
                          };
                      })(Data_Map_Internal.empty)(v1.value0);
                  })(Data_Map_Internal.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.value0)))));
              };
          }, Poly.create(Data_Map_Internal.singleton(0)(Data_Semiring.one(dictSemiring))), new Poly(Data_Map_Internal.empty));
      };
  }; 
  var query = function (dictSemiring) {
      return function (v) {
          return function (n) {
              return Data_Maybe.fromMaybe(Data_Semiring.zero(dictSemiring))(Data_Map_Internal.lookup(Data_Ord.ordInt)(n)(v.value0));
          };
      };
  };                                                         
  var monoPol = function (x) {
      return function (n) {
          return Poly.create(Data_Map_Internal.insert(Data_Ord.ordInt)(n)(x)(Data_Map_Internal.empty));
      };
  };                                                                                           
  var functorPoly = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Poly.create(Data_Map_Internal.mapMaybe(Data_Ord.ordInt)(function (v1) {
              return Data_Maybe.Just.create(f(v1));
          })(v.value0));
      };
  });
  var ringPoly = function (dictEq) {
      return function (dictSemiring) {
          return function (dictRing) {
              return new Data_Ring.Ring(function () {
                  return semiringPoly(dictEq)(dictRing.Semiring0());
              }, function (p1) {
                  return function (p2) {
                      return Data_Semiring.add(semiringPoly(dictEq)(dictRing.Semiring0()))(p1)(Data_Functor.map(functorPoly)(function (v) {
                          return Data_Semiring.mul(dictRing.Semiring0())(v)(Data_Ring.negate(dictRing)(Data_Semiring.one(dictRing.Semiring0())));
                      })(p2));
                  };
              });
          };
      };
  };
  exports["monoPol"] = monoPol;
  exports["query"] = query;
  exports["semiringPoly"] = semiringPoly;
  exports["ringPoly"] = ringPoly;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.singleton = function (c) {
    return c;
  };

  exports.length = function (s) {
    return s.length;
  };

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];                                                         
  var indexOf = $foreign["_indexOf"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = indexOf(v)(str);
          if (v1 instanceof Data_Maybe.Just && v1.value0 === 0) {
              return Data_Maybe.Just.create($foreign.drop($foreign.length(v))(str));
          };
          return Data_Maybe.Nothing.value;
      };
  };
  exports["stripPrefix"] = stripPrefix;
  exports["singleton"] = $foreign.singleton;
  exports["length"] = $foreign.length;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var fromCharCode = (function () {
      var $53 = Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar));
      return function ($54) {
          return Data_String_CodeUnits.singleton($53($54));
      };
  })();
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };
  var take = $foreign["_take"](takeFallback);
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  exports["drop"] = drop;
})(PS);
(function(exports) {
  "use strict";

  exports.now = function () {
    return Date.now();
  };
})(PS["Effect.Now"] = PS["Effect.Now"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Now"] = $PS["Effect.Now"] || {};
  var exports = $PS["Effect.Now"];
  var $foreign = $PS["Effect.Now"];
  exports["now"] = $foreign.now;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];          
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  exports["modify"] = modify;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.setInterval = function (ms) {
    return function (fn) {
      return function () {
        return setInterval(fn, ms);
      };
    };
  };

  exports.clearInterval = function (id) {
    return function () {
      clearInterval(id);
    };
  };
})(PS["Effect.Timer"] = PS["Effect.Timer"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Timer"] = $PS["Effect.Timer"] || {};
  var exports = $PS["Effect.Timer"];
  var $foreign = $PS["Effect.Timer"];
  exports["setInterval"] = $foreign.setInterval;
  exports["clearInterval"] = $foreign.clearInterval;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["FRP.Event.Class"] = $PS["FRP.Event.Class"] || {};
  var exports = $PS["FRP.Event.Class"];              
  var IsEvent = function (Alternative0, Filterable1, fix, fold, keepLatest, sampleOn) {
      this.Alternative0 = Alternative0;
      this.Filterable1 = Filterable1;
      this.fix = fix;
      this.fold = fold;
      this.keepLatest = keepLatest;
      this.sampleOn = sampleOn;
  };
  var sampleOn = function (dict) {
      return dict.sampleOn;
  };
  var fold = function (dict) {
      return dict.fold;
  };
  exports["IsEvent"] = IsEvent;
  exports["fold"] = fold;
  exports["sampleOn"] = sampleOn;
})(PS);
(function(exports) {
  "use strict";

  exports.reallyUnsafeRefEq = function (a) {
    return function (b) {
      return a === b;
    };
  };
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Unsafe.Reference"] = $PS["Unsafe.Reference"] || {};
  var exports = $PS["Unsafe.Reference"];
  var $foreign = $PS["Unsafe.Reference"];
  var unsafeRefEq = $foreign.reallyUnsafeRefEq;
  exports["unsafeRefEq"] = unsafeRefEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["FRP.Event"] = $PS["FRP.Event"] || {};
  var exports = $PS["FRP.Event"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Array = $PS["Data.Array"];
  var Data_Compactable = $PS["Data.Compactable"];
  var Data_Either = $PS["Data.Either"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];                
  var Event = function (x) {
      return x;
  };
  var subscribe = function (v) {
      return function (k) {
          return v((function () {
              var $79 = Data_Functor["void"](Effect.functorEffect);
              return function ($80) {
                  return $79(k($80));
              };
          })());
      };
  };
  var sampleOn = function (v) {
      return function (v1) {
          return function (k) {
              return function __do() {
                  var v2 = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                  var v3 = v(function (a) {
                      return Effect_Ref.write(new Data_Maybe.Just(a))(v2);
                  })();
                  var v4 = v1(function (f) {
                      return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(v2))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($81) {
                          return k(f($81));
                      }));
                  })();
                  return Control_Apply.applySecond(Effect.applyEffect)(v3)(v4);
              };
          };
      };
  };
  var makeEvent = Event;
  var keepLatest = function (v) {
      return function (k) {
          return function __do() {
              var v1 = Effect_Ref["new"](Data_Maybe.Nothing.value)();
              var v2 = v(function (inner) {
                  return function __do() {
                      Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(v1))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                      var v2 = subscribe(inner)(k)();
                      return Effect_Ref.write(new Data_Maybe.Just(v2))(v1)();
                  };
              })();
              return function __do() {
                  Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(v1))(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe))();
                  return v2();
              };
          };
      };
  };
  var functorEvent = new Data_Functor.Functor(function (f) {
      return function (v) {
          return function (k) {
              return v(function ($82) {
                  return k(f($82));
              });
          };
      };
  });
  var fold = function (f) {
      return function (v) {
          return function (b) {
              return function (k) {
                  return function __do() {
                      var v1 = Effect_Ref["new"](b)();
                      return v(function (a) {
                          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.modify(f(a))(v1))(k);
                      })();
                  };
              };
          };
      };
  };
  var filter = function (p) {
      return function (v) {
          return function (k) {
              return v(function (a) {
                  var $59 = p(a);
                  if ($59) {
                      return k(a);
                  };
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              });
          };
      };
  };
  var create = function __do() {
      var v = Effect_Ref["new"]([  ])();
      return {
          event: function (k) {
              return function __do() {
                  var v1 = Effect_Ref.modify(function (v1) {
                      return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v1)([ k ]);
                  })(v)();
                  return function __do() {
                      var v2 = Effect_Ref.modify(Data_Array.deleteBy(Unsafe_Reference.unsafeRefEq)(k))(v)();
                      return Data_Unit.unit;
                  };
              };
          },
          push: function (a) {
              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(v))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(function (k) {
                  return k(a);
              }));
          }
      };
  };
  var fix = function (f) {
      var v = Effect_Unsafe.unsafePerformEffect(create);
      var v1 = f(v.event);
      return function (k) {
          return function __do() {
              var v2 = subscribe(v1.input)(v.push)();
              var v3 = subscribe(v1.output)(k)();
              return Control_Apply.applySecond(Effect.applyEffect)(v2)(v3);
          };
      };
  };
  var compactableEvent = new Data_Compactable.Compactable(function (xs) {
      return Data_Functor.map(functorEvent)(function (x) {
          return Data_Maybe.fromJust()(x);
      })(filter(Data_Maybe.isJust)(xs));
  }, function (xs) {
      return {
          left: Data_Functor.map(functorEvent)(Data_Either.fromLeft())(filter(Data_Either.isLeft)(xs)),
          right: Data_Functor.map(functorEvent)(Data_Either.fromRight())(filter(Data_Either.isRight)(xs))
      };
  });
  var filterableEvent = new Data_Filterable.Filterable(function () {
      return compactableEvent;
  }, function () {
      return functorEvent;
  }, filter, function (f) {
      var $83 = Data_Functor.map(functorEvent)(function (x) {
          return Data_Maybe.fromJust()(x);
      });
      var $84 = filter(Data_Maybe.isJust);
      var $85 = Data_Functor.map(functorEvent)(f);
      return function ($86) {
          return $83($84($85($86)));
      };
  }, function (p) {
      return function (xs) {
          return {
              yes: filter(p)(xs),
              no: filter((function () {
                  var $87 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                  return function ($88) {
                      return $87(p($88));
                  };
              })())(xs)
          };
      };
  }, function (f) {
      return function (xs) {
          return {
              left: Data_Filterable.filterMap(filterableEvent)((function () {
                  var $89 = Data_Either.either(Data_Maybe.Just.create)(Data_Function["const"](Data_Maybe.Nothing.value));
                  return function ($90) {
                      return $89(f($90));
                  };
              })())(xs),
              right: Data_Filterable.filterMap(filterableEvent)(function ($91) {
                  return Data_Either.hush(f($91));
              })(xs)
          };
      };
  });
  var applyEvent = new Control_Apply.Apply(function () {
      return functorEvent;
  }, function (v) {
      return function (v1) {
          return function (k) {
              return function __do() {
                  var v2 = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                  var v3 = Effect_Ref["new"](Data_Maybe.Nothing.value)();
                  var v4 = v(function (a) {
                      return function __do() {
                          Effect_Ref.write(new Data_Maybe.Just(a))(v2)();
                          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(v3))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($92) {
                              return k(a($92));
                          }))();
                      };
                  })();
                  var v5 = v1(function (b) {
                      return function __do() {
                          Effect_Ref.write(new Data_Maybe.Just(b))(v3)();
                          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(v2))(Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function ($93) {
                              return k((function (v5) {
                                  return v5(b);
                              })($93));
                          }))();
                      };
                  })();
                  return Control_Apply.applySecond(Effect.applyEffect)(v4)(v5);
              };
          };
      };
  });
  var applicativeEvent = new Control_Applicative.Applicative(function () {
      return applyEvent;
  }, function (a) {
      return function (k) {
          return function __do() {
              k(a)();
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
      };
  });
  var altEvent = new Control_Alt.Alt(function () {
      return functorEvent;
  }, function (v) {
      return function (v1) {
          return function (k) {
              return function __do() {
                  var v2 = v(k)();
                  var v3 = v1(k)();
                  return Control_Apply.applySecond(Effect.applyEffect)(v2)(v3);
              };
          };
      };
  });
  var plusEvent = new Control_Plus.Plus(function () {
      return altEvent;
  }, function (v) {
      return Control_Applicative.pure(Effect.applicativeEffect)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
  });
  var alternativeEvent = new Control_Alternative.Alternative(function () {
      return applicativeEvent;
  }, function () {
      return plusEvent;
  });
  var eventIsEvent = new FRP_Event_Class.IsEvent(function () {
      return alternativeEvent;
  }, function () {
      return filterableEvent;
  }, fix, fold, keepLatest, sampleOn);
  exports["create"] = create;
  exports["makeEvent"] = makeEvent;
  exports["subscribe"] = subscribe;
  exports["functorEvent"] = functorEvent;
  exports["altEvent"] = altEvent;
  exports["eventIsEvent"] = eventIsEvent;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["FRP.Event.AnimationFrame"] = $PS["FRP.Event.AnimationFrame"] || {};
  var exports = $PS["FRP.Event.AnimationFrame"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var FRP_Event = $PS["FRP.Event"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var animationFrame = FRP_Event.makeEvent(function (k) {
      return function __do() {
          var v = Web_HTML.window();
          var v1 = Effect_Ref["new"](false)();
          var loop = Data_Functor["void"](Effect.functorEffect)(Web_HTML_Window.requestAnimationFrame(function __do() {
              k(Data_Unit.unit)();
              return Control_Monad.unlessM(Effect.monadEffect)(Effect_Ref.read(v1))(loop)();
          })(v));
          loop();
          return Effect_Ref.write(true)(v1);
      };
  });
  exports["animationFrame"] = animationFrame;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["FRP.Behavior"] = $PS["FRP.Behavior"] || {};
  var exports = $PS["FRP.Behavior"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_AnimationFrame = $PS["FRP.Event.AnimationFrame"];
  var FRP_Event_Class = $PS["FRP.Event.Class"];
  var step = function (dictIsEvent) {
      return function (a) {
          return function (e) {
              return FRP_Event_Class.sampleOn(dictIsEvent)(Control_Alt.alt(((dictIsEvent.Alternative0()).Plus1()).Alt0())(Control_Applicative.pure((dictIsEvent.Alternative0()).Applicative0())(a))(e));
          };
      };
  };
  var unfold = function (dictIsEvent) {
      return function (f) {
          return function (e) {
              return function (a) {
                  return step(dictIsEvent)(a)(FRP_Event_Class.fold(dictIsEvent)(f)(e)(a));
              };
          };
      };
  };
  var sample = function (v) {
      return function (e) {
          return v(e);
      };
  };
  var functorABehavior = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (e) {
                  return v(Data_Functor.map(dictFunctor)(function (v1) {
                      return function ($66) {
                          return v1(f($66));
                      };
                  })(e));
              };
          };
      });
  };
  var sampleBy = function (dictIsEvent) {
      return function (f) {
          return function (b) {
              return function (e) {
                  return sample(Data_Functor.map(functorABehavior((dictIsEvent.Filterable1()).Functor1()))(f)(b))(Data_Functor.map((dictIsEvent.Filterable1()).Functor1())(Data_Function.applyFlipped)(e));
              };
          };
      };
  };
  var sample_ = function (dictIsEvent) {
      return sampleBy(dictIsEvent)(Data_Function["const"]);
  };
  var applyABehavior = function (dictFunctor) {
      return new Control_Apply.Apply(function () {
          return functorABehavior(dictFunctor);
      }, function (v) {
          return function (v1) {
              return function (e) {
                  return v1(v(Data_Functor.map(dictFunctor)(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn))(e)));
              };
          };
      });
  };
  var semigroupABehavior = function (dictFunctor) {
      return function (dictSemigroup) {
          return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyABehavior(dictFunctor))(Data_Semigroup.append(dictSemigroup)));
      };
  };
  var applicativeABehavior = function (dictFunctor) {
      return new Control_Applicative.Applicative(function () {
          return applyABehavior(dictFunctor);
      }, function (a) {
          return function (e) {
              return Data_Functor.map(dictFunctor)(Data_Function.applyFlipped(a))(e);
          };
      });
  };
  var animate = function (scene) {
      return function (render) {
          return FRP_Event.subscribe(sample_(FRP_Event.eventIsEvent)(scene)(FRP_Event_AnimationFrame.animationFrame))(render);
      };
  };
  exports["unfold"] = unfold;
  exports["animate"] = animate;
  exports["applicativeABehavior"] = applicativeABehavior;
  exports["semigroupABehavior"] = semigroupABehavior;
})(PS);
(function(exports) {
  "use strict";

  exports.clientX = function (e) {
    return e.clientX;
  };

  exports.clientY = function (e) {
    return e.clientY;
  };

  exports.button = function (e) {
    return e.button;
  };
})(PS["Web.UIEvent.MouseEvent"] = PS["Web.UIEvent.MouseEvent"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Web.UIEvent.MouseEvent"] = $PS["Web.UIEvent.MouseEvent"] || {};
  var exports = $PS["Web.UIEvent.MouseEvent"];
  var $foreign = $PS["Web.UIEvent.MouseEvent"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                        
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("MouseEvent");
  exports["fromEvent"] = fromEvent;
  exports["clientX"] = $foreign.clientX;
  exports["clientY"] = $foreign.clientY;
  exports["button"] = $foreign.button;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["FRP.Event.Mouse"] = $PS["FRP.Event.Mouse"] || {};
  var exports = $PS["FRP.Event.Mouse"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Set = $PS["Data.Set"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var FRP_Event = $PS["FRP.Event"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var Web_UIEvent_MouseEvent = $PS["Web.UIEvent.MouseEvent"];
  var withPosition = function (v) {
      return function (e) {
          return FRP_Event.makeEvent(function (k) {
              return FRP_Event.subscribe(e)(function (value) {
                  return function __do() {
                      var v1 = Effect_Ref.read(v.position)();
                      return k({
                          value: value,
                          pos: v1
                      })();
                  };
              });
          });
      };
  };
  var withButtons = function (v) {
      return function (e) {
          return FRP_Event.makeEvent(function (k) {
              return FRP_Event.subscribe(e)(function (value) {
                  return function __do() {
                      var v1 = Effect_Ref.read(v.buttons)();
                      return k({
                          value: value,
                          buttons: v1
                      })();
                  };
              });
          });
      };
  };
  var getMouse = function __do() {
      var v = Effect_Ref["new"](Data_Maybe.Nothing.value)();
      var v1 = Effect_Ref["new"](Data_Set.empty)();
      var v2 = Data_Functor.map(Effect.functorEffect)(Web_HTML_Window.toEventTarget)(Web_HTML.window)();
      var v3 = Web_Event_EventTarget.eventListener(function (e) {
          return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (me) {
              return Effect_Ref.write(new Data_Maybe.Just({
                  x: Web_UIEvent_MouseEvent.clientX(me),
                  y: Web_UIEvent_MouseEvent.clientY(me)
              }))(v);
          })(Web_UIEvent_MouseEvent.fromEvent(e));
      })();
      var v4 = Web_Event_EventTarget.eventListener(function (e) {
          return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (me) {
              return Effect_Ref.modify(Data_Set.insert(Data_Ord.ordInt)(Web_UIEvent_MouseEvent.button(me)))(v1);
          })(Web_UIEvent_MouseEvent.fromEvent(e));
      })();
      var v5 = Web_Event_EventTarget.eventListener(function (e) {
          return Data_Foldable.traverse_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(function (me) {
              return Effect_Ref.modify(Data_Set["delete"](Data_Ord.ordInt)(Web_UIEvent_MouseEvent.button(me)))(v1);
          })(Web_UIEvent_MouseEvent.fromEvent(e));
      })();
      Web_Event_EventTarget.addEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mousemove"))(v3)(false)(v2)();
      Web_Event_EventTarget.addEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mousedown"))(v4)(false)(v2)();
      Web_Event_EventTarget.addEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mouseup"))(v5)(false)(v2)();
      var dispose = function __do() {
          Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mousemove"))(v3)(false)(v2)();
          Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mousedown"))(v4)(false)(v2)();
          return Web_Event_EventTarget.removeEventListener(Data_Newtype.wrap(Web_Event_Event.newtypeEventType)("mouseup"))(v5)(false)(v2)();
      };
      return {
          position: v,
          buttons: v1,
          dispose: dispose
      };
  };
  exports["getMouse"] = getMouse;
  exports["withPosition"] = withPosition;
  exports["withButtons"] = withButtons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["FRP.Event.Time"] = $PS["FRP.Event.Time"] || {};
  var exports = $PS["FRP.Event.Time"];
  var Effect_Now = $PS["Effect.Now"];
  var Effect_Timer = $PS["Effect.Timer"];
  var FRP_Event = $PS["FRP.Event"];
  var interval = function (n) {
      return FRP_Event.makeEvent(function (k) {
          return function __do() {
              var v = Effect_Timer.setInterval(n)(function __do() {
                  var v = Effect_Now.now();
                  return k(v)();
              })();
              return Effect_Timer.clearInterval(v);
          };
      });
  };
  exports["interval"] = interval;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.setLineWidth = function(ctx) {
      return function(width) {
          return function() {
              ctx.lineWidth = width;
          };
      };
  };

  exports.setFillStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.fillStyle = style;
          };
      };
  };

  exports.setStrokeStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.strokeStyle = style;
          };
      };
  };

  exports.setShadowColor = function(ctx) {
      return function(color) {
          return function() {
              ctx.shadowColor = color;
          };
      };
  };

  exports.setShadowBlur = function(ctx) {
      return function(blur) {
          return function() {
              ctx.shadowBlur = blur;
          };
      };
  };

  exports.setShadowOffsetX = function(ctx) {
      return function(offsetX) {
          return function() {
              ctx.shadowOffsetX = offsetX;
          };
      };
  };

  exports.setShadowOffsetY = function(ctx) {
      return function(offsetY) {
          return function() {
              ctx.shadowOffsetY = offsetY;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
      };
  };

  exports.clip = function(ctx) {
      return function() {
          ctx.clip();
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
              };
          };
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.radius, a.start, a.end);
          };
      };
  };

  exports.rect = function(ctx) {
      return function(r) {
          return function() {
              ctx.rect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.scale = function(ctx) {
      return function(t) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
          };
      };
  };

  exports.rotate = function(ctx) {
      return function(angle) {
          return function() {
              ctx.rotate(angle);
          };
      };
  };

  exports.translate = function(ctx) {
      return function(t) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
          };
      };
  };

  exports.setFont = function(ctx) {
      return function(fontspec) {
          return function() {
              ctx.font = fontspec;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                  };
              };
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              var v = $foreign.save(ctx)();
              var v1 = action();
              var v2 = $foreign.restore(ctx)();
              return v1;
          };
      };
  };
  var strokePath = function (ctx) {
      return function (path) {
          return function __do() {
              var v = $foreign.beginPath(ctx)();
              var v1 = path();
              var v2 = $foreign.stroke(ctx)();
              return v1;
          };
      };
  };
  var fillPath = function (ctx) {
      return function (path) {
          return function __do() {
              var v = $foreign.beginPath(ctx)();
              var v1 = path();
              var v2 = $foreign.fill(ctx)();
              return v1;
          };
      };
  };
  exports["strokePath"] = strokePath;
  exports["fillPath"] = fillPath;
  exports["withContext"] = withContext;
  exports["setLineWidth"] = $foreign.setLineWidth;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["setShadowBlur"] = $foreign.setShadowBlur;
  exports["setShadowOffsetX"] = $foreign.setShadowOffsetX;
  exports["setShadowOffsetY"] = $foreign.setShadowOffsetY;
  exports["setShadowColor"] = $foreign.setShadowColor;
  exports["clip"] = $foreign.clip;
  exports["lineTo"] = $foreign.lineTo;
  exports["moveTo"] = $foreign.moveTo;
  exports["closePath"] = $foreign.closePath;
  exports["arc"] = $foreign.arc;
  exports["rect"] = $foreign.rect;
  exports["scale"] = $foreign.scale;
  exports["rotate"] = $foreign.rotate;
  exports["translate"] = $foreign.translate;
  exports["setFont"] = $foreign.setFont;
  exports["fillText"] = $foreign.fillText;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Drawing.Font"] = $PS["Graphics.Drawing.Font"] || {};
  var exports = $PS["Graphics.Drawing.Font"];
  var Control_Alt = $PS["Control.Alt"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Font = (function () {
      function Font(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Font.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Font(value0, value1, value2);
              };
          };
      };
      return Font;
  })();               
  var semigroupFontOptions = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return {
              style: Control_Alt.alt(Data_Maybe.altMaybe)(v.style)(v1.style),
              variant: Control_Alt.alt(Data_Maybe.altMaybe)(v.variant)(v1.variant),
              weight: Control_Alt.alt(Data_Maybe.altMaybe)(v.weight)(v1.weight)
          };
      };
  });                          
  var optionsString = function (v) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")([ Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.style), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.variant), Data_Foldable.fold(Data_Foldable.foldableMaybe)(Data_Monoid.monoidString)(v.weight) ]);
  };                          
  var monoidFontOptions = new Data_Monoid.Monoid(function () {
      return semigroupFontOptions;
  }, {
      style: Data_Maybe.Nothing.value,
      variant: Data_Maybe.Nothing.value,
      weight: Data_Maybe.Nothing.value
  });
  var fontString = function (v) {
      return optionsString(v.value2) + (" " + (Data_Show.show(Data_Show.showInt)(v.value1) + ("px " + v.value0)));
  };
  var font = Font.create;
  var fantasy = "fantasy";
  exports["font"] = font;
  exports["fontString"] = fontString;
  exports["fantasy"] = fantasy;
  exports["monoidFontOptions"] = monoidFontOptions;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Drawing"] = $PS["Graphics.Drawing"] || {};
  var exports = $PS["Graphics.Drawing"];
  var Color = $PS["Color"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var Graphics_Drawing_Font = $PS["Graphics.Drawing.Font"];
  var $$Math = $PS["Math"];
  var Path = (function () {
      function Path(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Path.create = function (value0) {
          return function (value1) {
              return new Path(value0, value1);
          };
      };
      return Path;
  })();
  var Rectangle = (function () {
      function Rectangle(value0) {
          this.value0 = value0;
      };
      Rectangle.create = function (value0) {
          return new Rectangle(value0);
      };
      return Rectangle;
  })();
  var Arc = (function () {
      function Arc(value0) {
          this.value0 = value0;
      };
      Arc.create = function (value0) {
          return new Arc(value0);
      };
      return Arc;
  })();
  var Composite = (function () {
      function Composite(value0) {
          this.value0 = value0;
      };
      Composite.create = function (value0) {
          return new Composite(value0);
      };
      return Composite;
  })();
  var Fill = (function () {
      function Fill(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Fill.create = function (value0) {
          return function (value1) {
              return new Fill(value0, value1);
          };
      };
      return Fill;
  })();
  var Outline = (function () {
      function Outline(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Outline.create = function (value0) {
          return function (value1) {
              return new Outline(value0, value1);
          };
      };
      return Outline;
  })();
  var Text = (function () {
      function Text(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Text.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Text(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Text;
  })();
  var Many = (function () {
      function Many(value0) {
          this.value0 = value0;
      };
      Many.create = function (value0) {
          return new Many(value0);
      };
      return Many;
  })();
  var Scale = (function () {
      function Scale(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Scale.create = function (value0) {
          return function (value1) {
              return new Scale(value0, value1);
          };
      };
      return Scale;
  })();
  var Translate = (function () {
      function Translate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Translate.create = function (value0) {
          return function (value1) {
              return new Translate(value0, value1);
          };
      };
      return Translate;
  })();
  var Rotate = (function () {
      function Rotate(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Rotate.create = function (value0) {
          return function (value1) {
              return new Rotate(value0, value1);
          };
      };
      return Rotate;
  })();
  var Clipped = (function () {
      function Clipped(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Clipped.create = function (value0) {
          return function (value1) {
              return new Clipped(value0, value1);
          };
      };
      return Clipped;
  })();
  var WithShadow = (function () {
      function WithShadow(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      WithShadow.create = function (value0) {
          return function (value1) {
              return new WithShadow(value0, value1);
          };
      };
      return WithShadow;
  })();
  var translate = function (tx) {
      return function (ty) {
          return Translate.create({
              translateX: tx,
              translateY: ty
          });
      };
  };
  var text = Text.create;        
  var semigroupShape = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Composite) {
              return new Composite(Data_Semigroup.append(Data_List_Types.semigroupList)(v.value0)(Data_List.singleton(v1)));
          };
          if (v1 instanceof Composite) {
              return new Composite(new Data_List_Types.Cons(v, v1.value0));
          };
          return new Composite(new Data_List_Types.Cons(v, new Data_List_Types.Cons(v1, Data_List_Types.Nil.value)));
      };
  });
  var semigroupOutlineStyle = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return {
              color: Control_Alt.alt(Data_Maybe.altMaybe)(v.color)(v1.color),
              lineWidth: Control_Alt.alt(Data_Maybe.altMaybe)(v.lineWidth)(v1.lineWidth)
          };
      };
  });
  var semigroupDrawing = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Many) {
              return new Many(Data_Semigroup.append(Data_List_Types.semigroupList)(v.value0)(Data_List.singleton(v1)));
          };
          if (v1 instanceof Many) {
              return new Many(new Data_List_Types.Cons(v, v1.value0));
          };
          return new Many(new Data_List_Types.Cons(v, new Data_List_Types.Cons(v1, Data_List_Types.Nil.value)));
      };
  });
  var scale = function (sx) {
      return function (sy) {
          return Scale.create({
              scaleX: sx,
              scaleY: sy
          });
      };
  };
  var rotate = Rotate.create;
  var render = function (ctx) {
      var renderShape = function (v) {
          if (v instanceof Path && v.value1 instanceof Data_List_Types.Nil) {
              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
          };
          if (v instanceof Path && v.value1 instanceof Data_List_Types.Cons) {
              return function __do() {
                  var v1 = Graphics_Canvas.moveTo(ctx)(v.value1.value0.x)(v.value1.value0.y)();
                  Data_Foldable.for_(Effect.applicativeEffect)(Data_List_Types.foldableList)(v.value1.value1)(function (pt) {
                      return Graphics_Canvas.lineTo(ctx)(pt.x)(pt.y);
                  })();
                  return Control_Applicative.when(Effect.applicativeEffect)(v.value0)(Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.closePath(ctx)))();
              };
          };
          if (v instanceof Rectangle) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.rect(ctx)(v.value0));
          };
          if (v instanceof Arc) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.arc(ctx)(v.value0));
          };
          if (v instanceof Composite) {
              return Data_Foldable.for_(Effect.applicativeEffect)(Data_List_Types.foldableList)(v.value0)(renderShape);
          };
          throw new Error("Failed pattern match at Graphics.Drawing (line 268, column 3 - line 268, column 38): " + [ v.constructor.name ]);
      };
      var applyShadow = function (v) {
          return function __do() {
              Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
                  return Graphics_Canvas.setShadowColor(ctx)(Color.cssStringHSLA(color));
              })();
              Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.blur)(function (blur) {
                  return Graphics_Canvas.setShadowBlur(ctx)(blur);
              })();
              return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.offset)(function (offset) {
                  return function __do() {
                      var v1 = Graphics_Canvas.setShadowOffsetX(ctx)(offset.x)();
                      return Graphics_Canvas.setShadowOffsetY(ctx)(offset.y)();
                  };
              })();
          };
      };
      var applyOutlineStyle = function (v) {
          return function __do() {
              Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
                  return Graphics_Canvas.setStrokeStyle(ctx)(Color.cssStringHSLA(color));
              })();
              return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.lineWidth)(function (width) {
                  return Graphics_Canvas.setLineWidth(ctx)(width);
              })();
          };
      };
      var applyFillStyle = function (v) {
          return Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableMaybe)(v.color)(function (color) {
              return Graphics_Canvas.setFillStyle(ctx)(Color.cssStringHSLA(color));
          });
      };
      var go = function (v) {
          if (v instanceof Fill) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyFillStyle(v.value1)();
                  return Graphics_Canvas.fillPath(ctx)(renderShape(v.value0))();
              }));
          };
          if (v instanceof Outline) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyOutlineStyle(v.value1)();
                  return Graphics_Canvas.strokePath(ctx)(renderShape(v.value0))();
              }));
          };
          if (v instanceof Many) {
              return Data_Foldable.for_(Effect.applicativeEffect)(Data_List_Types.foldableList)(v.value0)(go);
          };
          if (v instanceof Scale) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
                  var v1 = Graphics_Canvas.scale(ctx)(v.value0)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Translate) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
                  var v1 = Graphics_Canvas.translate(ctx)(v.value0)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Rotate) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
                  var v1 = Graphics_Canvas.rotate(ctx)(v.value0)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Clipped) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
                  renderShape(v.value0)();
                  var v1 = Graphics_Canvas.clip(ctx)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof WithShadow) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
                  applyShadow(v.value0)();
                  return go(v.value1)();
              }));
          };
          if (v instanceof Text) {
              return Data_Functor["void"](Effect.functorEffect)(Graphics_Canvas.withContext(ctx)(function __do() {
                  var v1 = Graphics_Canvas.setFont(ctx)(Graphics_Drawing_Font.fontString(v.value0))();
                  applyFillStyle(v.value3)();
                  return Graphics_Canvas.fillText(ctx)(v.value4)(v.value1)(v.value2)();
              }));
          };
          throw new Error("Failed pattern match at Graphics.Drawing (line 221, column 3 - line 224, column 21): " + [ v.constructor.name ]);
      };
      return go;
  };
  var rectangle = function (x) {
      return function (y) {
          return function (width) {
              return function (height) {
                  return new Rectangle({
                      x: x,
                      y: y,
                      width: width,
                      height: height
                  });
              };
          };
      };
  };
  var path = function (dictFoldable) {
      var $211 = Path.create(false);
      var $212 = Data_List.fromFoldable(dictFoldable);
      return function ($213) {
          return $211($212($213));
      };
  };
  var outlined = Data_Function.flip(Outline.create);
  var outlineColor = function (c) {
      return {
          color: new Data_Maybe.Just(c),
          lineWidth: Data_Maybe.Nothing.value
      };
  };
  var monoidShape = new Data_Monoid.Monoid(function () {
      return semigroupShape;
  }, new Composite(Data_Monoid.mempty(Data_List_Types.monoidList)));
  var monoidDrawing = new Data_Monoid.Monoid(function () {
      return semigroupDrawing;
  }, new Many(Data_Monoid.mempty(Data_List_Types.monoidList)));
  var lineWidth = function (c) {
      return {
          color: Data_Maybe.Nothing.value,
          lineWidth: new Data_Maybe.Just(c)
      };
  };
  var filled = Data_Function.flip(Fill.create);
  var fillColor = function (c) {
      return {
          color: new Data_Maybe.Just(c)
      };
  }; 
  var closed = function (dictFoldable) {
      var $214 = Path.create(true);
      var $215 = Data_List.fromFoldable(dictFoldable);
      return function ($216) {
          return $214($215($216));
      };
  };                           
  var arc = function (x) {
      return function (y) {
          return function (start) {
              return function (end) {
                  return function (radius) {
                      return new Arc({
                          x: x,
                          y: y,
                          start: start,
                          end: end,
                          radius: radius
                      });
                  };
              };
          };
      };
  };
  var circle = function (x) {
      return function (y) {
          return arc(x)(y)(0.0)($$Math.pi * 2.0);
      };
  };
  exports["path"] = path;
  exports["closed"] = closed;
  exports["rectangle"] = rectangle;
  exports["circle"] = circle;
  exports["fillColor"] = fillColor;
  exports["outlineColor"] = outlineColor;
  exports["lineWidth"] = lineWidth;
  exports["filled"] = filled;
  exports["outlined"] = outlined;
  exports["text"] = text;
  exports["render"] = render;
  exports["monoidShape"] = monoidShape;
  exports["semigroupOutlineStyle"] = semigroupOutlineStyle;
  exports["semigroupDrawing"] = semigroupDrawing;
  exports["monoidDrawing"] = monoidDrawing;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Graphics.Canvas.Geometry"] = $PS["Graphics.Canvas.Geometry"] || {};
  var exports = $PS["Graphics.Canvas.Geometry"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Sparse_Polynomial = $PS["Data.Sparse.Polynomial"];
  var Data_Unit = $PS["Data.Unit"];
  var Graphics_Drawing = $PS["Graphics.Drawing"];
  var Graphics_Drawing_Font = $PS["Graphics.Drawing.Font"];
  var $$Math = $PS["Math"];                
  var Vector = function (x) {
      return x;
  };
  var Point = function (x) {
      return x;
  };
  var Line = function (x) {
      return x;
  };
  var Summable = function (plus) {
      this.plus = plus;
  };
  var Measurable = function (length) {
      this.length = length;
  };
  var Intersectable = function (meets) {
      this.meets = meets;
  };
  var DrawableSet = function (drawIn) {
      this.drawIn = drawIn;
  };
  var Based = function (abs, coords, ord) {
      this.abs = abs;
      this.coords = coords;
      this.ord = ord;
  };
  var vector = function (v) {
      return function (v1) {
          return Vector(Data_Ring.sub(Data_Sparse_Polynomial.ringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber)(Data_Ring.ringNumber))(v1.coordinates)(v.coordinates));
      };
  };
  var summableVectorVector = new Summable(function (v) {
      return function (v1) {
          return Vector(Data_Semiring.add(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(v)(v1));
      };
  });
  var segment = function (origin) {
      return function (extremity) {
          return function (asOriented) {
              return {
                  origin: origin,
                  extremity: extremity,
                  asOriented: asOriented
              };
          };
      };
  };
  var scale = function (k) {
      return function (v) {
          return Vector(Data_Semiring.mul(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(Data_Sparse_Polynomial.monoPol(k)(0))(v));
      };
  };
  var point = function (name) {
      return function (x) {
          return function (y) {
              return Point({
                  name: name,
                  coordinates: Data_Semiring.add(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(Data_Sparse_Polynomial.monoPol(x)(0))(Data_Sparse_Polynomial.monoPol(y)(1))
              });
          };
      };
  };
  var plus = function (dict) {
      return dict.plus;
  };
  var ord = function (dict) {
      return dict.ord;
  };
  var middle = function (name) {
      return function (v) {
          return {
              name: name,
              coordinates: Data_Semiring.mul(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(Data_Semiring.add(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(v.origin.coordinates)(v.extremity.coordinates))(Data_Sparse_Polynomial.monoPol(0.5)(0))
          };
      };
  };
  var meets = function (dict) {
      return dict.meets;
  };
  var length = function (dict) {
      return dict.length;
  };
  var interLineLine = new Intersectable(function (v) {
      return function (v1) {
          var delta = v.a * v1.b - v1.a * v.b;
          if (delta === 0.0) {
              return [  ];
          };
          if (Data_Boolean.otherwise) {
              return [ point("")((v.b * v1.c - v1.b * v.c) / delta)((v1.a * v.c - v.a * v1.c) / delta) ];
          };
          throw new Error("Failed pattern match at Graphics.Canvas.Geometry (line 181, column 8 - line 184, column 65): " + [ Data_Unit.unit.constructor.name ]);
      };
  });
  var halfline = function (origin) {
      return function (direction) {
          return {
              origin: origin,
              direction: direction
          };
      };
  };
  var drawIn = function (dict) {
      return dict.drawIn;
  };
  var drawableSequence = function (dictDrawableSet) {
      return new DrawableSet(function (ctx) {
          return function (arr) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Semigroup.append(Graphics_Drawing.semigroupDrawing))(Data_Monoid.mempty(Graphics_Drawing.monoidDrawing))(Data_Functor.map(Data_Functor.functorArray)(drawIn(dictDrawableSet)(ctx))(arr));
          };
      });
  };
  var coords = function (dict) {
      return dict.coords;
  };
  var circle = function (p) {
      return function (r) {
          return {
              center: p,
              radius: r
          };
      };
  };
  var basedVector = new Based(function (v) {
      return Data_Sparse_Polynomial.query(Data_Semiring.semiringNumber)(v)(0);
  }, function (v) {
      return v;
  }, function (v) {
      return Data_Sparse_Polynomial.query(Data_Semiring.semiringNumber)(v)(1);
  });
  var basedPoint = new Based(function (v) {
      return Data_Sparse_Polynomial.query(Data_Semiring.semiringNumber)(v.coordinates)(0);
  }, function (v) {
      return v.coordinates;
  }, function (v) {
      return Data_Sparse_Polynomial.query(Data_Semiring.semiringNumber)(v.coordinates)(1);
  });
  var summublePointVector = new Summable(function (p) {
      return function (v) {
          return {
              name: "",
              coordinates: Data_Semiring.add(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(coords(basedPoint)(p))(coords(basedVector)(v))
          };
      };
  });
  var arrowLength = 20.0;
  var arrowBluntness = 0.3;
  var abs = function (dict) {
      return dict.abs;
  };
  var drawableCircle = new DrawableSet(function (v) {
      return function (v1) {
          return Graphics_Drawing.outlined(Data_Semigroup.append(Graphics_Drawing.semigroupOutlineStyle)(Graphics_Drawing.outlineColor(v.color))(Graphics_Drawing.lineWidth(v.lineWidth)))(Graphics_Drawing.circle(abs(basedPoint)(v1.center))(ord(basedPoint)(v1.center))(v1.radius));
      };
  });
  var drawableHalfLine = new DrawableSet(function (v) {
      return function (v1) {
          var far = plus(summublePointVector)(v1.origin)(scale(10.0)(v1.direction));
          return Graphics_Drawing.outlined(Data_Semigroup.append(Graphics_Drawing.semigroupOutlineStyle)(Graphics_Drawing.outlineColor(v.color))(Graphics_Drawing.lineWidth(v.lineWidth)))(Graphics_Drawing.path(Data_Foldable.foldableArray)([ {
              x: abs(basedPoint)(v1.origin),
              y: ord(basedPoint)(v1.origin)
          }, {
              x: abs(basedPoint)(far),
              y: ord(basedPoint)(far)
          } ]));
      };
  });
  var drawablePoint = new DrawableSet(function (v) {
      return function (v1) {
          return Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(Graphics_Drawing.outlined(Data_Semigroup.append(Graphics_Drawing.semigroupOutlineStyle)(Graphics_Drawing.outlineColor(v.color))(Graphics_Drawing.lineWidth(v.lineWidth)))(Graphics_Drawing.path(Data_Foldable.foldableArray)([ {
              x: abs(basedPoint)(v1) - 5.0,
              y: ord(basedPoint)(v1) - 5.0
          }, {
              x: abs(basedPoint)(v1) + 5.0,
              y: ord(basedPoint)(v1) + 5.0
          } ])))(Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(Graphics_Drawing.outlined(Data_Semigroup.append(Graphics_Drawing.semigroupOutlineStyle)(Graphics_Drawing.outlineColor(v.color))(Graphics_Drawing.lineWidth(v.lineWidth)))(Graphics_Drawing.path(Data_Foldable.foldableArray)([ {
              x: abs(basedPoint)(v1) - 5.0,
              y: ord(basedPoint)(v1) + 5.0
          }, {
              x: abs(basedPoint)(v1) + 5.0,
              y: ord(basedPoint)(v1) - 5.0
          } ])))(Graphics_Drawing.text(Graphics_Drawing_Font.font(Graphics_Drawing_Font.fantasy)(25)(Data_Monoid.mempty(Graphics_Drawing_Font.monoidFontOptions)))(abs(basedPoint)(v1) + 10.0)(ord(basedPoint)(v1) - 10.0)(Graphics_Drawing.fillColor(v.color))(v1.name)));
      };
  });
  var line = function (m) {
      return function (n) {
          return Line({
              a: ord(basedPoint)(m) - ord(basedPoint)(n),
              b: abs(basedPoint)(n) - abs(basedPoint)(m),
              c: abs(basedPoint)(m) * ord(basedPoint)(n) - ord(basedPoint)(m) * abs(basedPoint)(n)
          });
      };
  };
  var measurableVector = new Measurable(function (v) {
      return $$Math.sqrt(abs(basedVector)(v) * abs(basedVector)(v) + ord(basedVector)(v) * ord(basedVector)(v));
  });
  var cosAngle = function (u) {
      return function (v) {
          return (abs(basedVector)(u) * abs(basedVector)(v) + ord(basedVector)(u) * ord(basedVector)(v)) / (length(measurableVector)(u) * length(measurableVector)(v));
      };
  };
  var interLineHalfLine = new Intersectable(function (l) {
      return function (v) {
          var l$prime = line(v.origin)(plus(summublePointVector)(v.origin)(v.direction));
          return Data_Array.filter(function (p) {
              return cosAngle(vector(v.origin)(p))(v.direction) >= 0.0;
          })(meets(interLineLine)(l)(l$prime));
      };
  });
  var interHalfLineLine = new Intersectable(function (hl) {
      return function (l) {
          return meets(interLineHalfLine)(l)(hl);
      };
  });
  var interSegmentLine = new Intersectable(function (v) {
      return function (l) {
          var hl = halfline(v.origin)(vector(v.origin)(v.extremity));
          return Data_Array.filter(function (p) {
              return cosAngle(vector(v.extremity)(p))(vector(v.extremity)(v.origin)) >= 0.0;
          })(meets(interHalfLineLine)(hl)(l));
      };
  });
  var interSegmentHalfLine = new Intersectable(function (s) {
      return function (v) {
          var l = line(v.origin)(plus(summublePointVector)(v.origin)(v.direction));
          return Data_Array.filter(function (p) {
              return cosAngle(vector(v.origin)(p))(v.direction) >= 0.0;
          })(meets(interSegmentLine)(s)(l));
      };
  });
  var interHalfLineSegment = new Intersectable(function (hl) {
      return function (s) {
          return meets(interSegmentHalfLine)(s)(hl);
      };
  });
  var interSegmentSegment = new Intersectable(function (v) {
      return function (s) {
          var hl = halfline(v.origin)(vector(v.origin)(v.extremity));
          return Data_Array.filter(function (p) {
              return cosAngle(vector(v.extremity)(p))(vector(v.extremity)(v.origin)) >= 0.0;
          })(meets(interHalfLineSegment)(hl)(s));
      };
  });
  var rotated = function (ang) {
      return function (v) {
          return Vector(Data_Semiring.add(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(Data_Sparse_Polynomial.monoPol(abs(basedVector)(v) * $$Math.cos(ang) - ord(basedVector)(v) * $$Math.sin(ang))(0))(Data_Sparse_Polynomial.monoPol(abs(basedVector)(v) * $$Math.sin(ang) + ord(basedVector)(v) * $$Math.cos(ang))(1)));
      };
  };
  var arrowTip = function (v) {
      var v1 = vector(v.origin)(v.extremity);
      var v0 = Vector(Data_Sparse_Polynomial.monoPol(length(measurableVector)(v1))(0));
      var ang = $$Math.atan2(ord(basedVector)(v1))(abs(basedVector)(v1));
      var f = function (theta) {
          var v11 = rotated(theta)(Vector(Data_Sparse_Polynomial.monoPol(arrowLength)(0)));
          return plus(summublePointVector)(v.origin)(rotated(ang)(plus(summableVectorVector)(v11)(v0)));
      };
      return {
          at1: f($$Math.pi - arrowBluntness),
          at2: f($$Math.pi + arrowBluntness)
      };
  }; 
  var drawableSegment = new DrawableSet(function (v) {
      return function (v1) {
          return Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(Graphics_Drawing.outlined(Data_Semigroup.append(Graphics_Drawing.semigroupOutlineStyle)(Graphics_Drawing.outlineColor(v.color))(Graphics_Drawing.lineWidth(v.lineWidth)))(Graphics_Drawing.path(Data_Foldable.foldableArray)([ {
              x: abs(basedPoint)(v1.origin),
              y: ord(basedPoint)(v1.origin)
          }, {
              x: abs(basedPoint)(v1.extremity),
              y: ord(basedPoint)(v1.extremity)
          } ])))(Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(Graphics_Drawing.filled(Graphics_Drawing.fillColor(v.color))(Data_Maybe.maybe(Data_Monoid.mempty(Graphics_Drawing.monoidShape))(function (str) {
              var v2 = arrowTip(v1);
              return Graphics_Drawing.closed(Data_Foldable.foldableArray)([ {
                  x: abs(basedPoint)(v2.at1),
                  y: ord(basedPoint)(v2.at1)
              }, {
                  x: abs(basedPoint)(v1.extremity),
                  y: ord(basedPoint)(v1.extremity)
              }, {
                  x: abs(basedPoint)(v2.at2),
                  y: ord(basedPoint)(v2.at2)
              } ]);
          })(v1.asOriented)))((function () {
              var m = middle("")(v1);
              return Data_Maybe.maybe(Data_Monoid.mempty(Graphics_Drawing.monoidDrawing))(function (str) {
                  return Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(Graphics_Drawing.text(Graphics_Drawing_Font.font(Graphics_Drawing_Font.fantasy)(25)(Data_Monoid.mempty(Graphics_Drawing_Font.monoidFontOptions)))(abs(basedPoint)(m) + 10.0)(ord(basedPoint)(m) - 10.0)(Graphics_Drawing.fillColor(v.color))(str))(Graphics_Drawing.text(Graphics_Drawing_Font.font(Graphics_Drawing_Font.fantasy)(25)(Data_Monoid.mempty(Graphics_Drawing_Font.monoidFontOptions)))(abs(basedPoint)(m) + 10.0)(ord(basedPoint)(m) - 23.0)(Graphics_Drawing.fillColor(v.color))((function () {
                      var $156 = str === "";
                      if ($156) {
                          return "";
                      };
                      return "\ud83e\udc16";
                  })()));
              })(v1.asOriented);
          })()));
      };
  });
  var aVectorOfLine = function (v) {
      return Vector(Data_Semiring.add(Data_Sparse_Polynomial.semiringPoly(Data_Eq.eqNumber)(Data_Semiring.semiringNumber))(Data_Sparse_Polynomial.monoPol(-v.b)(0))(Data_Sparse_Polynomial.monoPol(v.a)(1)));
  };
  var aPointOnLine = function (v) {
      return point("")((-v.a * v.c) / (v.a * v.a + v.b * v.b))((-v.b * v.c) / (v.a * v.a + v.b * v.b));
  };
  var drawableLine = new DrawableSet(function (ctx) {
      return function (l) {
          var v = aVectorOfLine(l);
          var m = aPointOnLine(l);
          return drawIn(drawableSequence(drawableHalfLine))(ctx)([ halfline(m)(v), halfline(m)(scale(-1.0)(v)) ]);
      };
  });
  exports["DrawableSet"] = DrawableSet;
  exports["aPointOnLine"] = aPointOnLine;
  exports["aVectorOfLine"] = aVectorOfLine;
  exports["abs"] = abs;
  exports["circle"] = circle;
  exports["drawIn"] = drawIn;
  exports["length"] = length;
  exports["line"] = line;
  exports["meets"] = meets;
  exports["ord"] = ord;
  exports["plus"] = plus;
  exports["point"] = point;
  exports["scale"] = scale;
  exports["segment"] = segment;
  exports["vector"] = vector;
  exports["basedPoint"] = basedPoint;
  exports["basedVector"] = basedVector;
  exports["measurableVector"] = measurableVector;
  exports["summublePointVector"] = summublePointVector;
  exports["interSegmentSegment"] = interSegmentSegment;
  exports["drawablePoint"] = drawablePoint;
  exports["drawableHalfLine"] = drawableHalfLine;
  exports["drawableLine"] = drawableLine;
  exports["drawableSegment"] = drawableSegment;
  exports["drawableCircle"] = drawableCircle;
  exports["drawableSequence"] = drawableSequence;
})(PS);
(function(exports) {
  exports.fromString = function (str){
    return str;
  };
})(PS["Main"] = PS["Main"] || {});
(function($PS) {
  // Generated by purs version 0.13.3
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var $foreign = $PS["Main"];
  var Color = $PS["Color"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var DOM_Editor = $PS["DOM.Editor"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var FRP_Behavior = $PS["FRP.Behavior"];
  var FRP_Event = $PS["FRP.Event"];
  var FRP_Event_Mouse = $PS["FRP.Event.Mouse"];
  var FRP_Event_Time = $PS["FRP.Event.Time"];
  var Graphics_Canvas_Geometry = $PS["Graphics.Canvas.Geometry"];
  var Graphics_Drawing = $PS["Graphics.Drawing"];
  var $$Math = $PS["Math"];                
  var Reduced = function (x) {
      return x;
  };
  var Factorized = function (x) {
      return x;
  };
  var $$Function = function (x) {
      return x;
  };
  var Triplet = function (x) {
      return x;
  };
  var Canonical = function (x) {
      return x;
  };
  var FA = (function () {
      function FA(value0) {
          this.value0 = value0;
      };
      FA.create = function (value0) {
          return new FA(value0);
      };
      return FA;
  })();
  var FP = (function () {
      function FP(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FP.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FP(value0, value1, value2);
              };
          };
      };
      return FP;
  })();
  var FL = (function () {
      function FL(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FL.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FL(value0, value1, value2);
              };
          };
      };
      return FL;
  })();
  var FC = (function () {
      function FC(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FC.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FC(value0, value1, value2);
              };
          };
      };
      return FC;
  })();
  var FH = (function () {
      function FH(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FH.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FH(value0, value1, value2);
              };
          };
      };
      return FH;
  })();
  var FS = (function () {
      function FS(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      FS.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new FS(value0, value1, value2);
              };
          };
      };
      return FS;
  })();
  var Convertible = function (convert) {
      this.convert = convert;
  };
  var width = 800.0;
  var white = Graphics_Drawing.fillColor(Color.rgb(255)(255)(255));
  var somePosition = Data_Maybe.maybe({
      x: 0.0,
      y: 0.0
  })(function (v) {
      return {
          x: Data_Int.toNumber(v.x),
          y: Data_Int.toNumber(v.y)
      };
  });
  var remap = function (v) {
      return function (p) {
          return function (v1) {
              var v2 = Graphics_Canvas_Geometry.vector(v.center)(p);
              var x = (Graphics_Canvas_Geometry.abs(Graphics_Canvas_Geometry.basedVector)(v2) * v1.halfWidth) / v.halfWidth;
              var y = (Graphics_Canvas_Geometry.ord(Graphics_Canvas_Geometry.basedVector)(v2) * v1.halfHeight) / v.halfHeight;
              return Graphics_Canvas_Geometry.point("")(x + Graphics_Canvas_Geometry.abs(Graphics_Canvas_Geometry.basedPoint)(v1.center))(y + Graphics_Canvas_Geometry.ord(Graphics_Canvas_Geometry.basedPoint)(v1.center));
          };
      };
  };
  var purple = Color.rgb(179)(14)(203);
  var pen = function ($copy_dictPartial) {
      return function ($copy_from) {
          return function ($copy_acc) {
              return function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_dictPartial = $copy_dictPartial;
                      var $tco_var_from = $copy_from;
                      var $tco_var_acc = $copy_acc;
                      var $tco_var_v = $copy_v;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(dictPartial, from, acc, v, v1) {
                          if (v1.length === 0) {
                              $tco_done = true;
                              return acc;
                          };
                          if (v instanceof Data_Maybe.Just) {
                              var topY = Graphics_Canvas_Geometry.ord(Graphics_Canvas_Geometry.basedPoint)(from.center) + from.halfHeight;
                              var botY = Graphics_Canvas_Geometry.ord(Graphics_Canvas_Geometry.basedPoint)(from.center) - from.halfHeight;
                              var okY = function (y) {
                                  return botY <= y && y <= topY;
                              };
                              var v2 = Data_Array.uncons(v1);
                              if (v2 instanceof Data_Maybe.Just) {
                                  if (v2.value0.head instanceof Data_Maybe.Just) {
                                      $tco_var_dictPartial = undefined;
                                      $tco_var_from = from;
                                      $tco_var_acc = (function () {
                                          var $273 = okY(v.value0.y) && okY(v2.value0.head.value0.y);
                                          if ($273) {
                                              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(acc)([ Graphics_Canvas_Geometry.segment(Graphics_Canvas_Geometry.point("")(v.value0.x)(v.value0.y))(Graphics_Canvas_Geometry.point("")(v2.value0.head.value0.x)(v2.value0.head.value0.y))(Data_Maybe.Nothing.value) ]);
                                          };
                                          return acc;
                                      })();
                                      $tco_var_v = v2.value0.head;
                                      $copy_v1 = v2.value0.tail;
                                      return;
                                  };
                                  if (v2.value0.head instanceof Data_Maybe.Nothing) {
                                      var ys = Data_Array.dropWhile(function (v3) {
                                          return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                                              return "y";
                                          }))(Data_Eq.eqNumber))()(new Data_Symbol.IsSymbol(function () {
                                              return "x";
                                          }))(Data_Eq.eqNumber))))(v3)(Data_Maybe.Nothing.value);
                                      })(v2.value0.tail);
                                      var $277 = Data_Array.length(ys) === 0;
                                      if ($277) {
                                          $tco_done = true;
                                          return acc;
                                      };
                                      $tco_var_dictPartial = undefined;
                                      $tco_var_from = from;
                                      $tco_var_acc = acc;
                                      $tco_var_v = Data_Maybe.fromJust()(Data_Array.head(ys));
                                      $copy_v1 = Data_Maybe.fromJust()(Data_Array.tail(ys));
                                      return;
                                  };
                                  throw new Error("Failed pattern match at Main (line 152, column 11 - line 164, column 74): " + [ v2.value0.head.constructor.name ]);
                              };
                              if (v2 instanceof Data_Maybe.Nothing) {
                                  $tco_done = true;
                                  return acc;
                              };
                              throw new Error("Failed pattern match at Main (line 150, column 6 - line 165, column 21): " + [ v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Main (line 141, column 1 - line 144, column 76): " + [ from.constructor.name, acc.constructor.name, v.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_dictPartial, $tco_var_from, $tco_var_acc, $tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
          };
      };
  };
  var moveWithButton = Data_Functor.map(Effect.functorEffect)(function (mouse) {
      return Data_Functor.map(FRP_Event.functorEvent)(function (v) {
          return {
              value: (function () {
                  var $283 = Data_Set.isEmpty(v.buttons);
                  if ($283) {
                      return "buttonup";
                  };
                  return "buttondown";
              })(),
              pos: v.value
          };
      })(FRP_Event_Mouse.withButtons(mouse)(Data_Functor.map(FRP_Event.functorEvent)(function (v) {
          return somePosition(v.pos);
      })(FRP_Event_Mouse.withPosition(mouse)(FRP_Event_Time.interval(10)))));
  })(FRP_Event_Mouse.getMouse);
  var mkOption = function (setup) {
      return function (select) {
          return function (msg) {
              return function __do() {
                  var v = DOM_Editor.createElement("option")(setup.document)();
                  var v1 = DOM_Editor.setTextContent(msg)(v)();
                  var v2 = DOM_Editor.appendChild(v)(select)();
                  return Data_Unit.unit;
              };
          };
      };
  };
  var local = {
      center: Graphics_Canvas_Geometry.point("")(0.0)(0.0),
      halfWidth: 6.0,
      halfHeight: 5.0
  };
  var inInterval = function (a) {
      return function (b) {
          return function (x) {
              return a <= x && x <= b;
          };
      };
  };
  var inBox = function (v) {
      return function (p) {
          return inInterval(Graphics_Canvas_Geometry.abs(Graphics_Canvas_Geometry.basedPoint)(v.center) - v.halfWidth)(Graphics_Canvas_Geometry.abs(Graphics_Canvas_Geometry.basedPoint)(v.center) + v.halfWidth)(Graphics_Canvas_Geometry.abs(Graphics_Canvas_Geometry.basedPoint)(p)) && inInterval(Graphics_Canvas_Geometry.ord(Graphics_Canvas_Geometry.basedPoint)(v.center) - v.halfHeight)(Graphics_Canvas_Geometry.ord(Graphics_Canvas_Geometry.basedPoint)(v.center) + v.halfHeight)(Graphics_Canvas_Geometry.ord(Graphics_Canvas_Geometry.basedPoint)(p));
      };
  };
  var height = 600.0;
  var window = {
      center: Graphics_Canvas_Geometry.point("")(width / 2.0)(height / 2.0),
      halfWidth: width / 2.0,
      halfHeight: height / 2.0
  };
  var frame = function (v) {
      var seg = function (sx) {
          return function (sy) {
              return function (tx) {
                  return function (ty) {
                      return Graphics_Canvas_Geometry.segment(Graphics_Canvas_Geometry.point("")(Graphics_Canvas_Geometry.abs(Graphics_Canvas_Geometry.basedPoint)(v.center) + sx * v.halfWidth)(Graphics_Canvas_Geometry.ord(Graphics_Canvas_Geometry.basedPoint)(v.center) + sy * v.halfHeight))(Graphics_Canvas_Geometry.point("")(Graphics_Canvas_Geometry.abs(Graphics_Canvas_Geometry.basedPoint)(v.center) + tx * v.halfWidth)(Graphics_Canvas_Geometry.ord(Graphics_Canvas_Geometry.basedPoint)(v.center) + ty * v.halfHeight))(Data_Maybe.Nothing.value);
                  };
              };
          };
      };
      return [ seg(-1.0)(-1.0)(1.0)(-1.0), seg(1.0)(-1.0)(1.0)(1.0), seg(1.0)(1.0)(-1.0)(1.0), seg(-1.0)(1.0)(-1.0)(-1.0) ];
  };
  var segmentInBox = function (v) {
      return function (v1) {
          var candidates = Data_Array.filter(function ($554) {
              return (function (v2) {
                  return v2 === 1;
              })(Data_Array.length($554));
          })(Data_Functor.map(Data_Functor.functorArray)(function (v2) {
              return Graphics_Canvas_Geometry.meets(Graphics_Canvas_Geometry.interSegmentSegment)(v1)(v2);
          })(frame(v)));
          if (inBox(v)(v1.origin) && inBox(v)(v1.extremity)) {
              return new Data_Maybe.Just(v1);
          };
          if (inBox(v)(v1.origin)) {
              if (candidates.length === 1 && candidates[0].length === 1) {
                  return Data_Maybe.Just.create(Graphics_Canvas_Geometry.segment(v1.origin)(candidates[0][0])(Data_Maybe.Nothing.value));
              };
              throw new Error("Failed pattern match at Main (line 397, column 21 - line 397, column 39): " + [ candidates.constructor.name ]);
          };
          if (inBox(v)(v1.extremity)) {
              if (candidates.length === 1 && candidates[0].length === 1) {
                  return Data_Maybe.Just.create(Graphics_Canvas_Geometry.segment(v1.extremity)(candidates[0][0])(Data_Maybe.Nothing.value));
              };
              throw new Error("Failed pattern match at Main (line 400, column 20 - line 400, column 38): " + [ candidates.constructor.name ]);
          };
          if (Data_Boolean.otherwise) {
              var $308 = Data_Array.length(candidates) === 2;
              if ($308) {
                  if (candidates.length === 2 && (candidates[0].length === 1 && candidates[1].length === 1)) {
                      return Data_Maybe.Just.create(Graphics_Canvas_Geometry.segment(candidates[0][0])(candidates[1][0])(Data_Maybe.Nothing.value));
                  };
                  throw new Error("Failed pattern match at Main (line 404, column 28 - line 404, column 50): " + [ candidates.constructor.name ]);
              };
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Main (line 394, column 7 - line 406, column 31): " + [ Data_Unit.unit.constructor.name ]);
      };
  };
  var lineInBox = function (b) {
      return function (l) {
          var v = Graphics_Canvas_Geometry.aVectorOfLine(l);
          var p = Graphics_Canvas_Geometry.aPointOnLine(l);
          return segmentInBox(b)(Graphics_Canvas_Geometry.segment(Graphics_Canvas_Geometry.plus(Graphics_Canvas_Geometry.summublePointVector)(p)(Graphics_Canvas_Geometry.scale(-50.0)(v)))(Graphics_Canvas_Geometry.plus(Graphics_Canvas_Geometry.summublePointVector)(p)(Graphics_Canvas_Geometry.scale(50.0)(v)))(Data_Maybe.Nothing.value));
      };
  };
  var expressions = function (v) {
      return function (reduced) {
          return function (v1) {
              return function (canonical) {
                  return function (mFact) {
                      return function (factorized) {
                          return function __do() {
                              var v2 = DOM_Editor.setTextContent("f(x) = " + (Data_Show.show(Data_Show.showNumber)(v.a) + ("x^2 + (" + (Data_Show.show(Data_Show.showNumber)(v.b) + (")x + (" + (Data_Show.show(Data_Show.showNumber)(v.c) + ")"))))))(reduced)();
                              var v3 = DOM_Editor.setTextContent("f(x) = " + (Data_Show.show(Data_Show.showNumber)(v1.a) + ("(x - (" + (Data_Show.show(Data_Show.showNumber)(v1.alpha) + ("))^2 + (" + (Data_Show.show(Data_Show.showNumber)(v1.beta) + ")"))))))(canonical)();
                              var v4 = (function () {
                                  if (mFact instanceof Data_Maybe.Just) {
                                      return DOM_Editor.setTextContent("f(x) = " + (Data_Show.show(Data_Show.showNumber)(mFact.value0.a) + ("(x - (" + (Data_Show.show(Data_Show.showNumber)(mFact.value0.x1) + (")) (x - (" + (Data_Show.show(Data_Show.showNumber)(mFact.value0.x2) + "))"))))))(factorized)();
                                  };
                                  return DOM_Editor.setTextContent("")(factorized)();
                              })();
                              return Data_Unit.unit;
                          };
                      };
                  };
              };
          };
      };
  };
  var drawableFinal = new Graphics_Canvas_Geometry.DrawableSet(function (ctx) {
      return function (v) {
          if (v instanceof FP) {
              return Graphics_Canvas_Geometry.drawIn(Graphics_Canvas_Geometry.drawablePoint)(ctx)(remap(v.value0)(v.value2)(v.value1));
          };
          if (v instanceof FL) {
              var p = Graphics_Canvas_Geometry.aPointOnLine(v.value2);
              var q = Graphics_Canvas_Geometry.plus(Graphics_Canvas_Geometry.summublePointVector)(p)(Graphics_Canvas_Geometry.aVectorOfLine(v.value2));
              return Graphics_Canvas_Geometry.drawIn(Graphics_Canvas_Geometry.drawableLine)(ctx)(Graphics_Canvas_Geometry.line(remap(v.value0)(p)(v.value1))(remap(v.value0)(q)(v.value1)));
          };
          if (v instanceof FC) {
              var q = remap(v.value0)(Graphics_Canvas_Geometry.point("")(Graphics_Canvas_Geometry.abs(Graphics_Canvas_Geometry.basedPoint)(v.value2.center) + v.value2.radius)(Graphics_Canvas_Geometry.ord(Graphics_Canvas_Geometry.basedPoint)(v.value2.center)))(v.value1);
              var p = remap(v.value0)(v.value2.center)(v.value1);
              return Graphics_Canvas_Geometry.drawIn(Graphics_Canvas_Geometry.drawableCircle)(ctx)(Graphics_Canvas_Geometry.circle(p)(Graphics_Canvas_Geometry.length(Graphics_Canvas_Geometry.measurableVector)(Graphics_Canvas_Geometry.vector(p)(q))));
          };
          if (v instanceof FH) {
              var q = remap(v.value0)(Graphics_Canvas_Geometry.plus(Graphics_Canvas_Geometry.summublePointVector)(v.value2.origin)(v.value2.direction))(v.value1);
              var p = remap(v.value0)(v.value2.origin)(v.value1);
              return Graphics_Canvas_Geometry.drawIn(Graphics_Canvas_Geometry.drawableHalfLine)(ctx)({
                  origin: p,
                  direction: Graphics_Canvas_Geometry.vector(p)(q)
              });
          };
          if (v instanceof FS) {
              return Graphics_Canvas_Geometry.drawIn(Graphics_Canvas_Geometry.drawableSegment)(ctx)({
                  origin: remap(v.value0)(v.value2.origin)(v.value1),
                  extremity: remap(v.value0)(v.value2.extremity)(v.value1),
                  asOriented: v.value2.asOriented
              });
          };
          if (v instanceof FA) {
              return Graphics_Canvas_Geometry.drawIn(Graphics_Canvas_Geometry.drawableSequence(drawableFinal))(ctx)(v.value0);
          };
          throw new Error("Failed pattern match at Main (line 242, column 1 - line 260, column 39): " + [ ctx.constructor.name, v.constructor.name ]);
      };
  });
  var grid = function (from) {
      return function (to) {
          var topY = Graphics_Canvas_Geometry.ord(Graphics_Canvas_Geometry.basedPoint)(from.center) + from.halfHeight;
          var topX = Graphics_Canvas_Geometry.abs(Graphics_Canvas_Geometry.basedPoint)(from.center) + from.halfWidth;
          var seg = function (x) {
              return function (y) {
                  return function (x$prime) {
                      return function (y$prime) {
                          return FS.create(from)(to)(Graphics_Canvas_Geometry.segment(Graphics_Canvas_Geometry.point("")(x)(y))(Graphics_Canvas_Geometry.point("")(x$prime)(y$prime))(Data_Maybe.Nothing.value));
                      };
                  };
              };
          };
          var ctx = function (lW) {
              return {
                  color: Color.rgb(50)(50)(50),
                  lineWidth: lW
              };
          };
          var botY = Graphics_Canvas_Geometry.ord(Graphics_Canvas_Geometry.basedPoint)(from.center) - from.halfHeight;
          var segAtX = function (x) {
              return seg(x)(botY)(x)(topY);
          };
          var botX = Graphics_Canvas_Geometry.abs(Graphics_Canvas_Geometry.basedPoint)(from.center) - from.halfWidth;
          var segAtY = function (y) {
              return seg(botX)(y)(topX)(y);
          };
          return Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Semigroup.append(Graphics_Drawing.semigroupDrawing))(Data_Monoid.mempty(Graphics_Drawing.monoidDrawing))(Data_Functor.map(Data_Functor.functorArray)(function (n) {
              return Graphics_Canvas_Geometry.drawIn(drawableFinal)(ctx(0.5))(segAtX(Data_Int.toNumber(n)));
          })(Data_Array.range(Data_Int.ceil(botX))(Data_Int.floor(topX)))))(Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Semigroup.append(Graphics_Drawing.semigroupDrawing))(Data_Monoid.mempty(Graphics_Drawing.monoidDrawing))(Data_Functor.map(Data_Functor.functorArray)(function (n) {
              return Graphics_Canvas_Geometry.drawIn(drawableFinal)(ctx(0.5))(segAtY(Data_Int.toNumber(n)));
          })(Data_Array.range(Data_Int.ceil(botY))(Data_Int.floor(topY)))))(Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(Graphics_Canvas_Geometry.drawIn(drawableFinal)(ctx(1.5))(segAtX(0.0)))((function () {
              var $359 = botY <= 0.0 && 0.0 <= topY;
              if ($359) {
                  return Graphics_Canvas_Geometry.drawIn(drawableFinal)(ctx(1.5))(segAtY(0.0));
              };
              return Data_Monoid.mempty(Graphics_Drawing.monoidDrawing);
          })())));
      };
  };
  var digit3 = function (a) {
      return (function (v) {
          return v / 1000.0;
      })(Data_Int.toNumber(Data_Int.round(a * 1000.0)));
  };
  var density = 200;
  var plot = function (draw) {
      return function (from) {
          return function (to) {
              return function (v) {
                  var topX = Graphics_Canvas_Geometry.abs(Graphics_Canvas_Geometry.basedPoint)(from.center) + from.halfWidth;
                  var botX = Graphics_Canvas_Geometry.abs(Graphics_Canvas_Geometry.basedPoint)(from.center) - from.halfWidth;
                  var zs = Data_Array.dropWhile(function (v1) {
                      return Data_Eq.eq(Data_Maybe.eqMaybe(Data_Eq.eqRec()(Data_Eq.eqRowCons(Data_Eq.eqRowCons(Data_Eq.eqRowNil)()(new Data_Symbol.IsSymbol(function () {
                          return "y";
                      }))(Data_Eq.eqNumber))()(new Data_Symbol.IsSymbol(function () {
                          return "x";
                      }))(Data_Eq.eqNumber))))(v1)(Data_Maybe.Nothing.value);
                  })(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Functor.functorFn)(function (x) {
                      var $364 = v.domain(x);
                      if ($364) {
                          return new Data_Maybe.Just({
                              x: x,
                              y: -v.expression(x)
                          });
                      };
                      return Data_Maybe.Nothing.value;
                  })(function (n) {
                      return botX + (Data_Int.toNumber(n) * (topX - botX)) / Data_Int.toNumber(density);
                  }))(Data_Array.range(0)(density)));
                  var $365 = Data_Array.length(zs) === 0;
                  if ($365) {
                      return Data_Monoid.mempty(Graphics_Drawing.monoidDrawing);
                  };
                  return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (s) {
                      return function (acc) {
                          return Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(acc)(draw(new FS(from, to, s)));
                      };
                  })(Data_Monoid.mempty(Graphics_Drawing.monoidDrawing))(pen()(from)([  ])(Data_Maybe.fromJust()(Data_Array.head(zs)))(Data_Maybe.fromJust()(Data_Array.tail(zs))));
              };
          };
      };
  };
  var curryBox = function (f) {
      return function (v) {
          return f(Graphics_Canvas_Geometry.abs(Graphics_Canvas_Geometry.basedPoint)(v.center) - v.halfWidth)(Graphics_Canvas_Geometry.ord(Graphics_Canvas_Geometry.basedPoint)(v.center) - v.halfHeight)(2.0 * v.halfWidth)(2.0 * v.halfHeight);
      };
  };
  var convert = function (dict) {
      return dict.convert;
  };
  var convTripletReduced = new Convertible(function (v) {
      var den = v.c0.x * v.c0.x * (v.c1.x - v.c2.x) + v.c1.x * v.c1.x * (v.c2.x - v.c0.x) + v.c2.x * v.c2.x * (v.c0.x - v.c1.x);
      return {
          a: ((v.c1.x - v.c2.x) * v.c0.y + (v.c2.x - v.c0.x) * v.c1.y + (v.c0.x - v.c1.x) * v.c2.y) / den,
          b: ((v.c2.x * v.c2.x - v.c1.x * v.c1.x) * v.c0.y + (v.c0.x * v.c0.x - v.c2.x * v.c2.x) * v.c1.y + (v.c1.x * v.c1.x - v.c0.x * v.c0.x) * v.c2.y) / den,
          c: (v.c1.x * v.c2.x * (v.c1.x - v.c2.x) * v.c0.y + v.c0.x * v.c2.x * (v.c2.x - v.c0.x) * v.c1.y + v.c0.x * v.c1.x * (v.c0.x - v.c1.x) * v.c2.y) / den
      };
  });
  var convReducedFunction = new Convertible(function (v) {
      return {
          domain: Data_Function["const"](true),
          expression: function (x) {
              return v.a * x * x + v.b * x + v.c * 1.0;
          }
      };
  });
  var convTripletFunction = new Convertible(function (t) {
      var r = convert(convTripletReduced)(t);
      return convert(convReducedFunction)(r);
  });
  var reframe = function (draw) {
      return function (v) {
          return Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(grid(v.fromF)(v.toF))(Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)(plot(draw)(v.fromF)(v.toF)(convert(convTripletFunction)(v.parabola)))((function () {
              var v1 = convert(convTripletReduced)(v.parabola);
              var delta = v1.b * v1.b - 4.0 * v1.a * v1.c;
              var $384 = delta >= 0.0;
              if ($384) {
                  return Data_Semigroup.append(Graphics_Drawing.semigroupDrawing)((function () {
                      var p1 = Graphics_Canvas_Geometry.point("")((-v1.b + $$Math.sqrt(delta)) / 2.0 / v1.a)(0.0);
                      var $385 = inBox(v.fromF)(p1);
                      if ($385) {
                          return draw(new FP(v.fromF, v.toF, p1));
                      };
                      return Data_Monoid.mempty(Graphics_Drawing.monoidDrawing);
                  })())((function () {
                      var p2 = Graphics_Canvas_Geometry.point("")((-v1.b - $$Math.sqrt(delta)) / 2.0 / v1.a)(0.0);
                      var $386 = inBox(v.fromF)(p2);
                      if ($386) {
                          return draw(new FP(v.fromF, v.toF, p2));
                      };
                      return Data_Monoid.mempty(Graphics_Drawing.monoidDrawing);
                  })());
              };
              return Data_Monoid.mempty(Graphics_Drawing.monoidDrawing);
          })()));
      };
  };
  var convReducedCanonical = new Convertible(function (v) {
      var v1 = convert(convReducedFunction)(v);
      var alpha = -v.b / 2.0 / v.a;
      return {
          a: v.a,
          alpha: alpha,
          beta: v1.expression(alpha)
      };
  });
  var convTripletCanonical = new Convertible(function (t) {
      var r = convert(convTripletReduced)(t);
      return convert(convReducedCanonical)(r);
  });
  var convFunctionTriplet = new Convertible(function (v) {
      return {
          c0: {
              x: -1.0,
              y: v.expression(-1.0)
          },
          c1: {
              x: 0.0,
              y: v.expression(0.0)
          },
          c2: {
              x: 1.0,
              y: v.expression(1.0)
          }
      };
  });
  var convReducedTriple = new Convertible(function (r) {
      var f = convert(convReducedFunction)(r);
      return convert(convFunctionTriplet)(f);
  });
  var initialState = {
      parabola: convert(convFunctionTriplet)({
          domain: Data_Function["const"](true),
          expression: function (x) {
              return x * x;
          }
      }),
      fromF: local,
      toF: window,
      previousX: 0.0,
      previousY: 0.0
  };
  var convFunctionReduced = new Convertible(function (v) {
      var fp = v.expression(1.0);
      var fm = v.expression(-1.0);
      var f0 = v.expression(0.0);
      return {
          a: ((fm - 2.0 * f0) + fp) / 2.0,
          b: (fp - fm) / 2.0,
          c: f0
      };
  });
  var convFunctionCanonical = new Convertible(function (f) {
      var r = convert(convFunctionReduced)(f);
      return convert(convReducedCanonical)(r);
  });
  var convCanonicalFunction = new Convertible(function (v) {
      return {
          domain: Data_Function["const"](true),
          expression: function (x) {
              return v.a * (x - v.alpha) * (x - v.alpha) + v.beta * 1.0;
          }
      };
  });
  var convCanonicalReduced = new Convertible(function (can) {
      var f = convert(convCanonicalFunction)(can);
      return convert(convFunctionReduced)(f);
  });
  var convCanonicalTriplet = new Convertible(function (c) {
      var f = convert(convCanonicalFunction)(c);
      return convert(convFunctionTriplet)(f);
  });
  var ePage = function (events) {
      return function (draw) {
          return Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Functor.functorFn)(Control_Applicative.liftA1(FRP_Behavior.applicativeABehavior(FRP_Event.functorEvent))(reframe(draw)))(function (event) {
              return FRP_Behavior.unfold(FRP_Event.eventIsEvent)(function (v) {
                  return function (st) {
                      if (v.value === "ABCa") {
                          return {
                              parabola: (function () {
                                  var v2 = convert(convTripletReduced)(st.parabola);
                                  return convert(convReducedTriple)({
                                      a: v.pos.x,
                                      b: v2.b,
                                      c: v2.c
                                  });
                              })(),
                              fromF: st.fromF,
                              previousX: st.previousX,
                              previousY: st.previousY,
                              toF: st.toF
                          };
                      };
                      if (v.value === "ABCb") {
                          return {
                              parabola: (function () {
                                  var v2 = convert(convTripletReduced)(st.parabola);
                                  return convert(convReducedTriple)({
                                      a: v2.a,
                                      b: v.pos.x,
                                      c: v2.c
                                  });
                              })(),
                              fromF: st.fromF,
                              previousX: st.previousX,
                              previousY: st.previousY,
                              toF: st.toF
                          };
                      };
                      if (v.value === "ABCc") {
                          return {
                              parabola: (function () {
                                  var v2 = convert(convTripletReduced)(st.parabola);
                                  return convert(convReducedTriple)({
                                      a: v2.a,
                                      b: v2.b,
                                      c: v.pos.x
                                  });
                              })(),
                              fromF: st.fromF,
                              previousX: st.previousX,
                              previousY: st.previousY,
                              toF: st.toF
                          };
                      };
                      if (v.value === "CANa") {
                          return {
                              parabola: (function () {
                                  var v2 = convert(convTripletCanonical)(st.parabola);
                                  return convert(convCanonicalTriplet)({
                                      a: v.pos.x,
                                      alpha: v2.alpha,
                                      beta: v2.beta
                                  });
                              })(),
                              fromF: st.fromF,
                              previousX: st.previousX,
                              previousY: st.previousY,
                              toF: st.toF
                          };
                      };
                      if (v.value === "CAN\u03b1") {
                          return {
                              parabola: (function () {
                                  var v2 = convert(convTripletCanonical)(st.parabola);
                                  return convert(convCanonicalTriplet)({
                                      a: v2.a,
                                      alpha: v.pos.x,
                                      beta: v2.beta
                                  });
                              })(),
                              fromF: st.fromF,
                              previousX: st.previousX,
                              previousY: st.previousY,
                              toF: st.toF
                          };
                      };
                      if (v.value === "CAN\u03b2") {
                          return {
                              parabola: (function () {
                                  var v2 = convert(convTripletCanonical)(st.parabola);
                                  return convert(convCanonicalTriplet)({
                                      a: v2.a,
                                      alpha: v2.alpha,
                                      beta: v.pos.x
                                  });
                              })(),
                              fromF: st.fromF,
                              previousX: st.previousX,
                              previousY: st.previousY,
                              toF: st.toF
                          };
                      };
                      if (v.value === "PTSx0") {
                          return {
                              parabola: {
                                  c0: {
                                      x: v.pos.x,
                                      y: st.parabola.c0.y
                                  },
                                  c1: st.parabola.c1,
                                  c2: st.parabola.c2
                              },
                              fromF: st.fromF,
                              previousX: st.previousX,
                              previousY: st.previousY,
                              toF: st.toF
                          };
                      };
                      if (v.value === "PTSy0") {
                          return {
                              parabola: {
                                  c0: {
                                      x: st.parabola.c0.x,
                                      y: v.pos.x
                                  },
                                  c1: st.parabola.c1,
                                  c2: st.parabola.c2
                              },
                              fromF: st.fromF,
                              previousX: st.previousX,
                              previousY: st.previousY,
                              toF: st.toF
                          };
                      };
                      if (v.value === "PTSx1") {
                          return {
                              parabola: {
                                  c0: st.parabola.c0,
                                  c1: {
                                      x: v.pos.x,
                                      y: st.parabola.c1.y
                                  },
                                  c2: st.parabola.c2
                              },
                              fromF: st.fromF,
                              previousX: st.previousX,
                              previousY: st.previousY,
                              toF: st.toF
                          };
                      };
                      if (v.value === "PTSy1") {
                          return {
                              parabola: {
                                  c0: st.parabola.c0,
                                  c1: {
                                      x: st.parabola.c1.x,
                                      y: v.pos.x
                                  },
                                  c2: st.parabola.c2
                              },
                              fromF: st.fromF,
                              previousX: st.previousX,
                              previousY: st.previousY,
                              toF: st.toF
                          };
                      };
                      if (v.value === "PTSx2") {
                          return {
                              parabola: {
                                  c0: st.parabola.c0,
                                  c1: st.parabola.c1,
                                  c2: {
                                      x: v.pos.x,
                                      y: st.parabola.c2.y
                                  }
                              },
                              fromF: st.fromF,
                              previousX: st.previousX,
                              previousY: st.previousY,
                              toF: st.toF
                          };
                      };
                      if (v.value === "PTSy2") {
                          return {
                              parabola: {
                                  c0: st.parabola.c0,
                                  c1: st.parabola.c1,
                                  c2: {
                                      x: st.parabola.c2.x,
                                      y: v.pos.x
                                  }
                              },
                              fromF: st.fromF,
                              previousX: st.previousX,
                              previousY: st.previousY,
                              toF: st.toF
                          };
                      };
                      if (v.value === "zoomOutX") {
                          return {
                              fromF: {
                                  halfWidth: st.fromF.halfWidth * 1.1,
                                  halfHeight: st.fromF.halfHeight,
                                  center: st.fromF.center
                              },
                              parabola: st.parabola,
                              previousX: st.previousX,
                              previousY: st.previousY,
                              toF: st.toF
                          };
                      };
                      if (v.value === "zoomInX") {
                          return {
                              fromF: {
                                  halfWidth: st.fromF.halfWidth / 1.1,
                                  halfHeight: st.fromF.halfHeight,
                                  center: st.fromF.center
                              },
                              parabola: st.parabola,
                              previousX: st.previousX,
                              previousY: st.previousY,
                              toF: st.toF
                          };
                      };
                      if (v.value === "zoomOutY") {
                          return {
                              fromF: {
                                  halfHeight: st.fromF.halfHeight * 1.1,
                                  halfWidth: st.fromF.halfWidth,
                                  center: st.fromF.center
                              },
                              parabola: st.parabola,
                              previousX: st.previousX,
                              previousY: st.previousY,
                              toF: st.toF
                          };
                      };
                      if (v.value === "zoomInY") {
                          return {
                              fromF: {
                                  halfHeight: st.fromF.halfHeight / 1.1,
                                  halfWidth: st.fromF.halfWidth,
                                  center: st.fromF.center
                              },
                              parabola: st.parabola,
                              previousX: st.previousX,
                              previousY: st.previousY,
                              toF: st.toF
                          };
                      };
                      if (v.value === "buttonup") {
                          return {
                              previousX: v.pos.x,
                              previousY: v.pos.y,
                              fromF: st.fromF,
                              parabola: st.parabola,
                              toF: st.toF
                          };
                      };
                      if (v.value === "buttondown") {
                          var previous = Graphics_Canvas_Geometry.point("")(st.previousX)(st.previousY);
                          var $442 = inBox(st.toF)(previous);
                          if ($442) {
                              var q0 = remap(st.toF)(Graphics_Canvas_Geometry.point("")(v.pos.x)(st.previousY))(st.fromF);
                              var q = remap(st.toF)(Graphics_Canvas_Geometry.point("")(v.pos.x)(v.pos.y))(st.fromF);
                              var p = remap(st.toF)(previous)(st.fromF);
                              return {
                                  fromF: {
                                      center: Graphics_Canvas_Geometry.plus(Graphics_Canvas_Geometry.summublePointVector)(st.fromF.center)(Graphics_Canvas_Geometry.vector(q)(p)),
                                      halfHeight: st.fromF.halfHeight,
                                      halfWidth: st.fromF.halfWidth
                                  },
                                  previousX: v.pos.x,
                                  previousY: v.pos.y,
                                  parabola: st.parabola,
                                  toF: st.toF
                              };
                          };
                          return st;
                      };
                      return st;
                  };
              })(Data_Foldable.foldr(Data_Foldable.foldableArray)(Control_Alt.alt(FRP_Event.altEvent))(event)(Data_Functor.map(Data_Functor.functorArray)(function (v) {
                  return v.event;
              })(events)))(initialState);
          }))(moveWithButton);
      };
  };
  var convCanonicalFactorized = new Convertible(function (v) {
      var v1 = convert(convCanonicalReduced)(v);
      var delta = v1.b * v1.b - 4.0 * v1.a * v1.c;
      var $449 = delta < 0.0;
      if ($449) {
          return Data_Maybe.Nothing.value;
      };
      return Data_Maybe.Just.create({
          a: v1.a,
          x1: (-v1.b + $$Math.sqrt(delta)) / 2.0 / v1.a,
          x2: (-v1.b - $$Math.sqrt(delta)) / 2.0 / v1.a
      });
  });
  var cbOption = function (doc) {
      return function (ev) {
          return function __do() {
              var v = DOM_Editor.getElementById("memo")(doc)();
              var v1 = DOM_Editor.textContent(v)();
              var v2 = DOM_Editor.getElementById(v1)(doc)();
              var v3 = DOM_Editor.selectedValueFromEvent(ev)();
              var v4 = (function () {
                  if (v3 === "fromABC") {
                      var v4 = DOM_Editor.setTextContent("Reduced")(v)();
                      return DOM_Editor.getElementById("Reduced")(doc)();
                  };
                  if (v3 === "fromCanonical") {
                      var v4 = DOM_Editor.setTextContent("Canonical")(v)();
                      return DOM_Editor.getElementById("Canonical")(doc)();
                  };
                  if (v3 === "fromThreePoints") {
                      var v4 = DOM_Editor.setTextContent("ThreePoints")(v)();
                      return DOM_Editor.getElementById("ThreePoints")(doc)();
                  };
                  throw new Error("Failed pattern match at Main (line 591, column 14 - line 600, column 47): " + [ v3.constructor.name ]);
              })();
              var v5 = DOM_Editor.setAttribute("style")("display: none;")(v2)();
              var v6 = DOM_Editor.setAttribute("style")("display: inline;")(v4)();
              return Data_Unit.unit;
          };
      };
  };
  var cbInput = function (msg) {
      return function (v) {
          return function (doc) {
              return function (ev) {
                  return function __do() {
                      var v1 = DOM_Editor.inputedValueFromEvent(ev)();
                      var v2 = DOM_Editor.getElementById("reduced")(doc)();
                      var v3 = DOM_Editor.getElementById("canonical")(doc)();
                      var v4 = DOM_Editor.getElementById("factorized")(doc)();
                      v.push({
                          value: msg,
                          pos: {
                              x: $foreign.fromString(v1),
                              y: 0.0
                          }
                      })();
                      var v5 = DOM_Editor.getElementById("ABCa")(doc)();
                      var v6 = DOM_Editor.getElementById("ABCb")(doc)();
                      var v7 = DOM_Editor.getElementById("ABCc")(doc)();
                      var v8 = DOM_Editor.getElementById("CANa")(doc)();
                      var v9 = DOM_Editor.getElementById("CAN\u03b1")(doc)();
                      var v10 = DOM_Editor.getElementById("CAN\u03b2")(doc)();
                      var v11 = DOM_Editor.getElementById("PTSx0")(doc)();
                      var v12 = DOM_Editor.getElementById("PTSy0")(doc)();
                      var v13 = DOM_Editor.getElementById("PTSx1")(doc)();
                      var v14 = DOM_Editor.getElementById("PTSy1")(doc)();
                      var v15 = DOM_Editor.getElementById("PTSx2")(doc)();
                      var v16 = DOM_Editor.getElementById("PTSy2")(doc)();
                      var v17 = (function () {
                          var v17 = Data_String_CodeUnits.stripPrefix("ABC")(msg);
                          if (v17 instanceof Data_Maybe.Just) {
                              var v18 = DOM_Editor.inputedValue(v5)();
                              var v19 = DOM_Editor.inputedValue(v6)();
                              var v20 = DOM_Editor.inputedValue(v7)();
                              var red = {
                                  a: $foreign.fromString(v18),
                                  b: $foreign.fromString(v19),
                                  c: $foreign.fromString(v20)
                              };
                              var v21 = convert(convReducedCanonical)(red);
                              var v22 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v21.a))(v8)();
                              var v23 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v21.alpha))(v9)();
                              var v24 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v21.beta))(v10)();
                              var v25 = convert(convReducedTriple)(red);
                              var v26 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v25.c0.x))(v11)();
                              var v27 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v25.c0.y))(v12)();
                              var v28 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v25.c1.x))(v13)();
                              var v29 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v25.c1.y))(v14)();
                              var v30 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v25.c2.x))(v15)();
                              var v31 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v25.c2.y))(v16)();
                              var mFact = convert(convCanonicalFactorized)(v21);
                              return expressions(red)(v2)(v21)(v3)(mFact)(v4)();
                          };
                          return Data_Unit.unit;
                      })();
                      var v18 = (function () {
                          var v18 = Data_String_CodeUnits.stripPrefix("CAN")(msg);
                          if (v18 instanceof Data_Maybe.Just) {
                              var v19 = DOM_Editor.inputedValue(v8)();
                              var v20 = DOM_Editor.inputedValue(v9)();
                              var v21 = DOM_Editor.inputedValue(v10)();
                              var can = {
                                  a: $foreign.fromString(v19),
                                  alpha: $foreign.fromString(v20),
                                  beta: $foreign.fromString(v21)
                              };
                              var v22 = convert(convCanonicalReduced)(can);
                              var v23 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v22.a))(v5)();
                              var v24 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v22.b))(v6)();
                              var v25 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v22.c))(v7)();
                              var v26 = convert(convReducedTriple)(v22);
                              var v27 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v26.c0.x))(v11)();
                              var v28 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v26.c0.y))(v12)();
                              var v29 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v26.c1.x))(v13)();
                              var v30 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v26.c1.y))(v14)();
                              var v31 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v26.c2.x))(v15)();
                              var v32 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v26.c2.y))(v16)();
                              var mFact = convert(convCanonicalFactorized)(can);
                              return expressions(v22)(v2)(can)(v3)(mFact)(v4)();
                          };
                          return Data_Unit.unit;
                      })();
                      var v19 = (function () {
                          var v19 = Data_String_CodeUnits.stripPrefix("PTS")(msg);
                          if (v19 instanceof Data_Maybe.Just) {
                              var v20 = DOM_Editor.inputedValue(v11)();
                              var v21 = DOM_Editor.inputedValue(v12)();
                              var v22 = DOM_Editor.inputedValue(v13)();
                              var v23 = DOM_Editor.inputedValue(v14)();
                              var v24 = DOM_Editor.inputedValue(v15)();
                              var v25 = DOM_Editor.inputedValue(v16)();
                              var tri = {
                                  c0: {
                                      x: $foreign.fromString(v20),
                                      y: $foreign.fromString(v21)
                                  },
                                  c1: {
                                      x: $foreign.fromString(v22),
                                      y: $foreign.fromString(v23)
                                  },
                                  c2: {
                                      x: $foreign.fromString(v24),
                                      y: $foreign.fromString(v25)
                                  }
                              };
                              var v26 = convert(convTripletReduced)(tri);
                              var v27 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v26.a))(v5)();
                              var v28 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v26.b))(v6)();
                              var v29 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v26.c))(v7)();
                              var v30 = convert(convReducedCanonical)(v26);
                              var v31 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v30.a))(v8)();
                              var v32 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v30.alpha))(v9)();
                              var v33 = DOM_Editor.setInputValue(Data_Show.show(Data_Show.showNumber)(v30.beta))(v10)();
                              var mFact = convert(convCanonicalFactorized)(v30);
                              return expressions(v26)(v2)(v30)(v3)(mFact)(v4)();
                          };
                          return Data_Unit.unit;
                      })();
                      return Data_Unit.unit;
                  };
              };
          };
      };
  };
  var input = function (id) {
      return function (ini) {
          return function (bev) {
              return function (div) {
                  return function (doc) {
                      return function __do() {
                          var v = DOM_Editor.createElement("label")(doc)();
                          var str = Data_String_CodePoints.drop(3)(id);
                          var v1 = DOM_Editor.setTextContent(str + ": ")(v)();
                          var v2 = DOM_Editor.appendChild(v)(div)();
                          var v3 = DOM_Editor.createElement("input")(doc)();
                          var v4 = DOM_Editor.setId(id)(v3)();
                          var v5 = DOM_Editor.setInputValue(ini)(v3)();
                          var v6 = DOM_Editor.addEventListener(cbInput(id)(bev)(doc))(DOM_Editor.change)(v3)();
                          var v7 = DOM_Editor.appendChild(v3)(div)();
                          var v8 = DOM_Editor.createElement("br")(doc)();
                          var v9 = DOM_Editor.appendChild(v8)(div)();
                          return Data_Unit.unit;
                      };
                  };
              };
          };
      };
  };
  var inputABC = function (bevent) {
      return function (div) {
          return function (doc) {
              return function __do() {
                  var v = input("ABCa")("1.0")(bevent)(div)(doc)();
                  var v1 = input("ABCb")("0.0")(bevent)(div)(doc)();
                  var v2 = input("ABCc")("0.0")(bevent)(div)(doc)();
                  return Data_Unit.unit;
              };
          };
      };
  };
  var inputCanonical = function (bevent) {
      return function (div) {
          return function (doc) {
              return function __do() {
                  var v = input("CANa")("1.0")(bevent)(div)(doc)();
                  var v1 = input("CAN\u03b1")("0.0")(bevent)(div)(doc)();
                  var v2 = input("CAN\u03b2")("0.0")(bevent)(div)(doc)();
                  return Data_Unit.unit;
              };
          };
      };
  };
  var inputThreePoints = function (bevent) {
      return function (div) {
          return function (doc) {
              return function __do() {
                  var v = input("PTSx0")("-1.0")(bevent)(div)(doc)();
                  var v1 = input("PTSy0")("1.0")(bevent)(div)(doc)();
                  var v2 = input("PTSx1")("0.0")(bevent)(div)(doc)();
                  var v3 = input("PTSy1")("0.0")(bevent)(div)(doc)();
                  var v4 = input("PTSx2")("1.0")(bevent)(div)(doc)();
                  var v5 = input("PTSy2")("1.0")(bevent)(div)(doc)();
                  return Data_Unit.unit;
              };
          };
      };
  };
  var cbButton = function (msg) {
      return function (v) {
          return function (ev) {
              return v.push({
                  value: msg,
                  pos: {
                      x: 0.0,
                      y: 0.0
                  }
              });
          };
      };
  };
  var mkButtonEvent = function (node) {
      return function (msg) {
          return function (doc) {
              return function __do() {
                  var v = DOM_Editor.createElement("button")(doc)();
                  var v1 = DOM_Editor.setTextContent(msg)(v)();
                  var v2 = DOM_Editor.appendChild(v)(node)();
                  var v3 = FRP_Event.create();
                  var v4 = DOM_Editor.addEventListener(cbButton(msg)(v3))(DOM_Editor.click)(v)();
                  return v3;
              };
          };
      };
  };
  var blue = Color.rgb(6)(2)(198);
  var beige = Graphics_Drawing.fillColor(Color.rgb(255)(255)(175));
  var main = function __do() {
      var v = DOM_Editor.setup();
      var v1 = DOM_Editor.getElementById("canvas")(v.document)();
      var v2 = DOM_Editor.getContext2D(v1)();
      var v3 = DOM_Editor.setAttribute("width")(Data_Show.show(Data_Show.showNumber)(width))(v1)();
      var v4 = DOM_Editor.setAttribute("height")(Data_Show.show(Data_Show.showNumber)(height))(v1)();
      var ctx = {
          color: Color.rgb(5)(4)(9),
          lineWidth: 1.5
      };
      var background = Graphics_Drawing.filled(white)(Graphics_Drawing.rectangle(0.0)(0.0)(width)(height));
      var functionBkg = Graphics_Drawing.filled(beige)(curryBox(Graphics_Drawing.rectangle)(window));
      var v5 = DOM_Editor.createElement("div")(v.document)();
      var v6 = mkButtonEvent(v5)("zoomOutX")(v.document)();
      var v7 = mkButtonEvent(v5)("zoomInX")(v.document)();
      var v8 = mkButtonEvent(v5)("zoomOutY")(v.document)();
      var v9 = mkButtonEvent(v5)("zoomInY")(v.document)();
      var v10 = FRP_Event.create();
      var v11 = DOM_Editor.createElement("div")(v.document)();
      var v12 = inputABC(v10)(v11)(v.document)();
      var v13 = DOM_Editor.setId("Reduced")(v11)();
      var v14 = DOM_Editor.setAttribute("style")("display: inline;")(v11)();
      var v15 = DOM_Editor.createElement("div")(v.document)();
      var v16 = inputThreePoints(v10)(v15)(v.document)();
      var v17 = DOM_Editor.setId("ThreePoints")(v15)();
      var v18 = DOM_Editor.setAttribute("style")("display: none;")(v15)();
      var v19 = DOM_Editor.createElement("div")(v.document)();
      var v20 = inputCanonical(v10)(v19)(v.document)();
      var v21 = DOM_Editor.setId("Canonical")(v19)();
      var v22 = DOM_Editor.setAttribute("style")("display: none;")(v19)();
      var v23 = DOM_Editor.createElement("select")(v.document)();
      var v24 = mkOption(v)(v23)("fromABC")();
      var v25 = mkOption(v)(v23)("fromCanonical")();
      var v26 = mkOption(v)(v23)("fromThreePoints")();
      var v27 = DOM_Editor.addEventListener(cbOption(v.document))(DOM_Editor.change)(v23)();
      var v28 = DOM_Editor.appendChild(v23)(v5)();
      var v29 = Control_Bind.bind(Effect.bindEffect)(DOM_Editor.createElement("br")(v.document))(Data_Function.flip(DOM_Editor.appendChild)(v5))();
      var v30 = DOM_Editor.appendChild(v11)(v5)();
      var v31 = DOM_Editor.appendChild(v15)(v5)();
      var v32 = DOM_Editor.appendChild(v19)(v5)();
      var v33 = Control_Bind.bind(Effect.bindEffect)(DOM_Editor.createElement("br")(v.document))(Data_Function.flip(DOM_Editor.appendChild)(v5))();
      var v34 = DOM_Editor.createElement("label")(v.document)();
      var v35 = DOM_Editor.setId("reduced")(v34)();
      var v36 = DOM_Editor.appendChild(v34)(v5)();
      var v37 = Control_Bind.bind(Effect.bindEffect)(DOM_Editor.createElement("br")(v.document))(Data_Function.flip(DOM_Editor.appendChild)(v5))();
      var v38 = DOM_Editor.createElement("label")(v.document)();
      var v39 = DOM_Editor.setId("canonical")(v38)();
      var v40 = DOM_Editor.appendChild(v38)(v5)();
      var v41 = Control_Bind.bind(Effect.bindEffect)(DOM_Editor.createElement("br")(v.document))(Data_Function.flip(DOM_Editor.appendChild)(v5))();
      var v42 = DOM_Editor.createElement("label")(v.document)();
      var v43 = DOM_Editor.setId("factorized")(v42)();
      var v44 = DOM_Editor.appendChild(v42)(v5)();
      var v45 = Control_Bind.bind(Effect.bindEffect)(DOM_Editor.createElement("br")(v.document))(Data_Function.flip(DOM_Editor.appendChild)(v5))();
      var v46 = DOM_Editor.createElement("label")(v.document)();
      var v47 = DOM_Editor.setId("memo")(v46)();
      var v48 = DOM_Editor.setAttribute("style")("display: none;")(v46)();
      var v49 = DOM_Editor.setTextContent("Reduced")(v46)();
      var v50 = DOM_Editor.appendChild(v46)(v5)();
      var v51 = DOM_Editor.appendChild(v5)(v.body)();
      var v52 = DOM_Editor.setAttribute("style")("display: grid; grid-template-columns: repeat(2, 1fr);")(v.body)();
      var v53 = ePage([ v6, v7, v8, v9, v10 ])((function (dictDrawableSet) {
          return Graphics_Canvas_Geometry.drawIn(dictDrawableSet)(ctx);
      })(drawableFinal))();
      var v54 = FRP_Behavior.animate(Data_Semigroup.append(FRP_Behavior.semigroupABehavior(FRP_Event.functorEvent)(Graphics_Drawing.semigroupDrawing))(Control_Applicative.pure(FRP_Behavior.applicativeABehavior(FRP_Event.functorEvent))(background))(Data_Semigroup.append(FRP_Behavior.semigroupABehavior(FRP_Event.functorEvent)(Graphics_Drawing.semigroupDrawing))(Control_Applicative.pure(FRP_Behavior.applicativeABehavior(FRP_Event.functorEvent))(functionBkg))(Data_Semigroup.append(FRP_Behavior.semigroupABehavior(FRP_Event.functorEvent)(Graphics_Drawing.semigroupDrawing))(v53)(Control_Applicative.pure(FRP_Behavior.applicativeABehavior(FRP_Event.functorEvent))(Graphics_Canvas_Geometry.drawIn(Graphics_Canvas_Geometry.drawableSequence(Graphics_Canvas_Geometry.drawableSegment))(ctx)(frame(window)))))))(Graphics_Drawing.render(v2))();
      return Data_Unit.unit;
  };
  exports["convert"] = convert;
  exports["width"] = width;
  exports["height"] = height;
  exports["density"] = density;
  exports["white"] = white;
  exports["beige"] = beige;
  exports["blue"] = blue;
  exports["purple"] = purple;
  exports["Function"] = $$Function;
  exports["Canonical"] = Canonical;
  exports["Reduced"] = Reduced;
  exports["Triplet"] = Triplet;
  exports["Factorized"] = Factorized;
  exports["Convertible"] = Convertible;
  exports["pen"] = pen;
  exports["plot"] = plot;
  exports["remap"] = remap;
  exports["window"] = window;
  exports["local"] = local;
  exports["frame"] = frame;
  exports["somePosition"] = somePosition;
  exports["moveWithButton"] = moveWithButton;
  exports["FA"] = FA;
  exports["FP"] = FP;
  exports["FL"] = FL;
  exports["FC"] = FC;
  exports["FH"] = FH;
  exports["FS"] = FS;
  exports["grid"] = grid;
  exports["initialState"] = initialState;
  exports["digit3"] = digit3;
  exports["reframe"] = reframe;
  exports["ePage"] = ePage;
  exports["inInterval"] = inInterval;
  exports["inBox"] = inBox;
  exports["segmentInBox"] = segmentInBox;
  exports["lineInBox"] = lineInBox;
  exports["cbButton"] = cbButton;
  exports["mkButtonEvent"] = mkButtonEvent;
  exports["cbInput"] = cbInput;
  exports["expressions"] = expressions;
  exports["input"] = input;
  exports["inputABC"] = inputABC;
  exports["inputCanonical"] = inputCanonical;
  exports["inputThreePoints"] = inputThreePoints;
  exports["cbOption"] = cbOption;
  exports["mkOption"] = mkOption;
  exports["curryBox"] = curryBox;
  exports["main"] = main;
  exports["convCanonicalFactorized"] = convCanonicalFactorized;
  exports["convReducedCanonical"] = convReducedCanonical;
  exports["convCanonicalFunction"] = convCanonicalFunction;
  exports["convCanonicalReduced"] = convCanonicalReduced;
  exports["convReducedFunction"] = convReducedFunction;
  exports["convFunctionReduced"] = convFunctionReduced;
  exports["convFunctionCanonical"] = convFunctionCanonical;
  exports["convFunctionTriplet"] = convFunctionTriplet;
  exports["convTripletFunction"] = convTripletFunction;
  exports["convTripletReduced"] = convTripletReduced;
  exports["convReducedTriple"] = convReducedTriple;
  exports["convTripletCanonical"] = convTripletCanonical;
  exports["convCanonicalTriplet"] = convCanonicalTriplet;
  exports["drawableFinal"] = drawableFinal;
  exports["fromString"] = $foreign.fromString;
})(PS);
PS["Main"].main();