/* Generated by Spago v0.93.43 */
(() => {
  // output/Control.Apply/foreign.js
  var arrayApply = function(fs) {
    return function(xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l * k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };

  // output/Control.Semigroupoid/index.js
  var semigroupoidFn = {
    compose: function(f) {
      return function(g) {
        return function(x) {
          return f(g(x));
        };
      };
    }
  };
  var compose = function(dict) {
    return dict.compose;
  };
  var composeFlipped = function(dictSemigroupoid) {
    var compose1 = compose(dictSemigroupoid);
    return function(f) {
      return function(g) {
        return compose1(g)(f);
      };
    };
  };

  // output/Control.Category/index.js
  var identity = function(dict) {
    return dict.identity;
  };
  var categoryFn = {
    identity: function(x) {
      return x;
    },
    Semigroupoid0: function() {
      return semigroupoidFn;
    }
  };

  // output/Data.Boolean/index.js
  var otherwise = true;

  // output/Data.Function/index.js
  var flip = function(f) {
    return function(b) {
      return function(a2) {
        return f(a2)(b);
      };
    };
  };
  var $$const = function(a2) {
    return function(v) {
      return a2;
    };
  };
  var applyFlipped = function(x) {
    return function(f) {
      return f(x);
    };
  };
  var apply = function(f) {
    return function(x) {
      return f(x);
    };
  };

  // output/Data.Functor/foreign.js
  var arrayMap = function(f) {
    return function(arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  // output/Data.Unit/foreign.js
  var unit = void 0;

  // output/Type.Proxy/index.js
  var $$Proxy = /* @__PURE__ */ function() {
    function $$Proxy2() {
    }
    ;
    $$Proxy2.value = new $$Proxy2();
    return $$Proxy2;
  }();

  // output/Data.Functor/index.js
  var map = function(dict) {
    return dict.map;
  };
  var mapFlipped = function(dictFunctor) {
    var map111 = map(dictFunctor);
    return function(fa) {
      return function(f) {
        return map111(f)(fa);
      };
    };
  };
  var $$void = function(dictFunctor) {
    return map(dictFunctor)($$const(unit));
  };
  var voidLeft = function(dictFunctor) {
    var map111 = map(dictFunctor);
    return function(f) {
      return function(x) {
        return map111($$const(x))(f);
      };
    };
  };
  var functorFn = {
    map: /* @__PURE__ */ compose(semigroupoidFn)
  };
  var functorArray = {
    map: arrayMap
  };

  // output/Control.Apply/index.js
  var identity2 = /* @__PURE__ */ identity(categoryFn);
  var applyArray = {
    apply: arrayApply,
    Functor0: function() {
      return functorArray;
    }
  };
  var apply2 = function(dict) {
    return dict.apply;
  };
  var applySecond = function(dictApply) {
    var apply12 = apply2(dictApply);
    var map21 = map(dictApply.Functor0());
    return function(a2) {
      return function(b) {
        return apply12(map21($$const(identity2))(a2))(b);
      };
    };
  };
  var lift2 = function(dictApply) {
    var apply12 = apply2(dictApply);
    var map21 = map(dictApply.Functor0());
    return function(f) {
      return function(a2) {
        return function(b) {
          return apply12(map21(f)(a2))(b);
        };
      };
    };
  };

  // output/Control.Applicative/index.js
  var pure = function(dict) {
    return dict.pure;
  };
  var when = function(dictApplicative) {
    var pure15 = pure(dictApplicative);
    return function(v) {
      return function(v1) {
        if (v) {
          return v1;
        }
        ;
        if (!v) {
          return pure15(unit);
        }
        ;
        throw new Error("Failed pattern match at Control.Applicative (line 63, column 1 - line 63, column 63): " + [v.constructor.name, v1.constructor.name]);
      };
    };
  };
  var liftA1 = function(dictApplicative) {
    var apply8 = apply2(dictApplicative.Apply0());
    var pure15 = pure(dictApplicative);
    return function(f) {
      return function(a2) {
        return apply8(pure15(f))(a2);
      };
    };
  };

  // output/Control.Bind/foreign.js
  var arrayBind = typeof Array.prototype.flatMap === "function" ? function(arr) {
    return function(f) {
      return arr.flatMap(f);
    };
  } : function(arr) {
    return function(f) {
      var result = [];
      var l = arr.length;
      for (var i = 0; i < l; i++) {
        var xs = f(arr[i]);
        var k = xs.length;
        for (var j = 0; j < k; j++) {
          result.push(xs[j]);
        }
      }
      return result;
    };
  };

  // output/Control.Bind/index.js
  var identity3 = /* @__PURE__ */ identity(categoryFn);
  var discard = function(dict) {
    return dict.discard;
  };
  var bindArray = {
    bind: arrayBind,
    Apply0: function() {
      return applyArray;
    }
  };
  var bind = function(dict) {
    return dict.bind;
  };
  var bindFlipped = function(dictBind) {
    return flip(bind(dictBind));
  };
  var composeKleisli = function(dictBind) {
    var bind1 = bind(dictBind);
    return function(f) {
      return function(g) {
        return function(a2) {
          return bind1(f(a2))(g);
        };
      };
    };
  };
  var discardUnit = {
    discard: function(dictBind) {
      return bind(dictBind);
    }
  };
  var join = function(dictBind) {
    var bind1 = bind(dictBind);
    return function(m) {
      return bind1(m)(identity3);
    };
  };

  // output/Data.Eq/foreign.js
  var refEq = function(r1) {
    return function(r2) {
      return r1 === r2;
    };
  };
  var eqBooleanImpl = refEq;
  var eqIntImpl = refEq;
  var eqNumberImpl = refEq;

  // output/Data.Eq/index.js
  var eqNumber = {
    eq: eqNumberImpl
  };
  var eqInt = {
    eq: eqIntImpl
  };
  var eqBoolean = {
    eq: eqBooleanImpl
  };
  var eq = function(dict) {
    return dict.eq;
  };
  var eq2 = /* @__PURE__ */ eq(eqBoolean);
  var notEq = function(dictEq) {
    var eq32 = eq(dictEq);
    return function(x) {
      return function(y) {
        return eq2(eq32(x)(y))(false);
      };
    };
  };

  // output/Data.Foldable/foreign.js
  var foldrArray = function(f) {
    return function(init3) {
      return function(xs) {
        var acc = init3;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };
  var foldlArray = function(f) {
    return function(init3) {
      return function(xs) {
        var acc = init3;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };

  // output/Data.Semigroup/foreign.js
  var concatArray = function(xs) {
    return function(ys) {
      if (xs.length === 0)
        return ys;
      if (ys.length === 0)
        return xs;
      return xs.concat(ys);
    };
  };

  // output/Data.Semigroup/index.js
  var semigroupUnit = {
    append: function(v) {
      return function(v1) {
        return unit;
      };
    }
  };
  var semigroupArray = {
    append: concatArray
  };
  var append = function(dict) {
    return dict.append;
  };

  // output/Control.Alt/index.js
  var alt = function(dict) {
    return dict.alt;
  };

  // output/Control.Plus/index.js
  var empty = function(dict) {
    return dict.empty;
  };

  // output/Data.Bounded/foreign.js
  var topInt = 2147483647;
  var bottomInt = -2147483648;
  var topChar = String.fromCharCode(65535);
  var bottomChar = String.fromCharCode(0);
  var topNumber = Number.POSITIVE_INFINITY;
  var bottomNumber = Number.NEGATIVE_INFINITY;

  // output/Data.Ord/foreign.js
  var unsafeCompareImpl = function(lt) {
    return function(eq4) {
      return function(gt) {
        return function(x) {
          return function(y) {
            return x < y ? lt : x === y ? eq4 : gt;
          };
        };
      };
    };
  };
  var ordIntImpl = unsafeCompareImpl;

  // output/Data.Ordering/index.js
  var LT = /* @__PURE__ */ function() {
    function LT2() {
    }
    ;
    LT2.value = new LT2();
    return LT2;
  }();
  var GT = /* @__PURE__ */ function() {
    function GT2() {
    }
    ;
    GT2.value = new GT2();
    return GT2;
  }();
  var EQ = /* @__PURE__ */ function() {
    function EQ2() {
    }
    ;
    EQ2.value = new EQ2();
    return EQ2;
  }();

  // output/Data.Semiring/foreign.js
  var intAdd = function(x) {
    return function(y) {
      return x + y | 0;
    };
  };
  var intMul = function(x) {
    return function(y) {
      return x * y | 0;
    };
  };
  var numAdd = function(n1) {
    return function(n2) {
      return n1 + n2;
    };
  };
  var numMul = function(n1) {
    return function(n2) {
      return n1 * n2;
    };
  };

  // output/Data.Semiring/index.js
  var zero = function(dict) {
    return dict.zero;
  };
  var semiringNumber = {
    add: numAdd,
    zero: 0,
    mul: numMul,
    one: 1
  };
  var semiringInt = {
    add: intAdd,
    zero: 0,
    mul: intMul,
    one: 1
  };
  var one = function(dict) {
    return dict.one;
  };
  var mul = function(dict) {
    return dict.mul;
  };
  var add = function(dict) {
    return dict.add;
  };

  // output/Data.Ord/index.js
  var ordInt = /* @__PURE__ */ function() {
    return {
      compare: ordIntImpl(LT.value)(EQ.value)(GT.value),
      Eq0: function() {
        return eqInt;
      }
    };
  }();
  var compare = function(dict) {
    return dict.compare;
  };
  var max = function(dictOrd) {
    var compare3 = compare(dictOrd);
    return function(x) {
      return function(y) {
        var v = compare3(x)(y);
        if (v instanceof LT) {
          return y;
        }
        ;
        if (v instanceof EQ) {
          return x;
        }
        ;
        if (v instanceof GT) {
          return x;
        }
        ;
        throw new Error("Failed pattern match at Data.Ord (line 181, column 3 - line 184, column 12): " + [v.constructor.name]);
      };
    };
  };
  var min = function(dictOrd) {
    var compare3 = compare(dictOrd);
    return function(x) {
      return function(y) {
        var v = compare3(x)(y);
        if (v instanceof LT) {
          return x;
        }
        ;
        if (v instanceof EQ) {
          return x;
        }
        ;
        if (v instanceof GT) {
          return y;
        }
        ;
        throw new Error("Failed pattern match at Data.Ord (line 172, column 3 - line 175, column 12): " + [v.constructor.name]);
      };
    };
  };
  var clamp = function(dictOrd) {
    var min1 = min(dictOrd);
    var max1 = max(dictOrd);
    return function(low2) {
      return function(hi) {
        return function(x) {
          return min1(hi)(max1(low2)(x));
        };
      };
    };
  };

  // output/Data.Bounded/index.js
  var top = function(dict) {
    return dict.top;
  };
  var boundedInt = {
    top: topInt,
    bottom: bottomInt,
    Ord0: function() {
      return ordInt;
    }
  };
  var bottom = function(dict) {
    return dict.bottom;
  };

  // output/Data.Show/foreign.js
  var showIntImpl = function(n) {
    return n.toString();
  };

  // output/Data.Show/index.js
  var showInt = {
    show: showIntImpl
  };
  var show = function(dict) {
    return dict.show;
  };

  // output/Data.Maybe/index.js
  var identity4 = /* @__PURE__ */ identity(categoryFn);
  var Nothing = /* @__PURE__ */ function() {
    function Nothing2() {
    }
    ;
    Nothing2.value = new Nothing2();
    return Nothing2;
  }();
  var Just = /* @__PURE__ */ function() {
    function Just2(value0) {
      this.value0 = value0;
    }
    ;
    Just2.create = function(value0) {
      return new Just2(value0);
    };
    return Just2;
  }();
  var maybe = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof Nothing) {
          return v;
        }
        ;
        if (v2 instanceof Just) {
          return v1(v2.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 237, column 1 - line 237, column 51): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var isNothing = /* @__PURE__ */ maybe(true)(/* @__PURE__ */ $$const(false));
  var isJust = /* @__PURE__ */ maybe(false)(/* @__PURE__ */ $$const(true));
  var functorMaybe = {
    map: function(v) {
      return function(v1) {
        if (v1 instanceof Just) {
          return new Just(v(v1.value0));
        }
        ;
        return Nothing.value;
      };
    }
  };
  var map2 = /* @__PURE__ */ map(functorMaybe);
  var fromMaybe = function(a2) {
    return maybe(a2)(identity4);
  };
  var fromJust = function() {
    return function(v) {
      if (v instanceof Just) {
        return v.value0;
      }
      ;
      throw new Error("Failed pattern match at Data.Maybe (line 288, column 1 - line 288, column 46): " + [v.constructor.name]);
    };
  };
  var applyMaybe = {
    apply: function(v) {
      return function(v1) {
        if (v instanceof Just) {
          return map2(v.value0)(v1);
        }
        ;
        if (v instanceof Nothing) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Functor0: function() {
      return functorMaybe;
    }
  };
  var bindMaybe = {
    bind: function(v) {
      return function(v1) {
        if (v instanceof Just) {
          return v1(v.value0);
        }
        ;
        if (v instanceof Nothing) {
          return Nothing.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Apply0: function() {
      return applyMaybe;
    }
  };
  var altMaybe = {
    alt: function(v) {
      return function(v1) {
        if (v instanceof Nothing) {
          return v1;
        }
        ;
        return v;
      };
    },
    Functor0: function() {
      return functorMaybe;
    }
  };
  var plusMaybe = /* @__PURE__ */ function() {
    return {
      empty: Nothing.value,
      Alt0: function() {
        return altMaybe;
      }
    };
  }();

  // output/Data.Either/index.js
  var Left = /* @__PURE__ */ function() {
    function Left2(value0) {
      this.value0 = value0;
    }
    ;
    Left2.create = function(value0) {
      return new Left2(value0);
    };
    return Left2;
  }();
  var Right = /* @__PURE__ */ function() {
    function Right2(value0) {
      this.value0 = value0;
    }
    ;
    Right2.create = function(value0) {
      return new Right2(value0);
    };
    return Right2;
  }();
  var either = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof Left) {
          return v(v2.value0);
        }
        ;
        if (v2 instanceof Right) {
          return v1(v2.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Either (line 208, column 1 - line 208, column 64): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var hush = /* @__PURE__ */ function() {
    return either($$const(Nothing.value))(Just.create);
  }();

  // output/Data.HeytingAlgebra/foreign.js
  var boolConj = function(b1) {
    return function(b2) {
      return b1 && b2;
    };
  };
  var boolDisj = function(b1) {
    return function(b2) {
      return b1 || b2;
    };
  };
  var boolNot = function(b) {
    return !b;
  };

  // output/Data.HeytingAlgebra/index.js
  var not = function(dict) {
    return dict.not;
  };
  var disj = function(dict) {
    return dict.disj;
  };
  var heytingAlgebraBoolean = {
    ff: false,
    tt: true,
    implies: function(a2) {
      return function(b) {
        return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a2))(b);
      };
    },
    conj: boolConj,
    disj: boolDisj,
    not: boolNot
  };

  // output/Data.Monoid/index.js
  var monoidUnit = {
    mempty: unit,
    Semigroup0: function() {
      return semigroupUnit;
    }
  };
  var mempty = function(dict) {
    return dict.mempty;
  };

  // output/Data.Tuple/index.js
  var Tuple = /* @__PURE__ */ function() {
    function Tuple2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Tuple2.create = function(value0) {
      return function(value1) {
        return new Tuple2(value0, value1);
      };
    };
    return Tuple2;
  }();
  var uncurry = function(f) {
    return function(v) {
      return f(v.value0)(v.value1);
    };
  };
  var snd = function(v) {
    return v.value1;
  };
  var functorTuple = {
    map: function(f) {
      return function(m) {
        return new Tuple(m.value0, f(m.value1));
      };
    }
  };
  var fst = function(v) {
    return v.value0;
  };

  // output/Unsafe.Coerce/foreign.js
  var unsafeCoerce2 = function(x) {
    return x;
  };

  // output/Safe.Coerce/index.js
  var coerce = function() {
    return unsafeCoerce2;
  };

  // output/Data.Newtype/index.js
  var coerce2 = /* @__PURE__ */ coerce();
  var unwrap = function() {
    return coerce2;
  };
  var unwrap1 = /* @__PURE__ */ unwrap();
  var un = function() {
    return function(v) {
      return unwrap1;
    };
  };

  // output/Data.Foldable/index.js
  var foldr = function(dict) {
    return dict.foldr;
  };
  var oneOf = function(dictFoldable) {
    var foldr22 = foldr(dictFoldable);
    return function(dictPlus) {
      return foldr22(alt(dictPlus.Alt0()))(empty(dictPlus));
    };
  };
  var oneOfMap = function(dictFoldable) {
    var foldr22 = foldr(dictFoldable);
    return function(dictPlus) {
      var alt8 = alt(dictPlus.Alt0());
      var empty10 = empty(dictPlus);
      return function(f) {
        return foldr22(function($453) {
          return alt8(f($453));
        })(empty10);
      };
    };
  };
  var traverse_ = function(dictApplicative) {
    var applySecond2 = applySecond(dictApplicative.Apply0());
    var pure7 = pure(dictApplicative);
    return function(dictFoldable) {
      var foldr22 = foldr(dictFoldable);
      return function(f) {
        return foldr22(function($454) {
          return applySecond2(f($454));
        })(pure7(unit));
      };
    };
  };
  var for_ = function(dictApplicative) {
    var traverse_1 = traverse_(dictApplicative);
    return function(dictFoldable) {
      return flip(traverse_1(dictFoldable));
    };
  };
  var foldl = function(dict) {
    return dict.foldl;
  };
  var foldableMaybe = {
    foldr: function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Nothing) {
            return v1;
          }
          ;
          if (v2 instanceof Just) {
            return v(v2.value0)(v1);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    },
    foldl: function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Nothing) {
            return v1;
          }
          ;
          if (v2 instanceof Just) {
            return v(v1)(v2.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    },
    foldMap: function(dictMonoid) {
      var mempty3 = mempty(dictMonoid);
      return function(v) {
        return function(v1) {
          if (v1 instanceof Nothing) {
            return mempty3;
          }
          ;
          if (v1 instanceof Just) {
            return v(v1.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name]);
        };
      };
    }
  };
  var foldMapDefaultR = function(dictFoldable) {
    var foldr22 = foldr(dictFoldable);
    return function(dictMonoid) {
      var append6 = append(dictMonoid.Semigroup0());
      var mempty3 = mempty(dictMonoid);
      return function(f) {
        return foldr22(function(x) {
          return function(acc) {
            return append6(f(x))(acc);
          };
        })(mempty3);
      };
    };
  };
  var foldableArray = {
    foldr: foldrArray,
    foldl: foldlArray,
    foldMap: function(dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
    }
  };

  // output/Data.Array/foreign.js
  var replicateFill = function(count2, value13) {
    if (count2 < 1) {
      return [];
    }
    var result = new Array(count2);
    return result.fill(value13);
  };
  var replicatePolyfill = function(count2, value13) {
    var result = [];
    var n = 0;
    for (var i = 0; i < count2; i++) {
      result[n++] = value13;
    }
    return result;
  };
  var replicateImpl = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;
  var fromFoldableImpl = function() {
    function Cons2(head3, tail3) {
      this.head = head3;
      this.tail = tail3;
    }
    var emptyList = {};
    function curryCons(head3) {
      return function(tail3) {
        return new Cons2(head3, tail3);
      };
    }
    function listToArray(list) {
      var result = [];
      var count2 = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count2++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }
    return function(foldr4, xs) {
      return listToArray(foldr4(curryCons)(emptyList)(xs));
    };
  }();
  var length = function(xs) {
    return xs.length;
  };
  var indexImpl = function(just, nothing, xs, i) {
    return i < 0 || i >= xs.length ? nothing : just(xs[i]);
  };
  var filterImpl = function(f, xs) {
    return xs.filter(f);
  };
  var partitionImpl = function(f, xs) {
    var yes = [];
    var no = [];
    for (var i = 0; i < xs.length; i++) {
      var x = xs[i];
      if (f(x))
        yes.push(x);
      else
        no.push(x);
    }
    return { yes, no };
  };
  var sortByImpl = function() {
    function mergeFromTo(compare2, fromOrdering, xs1, xs2, from2, to) {
      var mid;
      var i;
      var j;
      var k;
      var x;
      var y;
      var c;
      mid = from2 + (to - from2 >> 1);
      if (mid - from2 > 1)
        mergeFromTo(compare2, fromOrdering, xs2, xs1, from2, mid);
      if (to - mid > 1)
        mergeFromTo(compare2, fromOrdering, xs2, xs1, mid, to);
      i = from2;
      j = mid;
      k = from2;
      while (i < mid && j < to) {
        x = xs2[i];
        y = xs2[j];
        c = fromOrdering(compare2(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        } else {
          xs1[k++] = x;
          ++i;
        }
      }
      while (i < mid) {
        xs1[k++] = xs2[i++];
      }
      while (j < to) {
        xs1[k++] = xs2[j++];
      }
    }
    return function(compare2, fromOrdering, xs) {
      var out;
      if (xs.length < 2)
        return xs;
      out = xs.slice(0);
      mergeFromTo(compare2, fromOrdering, out, xs.slice(0), 0, xs.length);
      return out;
    };
  }();
  var sliceImpl = function(s, e, l) {
    return l.slice(s, e);
  };
  var unsafeIndexImpl = function(xs, n) {
    return xs[n];
  };

  // output/Control.Monad/index.js
  var whenM = function(dictMonad) {
    var bind8 = bind(dictMonad.Bind1());
    var when4 = when(dictMonad.Applicative0());
    return function(mb) {
      return function(m) {
        return bind8(mb)(function(b) {
          return when4(b)(m);
        });
      };
    };
  };
  var ap = function(dictMonad) {
    var bind8 = bind(dictMonad.Bind1());
    var pure7 = pure(dictMonad.Applicative0());
    return function(f) {
      return function(a2) {
        return bind8(f)(function(f$prime) {
          return bind8(a2)(function(a$prime) {
            return pure7(f$prime(a$prime));
          });
        });
      };
    };
  };

  // output/Effect/foreign.js
  var pureE = function(a2) {
    return function() {
      return a2;
    };
  };
  var bindE = function(a2) {
    return function(f) {
      return function() {
        return f(a2())();
      };
    };
  };
  var forE = function(lo) {
    return function(hi) {
      return function(f) {
        return function() {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };

  // output/Effect/index.js
  var $runtime_lazy = function(name16, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var monadEffect = {
    Applicative0: function() {
      return applicativeEffect;
    },
    Bind1: function() {
      return bindEffect;
    }
  };
  var bindEffect = {
    bind: bindE,
    Apply0: function() {
      return $lazy_applyEffect(0);
    }
  };
  var applicativeEffect = {
    pure: pureE,
    Apply0: function() {
      return $lazy_applyEffect(0);
    }
  };
  var $lazy_functorEffect = /* @__PURE__ */ $runtime_lazy("functorEffect", "Effect", function() {
    return {
      map: liftA1(applicativeEffect)
    };
  });
  var $lazy_applyEffect = /* @__PURE__ */ $runtime_lazy("applyEffect", "Effect", function() {
    return {
      apply: ap(monadEffect),
      Functor0: function() {
        return $lazy_functorEffect(0);
      }
    };
  });
  var functorEffect = /* @__PURE__ */ $lazy_functorEffect(20);
  var applyEffect = /* @__PURE__ */ $lazy_applyEffect(23);
  var lift22 = /* @__PURE__ */ lift2(applyEffect);
  var semigroupEffect = function(dictSemigroup) {
    return {
      append: lift22(append(dictSemigroup))
    };
  };
  var monoidEffect = function(dictMonoid) {
    var semigroupEffect1 = semigroupEffect(dictMonoid.Semigroup0());
    return {
      mempty: pureE(mempty(dictMonoid)),
      Semigroup0: function() {
        return semigroupEffect1;
      }
    };
  };

  // output/Effect.Ref/foreign.js
  var _new = function(val) {
    return function() {
      return { value: val };
    };
  };
  var read = function(ref) {
    return function() {
      return ref.value;
    };
  };
  var write = function(val) {
    return function(ref) {
      return function() {
        ref.value = val;
      };
    };
  };

  // output/Effect.Ref/index.js
  var $$new = _new;

  // output/Control.Monad.Rec.Class/index.js
  var bindFlipped2 = /* @__PURE__ */ bindFlipped(bindEffect);
  var map3 = /* @__PURE__ */ map(functorEffect);
  var Loop = /* @__PURE__ */ function() {
    function Loop2(value0) {
      this.value0 = value0;
    }
    ;
    Loop2.create = function(value0) {
      return new Loop2(value0);
    };
    return Loop2;
  }();
  var Done = /* @__PURE__ */ function() {
    function Done2(value0) {
      this.value0 = value0;
    }
    ;
    Done2.create = function(value0) {
      return new Done2(value0);
    };
    return Done2;
  }();
  var tailRecM = function(dict) {
    return dict.tailRecM;
  };
  var monadRecEffect = {
    tailRecM: function(f) {
      return function(a2) {
        var fromDone = function(v) {
          if (v instanceof Done) {
            return v.value0;
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 137, column 30 - line 137, column 44): " + [v.constructor.name]);
        };
        return function __do3() {
          var r = bindFlipped2($$new)(f(a2))();
          (function() {
            while (!function __do4() {
              var v = read(r)();
              if (v instanceof Loop) {
                var e = f(v.value0)();
                write(e)(r)();
                return false;
              }
              ;
              if (v instanceof Done) {
                return true;
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 128, column 22 - line 133, column 28): " + [v.constructor.name]);
            }()) {
            }
            ;
            return {};
          })();
          return map3(fromDone)(read(r))();
        };
      };
    },
    Monad0: function() {
      return monadEffect;
    }
  };

  // output/Control.Monad.ST.Internal/foreign.js
  var map_ = function(f) {
    return function(a2) {
      return function() {
        return f(a2());
      };
    };
  };
  var pure_ = function(a2) {
    return function() {
      return a2;
    };
  };
  var bind_ = function(a2) {
    return function(f) {
      return function() {
        return f(a2())();
      };
    };
  };
  function forST(lo) {
    return function(hi) {
      return function(f) {
        return function() {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  }
  var foreach = function(as) {
    return function(f) {
      return function() {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
  function newSTRef(val) {
    return function() {
      return { value: val };
    };
  }
  var read2 = function(ref) {
    return function() {
      return ref.value;
    };
  };
  var modifyImpl2 = function(f) {
    return function(ref) {
      return function() {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };
  var write2 = function(a2) {
    return function(ref) {
      return function() {
        return ref.value = a2;
      };
    };
  };

  // output/Control.Monad.ST.Internal/index.js
  var $runtime_lazy2 = function(name16, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var modify$prime = modifyImpl2;
  var modify = function(f) {
    return modify$prime(function(s) {
      var s$prime = f(s);
      return {
        state: s$prime,
        value: s$prime
      };
    });
  };
  var functorST = {
    map: map_
  };
  var monadST = {
    Applicative0: function() {
      return applicativeST;
    },
    Bind1: function() {
      return bindST;
    }
  };
  var bindST = {
    bind: bind_,
    Apply0: function() {
      return $lazy_applyST(0);
    }
  };
  var applicativeST = {
    pure: pure_,
    Apply0: function() {
      return $lazy_applyST(0);
    }
  };
  var $lazy_applyST = /* @__PURE__ */ $runtime_lazy2("applyST", "Control.Monad.ST.Internal", function() {
    return {
      apply: ap(monadST),
      Functor0: function() {
        return functorST;
      }
    };
  });
  var applyST = /* @__PURE__ */ $lazy_applyST(47);

  // output/Data.Array.ST/foreign.js
  function newSTArray() {
    return [];
  }
  var lengthImpl = function(xs) {
    return xs.length;
  };
  var spliceImpl = function(i, howMany, bs, xs) {
    return xs.splice.apply(xs, [i, howMany].concat(bs));
  };
  function unsafeFreezeThawImpl(xs) {
    return xs;
  }
  var unsafeFreezeImpl = unsafeFreezeThawImpl;
  function copyImpl(xs) {
    return xs.slice();
  }
  var thawImpl = copyImpl;
  var sortByImpl2 = function() {
    function mergeFromTo(compare2, fromOrdering, xs1, xs2, from2, to) {
      var mid;
      var i;
      var j;
      var k;
      var x;
      var y;
      var c;
      mid = from2 + (to - from2 >> 1);
      if (mid - from2 > 1)
        mergeFromTo(compare2, fromOrdering, xs2, xs1, from2, mid);
      if (to - mid > 1)
        mergeFromTo(compare2, fromOrdering, xs2, xs1, mid, to);
      i = from2;
      j = mid;
      k = from2;
      while (i < mid && j < to) {
        x = xs2[i];
        y = xs2[j];
        c = fromOrdering(compare2(x)(y));
        if (c > 0) {
          xs1[k++] = y;
          ++j;
        } else {
          xs1[k++] = x;
          ++i;
        }
      }
      while (i < mid) {
        xs1[k++] = xs2[i++];
      }
      while (j < to) {
        xs1[k++] = xs2[j++];
      }
    }
    return function(compare2, fromOrdering, xs) {
      if (xs.length < 2)
        return xs;
      mergeFromTo(compare2, fromOrdering, xs, xs.slice(0), 0, xs.length);
      return xs;
    };
  }();
  var pushImpl = function(a2, xs) {
    return xs.push(a2);
  };

  // output/Control.Monad.ST.Uncurried/foreign.js
  var runSTFn1 = function runSTFn12(fn) {
    return function(a2) {
      return function() {
        return fn(a2);
      };
    };
  };
  var runSTFn2 = function runSTFn22(fn) {
    return function(a2) {
      return function(b) {
        return function() {
          return fn(a2, b);
        };
      };
    };
  };
  var runSTFn4 = function runSTFn42(fn) {
    return function(a2) {
      return function(b) {
        return function(c) {
          return function(d) {
            return function() {
              return fn(a2, b, c, d);
            };
          };
        };
      };
    };
  };

  // output/Data.Array.ST/index.js
  var unsafeFreeze = /* @__PURE__ */ runSTFn1(unsafeFreezeImpl);
  var thaw = /* @__PURE__ */ runSTFn1(thawImpl);
  var withArray = function(f) {
    return function(xs) {
      return function __do3() {
        var result = thaw(xs)();
        f(result)();
        return unsafeFreeze(result)();
      };
    };
  };
  var splice = /* @__PURE__ */ runSTFn4(spliceImpl);
  var push = /* @__PURE__ */ runSTFn2(pushImpl);
  var length2 = /* @__PURE__ */ runSTFn1(lengthImpl);

  // output/Data.Array.ST.Iterator/index.js
  var map4 = /* @__PURE__ */ map(functorST);
  var not2 = /* @__PURE__ */ not(heytingAlgebraBoolean);
  var $$void2 = /* @__PURE__ */ $$void(functorST);
  var Iterator = /* @__PURE__ */ function() {
    function Iterator2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Iterator2.create = function(value0) {
      return function(value1) {
        return new Iterator2(value0, value1);
      };
    };
    return Iterator2;
  }();
  var next = function(v) {
    return function __do3() {
      var i = read2(v.value1)();
      modify(function(v1) {
        return v1 + 1 | 0;
      })(v.value1)();
      return v.value0(i);
    };
  };
  var iterator = function(f) {
    return map4(Iterator.create(f))(newSTRef(0));
  };
  var iterate = function(iter) {
    return function(f) {
      return function __do3() {
        var $$break = newSTRef(false)();
        while (map4(not2)(read2($$break))()) {
          (function __do4() {
            var mx = next(iter)();
            if (mx instanceof Just) {
              return f(mx.value0)();
            }
            ;
            if (mx instanceof Nothing) {
              return $$void2(write2(true)($$break))();
            }
            ;
            throw new Error("Failed pattern match at Data.Array.ST.Iterator (line 42, column 5 - line 44, column 47): " + [mx.constructor.name]);
          })();
        }
        ;
        return {};
      };
    };
  };

  // output/Data.Function.Uncurried/foreign.js
  var runFn2 = function(fn) {
    return function(a2) {
      return function(b) {
        return fn(a2, b);
      };
    };
  };
  var runFn3 = function(fn) {
    return function(a2) {
      return function(b) {
        return function(c) {
          return fn(a2, b, c);
        };
      };
    };
  };
  var runFn4 = function(fn) {
    return function(a2) {
      return function(b) {
        return function(c) {
          return function(d) {
            return fn(a2, b, c, d);
          };
        };
      };
    };
  };

  // output/Data.Functor.Compose/index.js
  var functorCompose = function(dictFunctor) {
    var map21 = map(dictFunctor);
    return function(dictFunctor1) {
      var map111 = map(dictFunctor1);
      return {
        map: function(f) {
          return function(v) {
            return map21(map111(f))(v);
          };
        }
      };
    };
  };

  // output/Data.Traversable/foreign.js
  var traverseArrayImpl = function() {
    function array1(a2) {
      return [a2];
    }
    function array2(a2) {
      return function(b) {
        return [a2, b];
      };
    }
    function array3(a2) {
      return function(b) {
        return function(c) {
          return [a2, b, c];
        };
      };
    }
    function concat2(xs) {
      return function(ys) {
        return xs.concat(ys);
      };
    }
    return function(apply8) {
      return function(map21) {
        return function(pure7) {
          return function(f) {
            return function(array) {
              function go2(bot, top3) {
                switch (top3 - bot) {
                  case 0:
                    return pure7([]);
                  case 1:
                    return map21(array1)(f(array[bot]));
                  case 2:
                    return apply8(map21(array2)(f(array[bot])))(f(array[bot + 1]));
                  case 3:
                    return apply8(apply8(map21(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                  default:
                    var pivot = bot + Math.floor((top3 - bot) / 4) * 2;
                    return apply8(map21(concat2)(go2(bot, pivot)))(go2(pivot, top3));
                }
              }
              return go2(0, array.length);
            };
          };
        };
      };
    };
  }();

  // output/Data.Unfoldable/foreign.js
  var unfoldrArrayImpl = function(isNothing2) {
    return function(fromJust7) {
      return function(fst2) {
        return function(snd2) {
          return function(f) {
            return function(b) {
              var result = [];
              var value13 = b;
              while (true) {
                var maybe2 = f(value13);
                if (isNothing2(maybe2))
                  return result;
                var tuple = fromJust7(maybe2);
                result.push(fst2(tuple));
                value13 = snd2(tuple);
              }
            };
          };
        };
      };
    };
  };

  // output/Data.Unfoldable1/foreign.js
  var unfoldr1ArrayImpl = function(isNothing2) {
    return function(fromJust7) {
      return function(fst2) {
        return function(snd2) {
          return function(f) {
            return function(b) {
              var result = [];
              var value13 = b;
              while (true) {
                var tuple = f(value13);
                result.push(fst2(tuple));
                var maybe2 = snd2(tuple);
                if (isNothing2(maybe2))
                  return result;
                value13 = fromJust7(maybe2);
              }
            };
          };
        };
      };
    };
  };

  // output/Data.Unfoldable1/index.js
  var fromJust2 = /* @__PURE__ */ fromJust();
  var unfoldable1Array = {
    unfoldr1: /* @__PURE__ */ unfoldr1ArrayImpl(isNothing)(fromJust2)(fst)(snd)
  };

  // output/Data.Unfoldable/index.js
  var fromJust3 = /* @__PURE__ */ fromJust();
  var unfoldr = function(dict) {
    return dict.unfoldr;
  };
  var unfoldableArray = {
    unfoldr: /* @__PURE__ */ unfoldrArrayImpl(isNothing)(fromJust3)(fst)(snd),
    Unfoldable10: function() {
      return unfoldable1Array;
    }
  };

  // output/Data.Array/index.js
  var unsafeIndex = function() {
    return runFn2(unsafeIndexImpl);
  };
  var snoc = function(xs) {
    return function(x) {
      return withArray(push(x))(xs)();
    };
  };
  var slice = /* @__PURE__ */ runFn3(sliceImpl);
  var singleton2 = function(a2) {
    return [a2];
  };
  var partition = /* @__PURE__ */ runFn2(partitionImpl);
  var index = /* @__PURE__ */ function() {
    return runFn4(indexImpl)(Just.create)(Nothing.value);
  }();
  var last = function(xs) {
    return index(xs)(length(xs) - 1 | 0);
  };
  var filter = /* @__PURE__ */ runFn2(filterImpl);
  var drop = function(n) {
    return function(xs) {
      var $173 = n < 1;
      if ($173) {
        return xs;
      }
      ;
      return slice(n)(length(xs))(xs);
    };
  };
  var concatMap = /* @__PURE__ */ flip(/* @__PURE__ */ bind(bindArray));
  var mapMaybe = function(f) {
    return concatMap(function() {
      var $189 = maybe([])(singleton2);
      return function($190) {
        return $189(f($190));
      };
    }());
  };

  // output/Data.Array.NonEmpty.Internal/foreign.js
  var traverse1Impl = function() {
    function Cont(fn) {
      this.fn = fn;
    }
    var emptyList = {};
    var ConsCell = function(head3, tail3) {
      this.head = head3;
      this.tail = tail3;
    };
    function finalCell(head3) {
      return new ConsCell(head3, emptyList);
    }
    function consList(x) {
      return function(xs) {
        return new ConsCell(x, xs);
      };
    }
    function listToArray(list) {
      var arr = [];
      var xs = list;
      while (xs !== emptyList) {
        arr.push(xs.head);
        xs = xs.tail;
      }
      return arr;
    }
    return function(apply8, map21, f) {
      var buildFrom = function(x, ys) {
        return apply8(map21(consList)(f(x)))(ys);
      };
      var go2 = function(acc, currentLen, xs) {
        if (currentLen === 0) {
          return acc;
        } else {
          var last3 = xs[currentLen - 1];
          return new Cont(function() {
            var built = go2(buildFrom(last3, acc), currentLen - 1, xs);
            return built;
          });
        }
      };
      return function(array) {
        var acc = map21(finalCell)(f(array[array.length - 1]));
        var result = go2(acc, array.length - 1, array);
        while (result instanceof Cont) {
          result = result.fn();
        }
        return map21(listToArray)(result);
      };
    };
  }();

  // output/Data.FoldableWithIndex/index.js
  var foldrWithIndex = function(dict) {
    return dict.foldrWithIndex;
  };

  // output/Data.Enum/index.js
  var toEnum = function(dict) {
    return dict.toEnum;
  };
  var fromEnum = function(dict) {
    return dict.fromEnum;
  };

  // output/Data.List.Types/index.js
  var Nil = /* @__PURE__ */ function() {
    function Nil2() {
    }
    ;
    Nil2.value = new Nil2();
    return Nil2;
  }();
  var Cons = /* @__PURE__ */ function() {
    function Cons2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Cons2.create = function(value0) {
      return function(value1) {
        return new Cons2(value0, value1);
      };
    };
    return Cons2;
  }();

  // output/Data.Int/foreign.js
  var fromNumberImpl = function(just) {
    return function(nothing) {
      return function(n) {
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };
  var toNumber = function(n) {
    return n;
  };

  // output/Data.Number/foreign.js
  var isFiniteImpl = isFinite;
  var round = Math.round;

  // output/Data.Int/index.js
  var top2 = /* @__PURE__ */ top(boundedInt);
  var bottom2 = /* @__PURE__ */ bottom(boundedInt);
  var fromNumber = /* @__PURE__ */ function() {
    return fromNumberImpl(Just.create)(Nothing.value);
  }();
  var unsafeClamp = function(x) {
    if (!isFiniteImpl(x)) {
      return 0;
    }
    ;
    if (x >= toNumber(top2)) {
      return top2;
    }
    ;
    if (x <= toNumber(bottom2)) {
      return bottom2;
    }
    ;
    if (otherwise) {
      return fromMaybe(0)(fromNumber(x));
    }
    ;
    throw new Error("Failed pattern match at Data.Int (line 72, column 1 - line 72, column 29): " + [x.constructor.name]);
  };
  var round2 = function($37) {
    return unsafeClamp(round($37));
  };

  // output/Data.Map.Internal/index.js
  var $runtime_lazy3 = function(name16, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var Leaf = /* @__PURE__ */ function() {
    function Leaf2() {
    }
    ;
    Leaf2.value = new Leaf2();
    return Leaf2;
  }();
  var Node = /* @__PURE__ */ function() {
    function Node2(value0, value1, value22, value32, value42, value52) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
      this.value5 = value52;
    }
    ;
    Node2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return function(value52) {
                return new Node2(value0, value1, value22, value32, value42, value52);
              };
            };
          };
        };
      };
    };
    return Node2;
  }();
  var IterLeaf = /* @__PURE__ */ function() {
    function IterLeaf2() {
    }
    ;
    IterLeaf2.value = new IterLeaf2();
    return IterLeaf2;
  }();
  var IterEmit = /* @__PURE__ */ function() {
    function IterEmit2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    IterEmit2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new IterEmit2(value0, value1, value22);
        };
      };
    };
    return IterEmit2;
  }();
  var IterNode = /* @__PURE__ */ function() {
    function IterNode2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    IterNode2.create = function(value0) {
      return function(value1) {
        return new IterNode2(value0, value1);
      };
    };
    return IterNode2;
  }();
  var Split = /* @__PURE__ */ function() {
    function Split2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    Split2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new Split2(value0, value1, value22);
        };
      };
    };
    return Split2;
  }();
  var SplitLast = /* @__PURE__ */ function() {
    function SplitLast2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    SplitLast2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new SplitLast2(value0, value1, value22);
        };
      };
    };
    return SplitLast2;
  }();
  var unsafeNode = function(k, v, l, r) {
    if (l instanceof Leaf) {
      if (r instanceof Leaf) {
        return new Node(1, 1, k, v, l, r);
      }
      ;
      if (r instanceof Node) {
        return new Node(1 + r.value0 | 0, 1 + r.value1 | 0, k, v, l, r);
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 702, column 5 - line 706, column 39): " + [r.constructor.name]);
    }
    ;
    if (l instanceof Node) {
      if (r instanceof Leaf) {
        return new Node(1 + l.value0 | 0, 1 + l.value1 | 0, k, v, l, r);
      }
      ;
      if (r instanceof Node) {
        return new Node(1 + function() {
          var $280 = l.value0 > r.value0;
          if ($280) {
            return l.value0;
          }
          ;
          return r.value0;
        }() | 0, (1 + l.value1 | 0) + r.value1 | 0, k, v, l, r);
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 708, column 5 - line 712, column 68): " + [r.constructor.name]);
    }
    ;
    throw new Error("Failed pattern match at Data.Map.Internal (line 700, column 32 - line 712, column 68): " + [l.constructor.name]);
  };
  var toMapIter = /* @__PURE__ */ function() {
    return flip(IterNode.create)(IterLeaf.value);
  }();
  var stepWith = function(f) {
    return function(next2) {
      return function(done) {
        var go2 = function($copy_v) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(v) {
            if (v instanceof IterLeaf) {
              $tco_done = true;
              return done(unit);
            }
            ;
            if (v instanceof IterEmit) {
              $tco_done = true;
              return next2(v.value0, v.value1, v.value2);
            }
            ;
            if (v instanceof IterNode) {
              $copy_v = f(v.value1)(v.value0);
              return;
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 940, column 8 - line 946, column 20): " + [v.constructor.name]);
          }
          ;
          while (!$tco_done) {
            $tco_result = $tco_loop($copy_v);
          }
          ;
          return $tco_result;
        };
        return go2;
      };
    };
  };
  var singleton4 = function(k) {
    return function(v) {
      return new Node(1, 1, k, v, Leaf.value, Leaf.value);
    };
  };
  var unsafeBalancedNode = /* @__PURE__ */ function() {
    var height9 = function(v) {
      if (v instanceof Leaf) {
        return 0;
      }
      ;
      if (v instanceof Node) {
        return v.value0;
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 757, column 12 - line 759, column 26): " + [v.constructor.name]);
    };
    var rotateLeft = function(k, v, l, rk, rv, rl, rr) {
      if (rl instanceof Node && rl.value0 > height9(rr)) {
        return unsafeNode(rl.value2, rl.value3, unsafeNode(k, v, l, rl.value4), unsafeNode(rk, rv, rl.value5, rr));
      }
      ;
      return unsafeNode(rk, rv, unsafeNode(k, v, l, rl), rr);
    };
    var rotateRight = function(k, v, lk, lv, ll, lr, r) {
      if (lr instanceof Node && height9(ll) <= lr.value0) {
        return unsafeNode(lr.value2, lr.value3, unsafeNode(lk, lv, ll, lr.value4), unsafeNode(k, v, lr.value5, r));
      }
      ;
      return unsafeNode(lk, lv, ll, unsafeNode(k, v, lr, r));
    };
    return function(k, v, l, r) {
      if (l instanceof Leaf) {
        if (r instanceof Leaf) {
          return singleton4(k)(v);
        }
        ;
        if (r instanceof Node && r.value0 > 1) {
          return rotateLeft(k, v, l, r.value2, r.value3, r.value4, r.value5);
        }
        ;
        return unsafeNode(k, v, l, r);
      }
      ;
      if (l instanceof Node) {
        if (r instanceof Node) {
          if (r.value0 > (l.value0 + 1 | 0)) {
            return rotateLeft(k, v, l, r.value2, r.value3, r.value4, r.value5);
          }
          ;
          if (l.value0 > (r.value0 + 1 | 0)) {
            return rotateRight(k, v, l.value2, l.value3, l.value4, l.value5, r);
          }
          ;
        }
        ;
        if (r instanceof Leaf && l.value0 > 1) {
          return rotateRight(k, v, l.value2, l.value3, l.value4, l.value5, r);
        }
        ;
        return unsafeNode(k, v, l, r);
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 717, column 40 - line 738, column 34): " + [l.constructor.name]);
    };
  }();
  var $lazy_unsafeSplit = /* @__PURE__ */ $runtime_lazy3("unsafeSplit", "Data.Map.Internal", function() {
    return function(comp, k, m) {
      if (m instanceof Leaf) {
        return new Split(Nothing.value, Leaf.value, Leaf.value);
      }
      ;
      if (m instanceof Node) {
        var v = comp(k)(m.value2);
        if (v instanceof LT) {
          var v1 = $lazy_unsafeSplit(793)(comp, k, m.value4);
          return new Split(v1.value0, v1.value1, unsafeBalancedNode(m.value2, m.value3, v1.value2, m.value5));
        }
        ;
        if (v instanceof GT) {
          var v1 = $lazy_unsafeSplit(796)(comp, k, m.value5);
          return new Split(v1.value0, unsafeBalancedNode(m.value2, m.value3, m.value4, v1.value1), v1.value2);
        }
        ;
        if (v instanceof EQ) {
          return new Split(new Just(m.value3), m.value4, m.value5);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 791, column 5 - line 799, column 30): " + [v.constructor.name]);
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 787, column 34 - line 799, column 30): " + [m.constructor.name]);
    };
  });
  var unsafeSplit = /* @__PURE__ */ $lazy_unsafeSplit(786);
  var $lazy_unsafeSplitLast = /* @__PURE__ */ $runtime_lazy3("unsafeSplitLast", "Data.Map.Internal", function() {
    return function(k, v, l, r) {
      if (r instanceof Leaf) {
        return new SplitLast(k, v, l);
      }
      ;
      if (r instanceof Node) {
        var v1 = $lazy_unsafeSplitLast(779)(r.value2, r.value3, r.value4, r.value5);
        return new SplitLast(v1.value0, v1.value1, unsafeBalancedNode(k, v, l, v1.value2));
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 776, column 37 - line 780, column 57): " + [r.constructor.name]);
    };
  });
  var unsafeSplitLast = /* @__PURE__ */ $lazy_unsafeSplitLast(775);
  var unsafeJoinNodes = function(v, v1) {
    if (v instanceof Leaf) {
      return v1;
    }
    ;
    if (v instanceof Node) {
      var v2 = unsafeSplitLast(v.value2, v.value3, v.value4, v.value5);
      return unsafeBalancedNode(v2.value0, v2.value1, v2.value2, v1);
    }
    ;
    throw new Error("Failed pattern match at Data.Map.Internal (line 764, column 25 - line 768, column 38): " + [v.constructor.name, v1.constructor.name]);
  };
  var $lazy_unsafeUnionWith = /* @__PURE__ */ $runtime_lazy3("unsafeUnionWith", "Data.Map.Internal", function() {
    return function(comp, app, l, r) {
      if (l instanceof Leaf) {
        return r;
      }
      ;
      if (r instanceof Leaf) {
        return l;
      }
      ;
      if (r instanceof Node) {
        var v = unsafeSplit(comp, r.value2, l);
        var l$prime = $lazy_unsafeUnionWith(809)(comp, app, v.value1, r.value4);
        var r$prime = $lazy_unsafeUnionWith(810)(comp, app, v.value2, r.value5);
        if (v.value0 instanceof Just) {
          return unsafeBalancedNode(r.value2, app(v.value0.value0)(r.value3), l$prime, r$prime);
        }
        ;
        if (v.value0 instanceof Nothing) {
          return unsafeBalancedNode(r.value2, r.value3, l$prime, r$prime);
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 811, column 5 - line 815, column 46): " + [v.value0.constructor.name]);
      }
      ;
      throw new Error("Failed pattern match at Data.Map.Internal (line 804, column 42 - line 815, column 46): " + [l.constructor.name, r.constructor.name]);
    };
  });
  var unsafeUnionWith = /* @__PURE__ */ $lazy_unsafeUnionWith(803);
  var unionWith = function(dictOrd) {
    var compare2 = compare(dictOrd);
    return function(app) {
      return function(m1) {
        return function(m2) {
          return unsafeUnionWith(compare2, app, m1, m2);
        };
      };
    };
  };
  var lookup = function(dictOrd) {
    var compare2 = compare(dictOrd);
    return function(k) {
      var go2 = function($copy_v) {
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v) {
          if (v instanceof Leaf) {
            $tco_done = true;
            return Nothing.value;
          }
          ;
          if (v instanceof Node) {
            var v1 = compare2(k)(v.value2);
            if (v1 instanceof LT) {
              $copy_v = v.value4;
              return;
            }
            ;
            if (v1 instanceof GT) {
              $copy_v = v.value5;
              return;
            }
            ;
            if (v1 instanceof EQ) {
              $tco_done = true;
              return new Just(v.value3);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 283, column 7 - line 286, column 22): " + [v1.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 280, column 8 - line 286, column 22): " + [v.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
        }
        ;
        return $tco_result;
      };
      return go2;
    };
  };
  var iterMapL = /* @__PURE__ */ function() {
    var go2 = function($copy_iter) {
      return function($copy_v) {
        var $tco_var_iter = $copy_iter;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(iter, v) {
          if (v instanceof Leaf) {
            $tco_done = true;
            return iter;
          }
          ;
          if (v instanceof Node) {
            if (v.value5 instanceof Leaf) {
              $tco_var_iter = new IterEmit(v.value2, v.value3, iter);
              $copy_v = v.value4;
              return;
            }
            ;
            $tco_var_iter = new IterEmit(v.value2, v.value3, new IterNode(v.value5, iter));
            $copy_v = v.value4;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 951, column 13 - line 958, column 48): " + [v.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_iter, $copy_v);
        }
        ;
        return $tco_result;
      };
    };
    return go2;
  }();
  var stepAscCps = /* @__PURE__ */ stepWith(iterMapL);
  var stepUnfoldr = /* @__PURE__ */ function() {
    var step2 = function(k, v, next2) {
      return new Just(new Tuple(new Tuple(k, v), next2));
    };
    return stepAscCps(step2)(function(v) {
      return Nothing.value;
    });
  }();
  var toUnfoldable2 = function(dictUnfoldable) {
    var $784 = unfoldr(dictUnfoldable)(stepUnfoldr);
    return function($785) {
      return $784(toMapIter($785));
    };
  };
  var insert2 = function(dictOrd) {
    var compare2 = compare(dictOrd);
    return function(k) {
      return function(v) {
        var go2 = function(v1) {
          if (v1 instanceof Leaf) {
            return singleton4(k)(v);
          }
          ;
          if (v1 instanceof Node) {
            var v2 = compare2(k)(v1.value2);
            if (v2 instanceof LT) {
              return unsafeBalancedNode(v1.value2, v1.value3, go2(v1.value4), v1.value5);
            }
            ;
            if (v2 instanceof GT) {
              return unsafeBalancedNode(v1.value2, v1.value3, v1.value4, go2(v1.value5));
            }
            ;
            if (v2 instanceof EQ) {
              return new Node(v1.value0, v1.value1, k, v, v1.value4, v1.value5);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 471, column 7 - line 474, column 35): " + [v2.constructor.name]);
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 468, column 8 - line 474, column 35): " + [v1.constructor.name]);
        };
        return go2;
      };
    };
  };
  var foldableMap = {
    foldr: function(f) {
      return function(z) {
        var $lazy_go = $runtime_lazy3("go", "Data.Map.Internal", function() {
          return function(m$prime, z$prime) {
            if (m$prime instanceof Leaf) {
              return z$prime;
            }
            ;
            if (m$prime instanceof Node) {
              return $lazy_go(172)(m$prime.value4, f(m$prime.value3)($lazy_go(172)(m$prime.value5, z$prime)));
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 169, column 26 - line 172, column 43): " + [m$prime.constructor.name]);
          };
        });
        var go2 = $lazy_go(169);
        return function(m) {
          return go2(m, z);
        };
      };
    },
    foldl: function(f) {
      return function(z) {
        var $lazy_go = $runtime_lazy3("go", "Data.Map.Internal", function() {
          return function(z$prime, m$prime) {
            if (m$prime instanceof Leaf) {
              return z$prime;
            }
            ;
            if (m$prime instanceof Node) {
              return $lazy_go(178)(f($lazy_go(178)(z$prime, m$prime.value4))(m$prime.value3), m$prime.value5);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 175, column 26 - line 178, column 43): " + [m$prime.constructor.name]);
          };
        });
        var go2 = $lazy_go(175);
        return function(m) {
          return go2(z, m);
        };
      };
    },
    foldMap: function(dictMonoid) {
      var mempty3 = mempty(dictMonoid);
      var append1 = append(dictMonoid.Semigroup0());
      return function(f) {
        var go2 = function(v) {
          if (v instanceof Leaf) {
            return mempty3;
          }
          ;
          if (v instanceof Node) {
            return append1(go2(v.value4))(append1(f(v.value3))(go2(v.value5)));
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 181, column 10 - line 184, column 28): " + [v.constructor.name]);
        };
        return go2;
      };
    }
  };
  var foldableWithIndexMap = {
    foldrWithIndex: function(f) {
      return function(z) {
        var $lazy_go = $runtime_lazy3("go", "Data.Map.Internal", function() {
          return function(m$prime, z$prime) {
            if (m$prime instanceof Leaf) {
              return z$prime;
            }
            ;
            if (m$prime instanceof Node) {
              return $lazy_go(192)(m$prime.value4, f(m$prime.value2)(m$prime.value3)($lazy_go(192)(m$prime.value5, z$prime)));
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 189, column 26 - line 192, column 45): " + [m$prime.constructor.name]);
          };
        });
        var go2 = $lazy_go(189);
        return function(m) {
          return go2(m, z);
        };
      };
    },
    foldlWithIndex: function(f) {
      return function(z) {
        var $lazy_go = $runtime_lazy3("go", "Data.Map.Internal", function() {
          return function(z$prime, m$prime) {
            if (m$prime instanceof Leaf) {
              return z$prime;
            }
            ;
            if (m$prime instanceof Node) {
              return $lazy_go(198)(f(m$prime.value2)($lazy_go(198)(z$prime, m$prime.value4))(m$prime.value3), m$prime.value5);
            }
            ;
            throw new Error("Failed pattern match at Data.Map.Internal (line 195, column 26 - line 198, column 45): " + [m$prime.constructor.name]);
          };
        });
        var go2 = $lazy_go(195);
        return function(m) {
          return go2(z, m);
        };
      };
    },
    foldMapWithIndex: function(dictMonoid) {
      var mempty3 = mempty(dictMonoid);
      var append1 = append(dictMonoid.Semigroup0());
      return function(f) {
        var go2 = function(v) {
          if (v instanceof Leaf) {
            return mempty3;
          }
          ;
          if (v instanceof Node) {
            return append1(go2(v.value4))(append1(f(v.value2)(v.value3))(go2(v.value5)));
          }
          ;
          throw new Error("Failed pattern match at Data.Map.Internal (line 201, column 10 - line 204, column 30): " + [v.constructor.name]);
        };
        return go2;
      };
    },
    Foldable0: function() {
      return foldableMap;
    }
  };
  var filterWithKey = function(dictOrd) {
    return function(f) {
      var go2 = function(v) {
        if (v instanceof Leaf) {
          return Leaf.value;
        }
        ;
        if (v instanceof Node) {
          if (f(v.value2)(v.value3)) {
            return unsafeBalancedNode(v.value2, v.value3, go2(v.value4), go2(v.value5));
          }
          ;
          if (otherwise) {
            return unsafeJoinNodes(go2(v.value4), go2(v.value5));
          }
          ;
        }
        ;
        throw new Error("Failed pattern match at Data.Map.Internal (line 627, column 8 - line 633, column 47): " + [v.constructor.name]);
      };
      return go2;
    };
  };
  var filter2 = function(dictOrd) {
    var $786 = filterWithKey(dictOrd);
    return function($787) {
      return $786($$const($787));
    };
  };
  var empty2 = /* @__PURE__ */ function() {
    return Leaf.value;
  }();

  // output/Data.List/index.js
  var reverse2 = /* @__PURE__ */ function() {
    var go2 = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
          if (v1 instanceof Nil) {
            $tco_done = true;
            return v;
          }
          ;
          if (v1 instanceof Cons) {
            $tco_var_v = new Cons(v1.value0, v);
            $copy_v1 = v1.value1;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [v.constructor.name, v1.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    return go2(Nil.value);
  }();

  // output/Data.Sparse.Polynomial/index.js
  var filter3 = /* @__PURE__ */ filter2(ordInt);
  var unionWith2 = /* @__PURE__ */ unionWith(ordInt);
  var foldr2 = /* @__PURE__ */ foldr(foldableArray);
  var map5 = /* @__PURE__ */ map(functorArray);
  var foldrWithIndex2 = /* @__PURE__ */ foldrWithIndex(foldableWithIndexMap);
  var insert3 = /* @__PURE__ */ insert2(ordInt);
  var toUnfoldable4 = /* @__PURE__ */ toUnfoldable2(unfoldableArray);
  var lookup3 = /* @__PURE__ */ lookup(ordInt);
  var semiringPolynomial = function(dictEq) {
    var notEq1 = notEq(dictEq);
    return function(dictSemiring) {
      var zero3 = zero(dictSemiring);
      var add1 = add(dictSemiring);
      var mul2 = mul(dictSemiring);
      return {
        add: function(v) {
          return function(v1) {
            return filter3(function(v2) {
              return notEq1(v2)(zero3);
            })(unionWith2(add1)(v)(v1));
          };
        },
        mul: function(v) {
          return function(v1) {
            return filter3(function(v2) {
              return notEq1(v2)(zero3);
            })(foldr2(unionWith2(add1))(empty2)(map5(function(v2) {
              return foldrWithIndex2(function(j) {
                return function(w) {
                  return function(acc) {
                    return insert3(v2.value0 + j | 0)(mul2(v2.value1)(w))(acc);
                  };
                };
              })(empty2)(v1);
            })(toUnfoldable4(v))));
          };
        },
        zero: empty2,
        one: singleton4(0)(one(dictSemiring))
      };
    };
  };
  var query = function(dictSemiring) {
    var zero3 = zero(dictSemiring);
    return function(v) {
      return function(n) {
        return fromMaybe(zero3)(lookup3(n)(v));
      };
    };
  };
  var monoPol = function(x) {
    return function(n) {
      return insert3(n)(x)(empty2);
    };
  };

  // output/Data.Geometria.Types/index.js
  var query2 = /* @__PURE__ */ query(semiringNumber);
  var Point = function(x) {
    return x;
  };
  var analyticPoint = {
    fromCoordinates: Point,
    toCoordinates: function(v) {
      return v;
    },
    index: function(v) {
      return function(i) {
        return query2(v)(i);
      };
    }
  };
  var shape = function(dict) {
    return dict.shape;
  };
  var point = function(dictShape) {
    return shape(dictShape)($$Proxy.value);
  };
  var index2 = function(dict) {
    return dict.index;
  };
  var fromCoordinates = function(dict) {
    return dict.fromCoordinates;
  };
  var shape1 = function(dictAnalytic) {
    var fromCoordinates1 = fromCoordinates(dictAnalytic);
    return {
      shape: function(v) {
        return fromCoordinates1;
      }
    };
  };

  // output/Data.JSDate/foreign.js
  var createDate = function(y, m, d, h, mi, s, ms) {
    var date2 = new Date(Date.UTC(y, m, d, h, mi, s, ms));
    if (y >= 0 && y < 100) {
      date2.setUTCFullYear(y);
    }
    return date2;
  };
  function jsdate(parts) {
    return createDate(parts.year, parts.month, parts.day, parts.hour, parts.minute, parts.second, parts.millisecond);
  }
  function dateMethod(method2, date2) {
    return date2[method2]();
  }

  // output/Data.Date/foreign.js
  var createDate2 = function(y, m, d) {
    var date2 = new Date(Date.UTC(y, m, d));
    if (y >= 0 && y < 100) {
      date2.setUTCFullYear(y);
    }
    return date2;
  };
  function canonicalDateImpl(ctor, y, m, d) {
    var date2 = createDate2(y, m - 1, d);
    return ctor(date2.getUTCFullYear())(date2.getUTCMonth() + 1)(date2.getUTCDate());
  }

  // output/Data.Date.Component/index.js
  var $runtime_lazy4 = function(name16, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var January = /* @__PURE__ */ function() {
    function January2() {
    }
    ;
    January2.value = new January2();
    return January2;
  }();
  var February = /* @__PURE__ */ function() {
    function February2() {
    }
    ;
    February2.value = new February2();
    return February2;
  }();
  var March = /* @__PURE__ */ function() {
    function March2() {
    }
    ;
    March2.value = new March2();
    return March2;
  }();
  var April = /* @__PURE__ */ function() {
    function April2() {
    }
    ;
    April2.value = new April2();
    return April2;
  }();
  var May = /* @__PURE__ */ function() {
    function May2() {
    }
    ;
    May2.value = new May2();
    return May2;
  }();
  var June = /* @__PURE__ */ function() {
    function June2() {
    }
    ;
    June2.value = new June2();
    return June2;
  }();
  var July = /* @__PURE__ */ function() {
    function July2() {
    }
    ;
    July2.value = new July2();
    return July2;
  }();
  var August = /* @__PURE__ */ function() {
    function August2() {
    }
    ;
    August2.value = new August2();
    return August2;
  }();
  var September = /* @__PURE__ */ function() {
    function September2() {
    }
    ;
    September2.value = new September2();
    return September2;
  }();
  var October = /* @__PURE__ */ function() {
    function October2() {
    }
    ;
    October2.value = new October2();
    return October2;
  }();
  var November = /* @__PURE__ */ function() {
    function November2() {
    }
    ;
    November2.value = new November2();
    return November2;
  }();
  var December = /* @__PURE__ */ function() {
    function December2() {
    }
    ;
    December2.value = new December2();
    return December2;
  }();
  var ordYear = ordInt;
  var ordDay = ordInt;
  var eqMonth = {
    eq: function(x) {
      return function(y) {
        if (x instanceof January && y instanceof January) {
          return true;
        }
        ;
        if (x instanceof February && y instanceof February) {
          return true;
        }
        ;
        if (x instanceof March && y instanceof March) {
          return true;
        }
        ;
        if (x instanceof April && y instanceof April) {
          return true;
        }
        ;
        if (x instanceof May && y instanceof May) {
          return true;
        }
        ;
        if (x instanceof June && y instanceof June) {
          return true;
        }
        ;
        if (x instanceof July && y instanceof July) {
          return true;
        }
        ;
        if (x instanceof August && y instanceof August) {
          return true;
        }
        ;
        if (x instanceof September && y instanceof September) {
          return true;
        }
        ;
        if (x instanceof October && y instanceof October) {
          return true;
        }
        ;
        if (x instanceof November && y instanceof November) {
          return true;
        }
        ;
        if (x instanceof December && y instanceof December) {
          return true;
        }
        ;
        return false;
      };
    }
  };
  var ordMonth = {
    compare: function(x) {
      return function(y) {
        if (x instanceof January && y instanceof January) {
          return EQ.value;
        }
        ;
        if (x instanceof January) {
          return LT.value;
        }
        ;
        if (y instanceof January) {
          return GT.value;
        }
        ;
        if (x instanceof February && y instanceof February) {
          return EQ.value;
        }
        ;
        if (x instanceof February) {
          return LT.value;
        }
        ;
        if (y instanceof February) {
          return GT.value;
        }
        ;
        if (x instanceof March && y instanceof March) {
          return EQ.value;
        }
        ;
        if (x instanceof March) {
          return LT.value;
        }
        ;
        if (y instanceof March) {
          return GT.value;
        }
        ;
        if (x instanceof April && y instanceof April) {
          return EQ.value;
        }
        ;
        if (x instanceof April) {
          return LT.value;
        }
        ;
        if (y instanceof April) {
          return GT.value;
        }
        ;
        if (x instanceof May && y instanceof May) {
          return EQ.value;
        }
        ;
        if (x instanceof May) {
          return LT.value;
        }
        ;
        if (y instanceof May) {
          return GT.value;
        }
        ;
        if (x instanceof June && y instanceof June) {
          return EQ.value;
        }
        ;
        if (x instanceof June) {
          return LT.value;
        }
        ;
        if (y instanceof June) {
          return GT.value;
        }
        ;
        if (x instanceof July && y instanceof July) {
          return EQ.value;
        }
        ;
        if (x instanceof July) {
          return LT.value;
        }
        ;
        if (y instanceof July) {
          return GT.value;
        }
        ;
        if (x instanceof August && y instanceof August) {
          return EQ.value;
        }
        ;
        if (x instanceof August) {
          return LT.value;
        }
        ;
        if (y instanceof August) {
          return GT.value;
        }
        ;
        if (x instanceof September && y instanceof September) {
          return EQ.value;
        }
        ;
        if (x instanceof September) {
          return LT.value;
        }
        ;
        if (y instanceof September) {
          return GT.value;
        }
        ;
        if (x instanceof October && y instanceof October) {
          return EQ.value;
        }
        ;
        if (x instanceof October) {
          return LT.value;
        }
        ;
        if (y instanceof October) {
          return GT.value;
        }
        ;
        if (x instanceof November && y instanceof November) {
          return EQ.value;
        }
        ;
        if (x instanceof November) {
          return LT.value;
        }
        ;
        if (y instanceof November) {
          return GT.value;
        }
        ;
        if (x instanceof December && y instanceof December) {
          return EQ.value;
        }
        ;
        throw new Error("Failed pattern match at Data.Date.Component (line 0, column 0 - line 0, column 0): " + [x.constructor.name, y.constructor.name]);
      };
    },
    Eq0: function() {
      return eqMonth;
    }
  };
  var boundedYear = /* @__PURE__ */ function() {
    return {
      bottom: -271820 | 0,
      top: 275759,
      Ord0: function() {
        return ordYear;
      }
    };
  }();
  var boundedMonth = /* @__PURE__ */ function() {
    return {
      bottom: January.value,
      top: December.value,
      Ord0: function() {
        return ordMonth;
      }
    };
  }();
  var boundedEnumYear = {
    cardinality: 547580,
    toEnum: function(n) {
      if (n >= (-271820 | 0) && n <= 275759) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Date.Component (line 35, column 1 - line 40, column 24): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedYear;
    },
    Enum1: function() {
      return $lazy_enumYear(0);
    }
  };
  var $lazy_enumYear = /* @__PURE__ */ $runtime_lazy4("enumYear", "Data.Date.Component", function() {
    return {
      succ: function() {
        var $55 = toEnum(boundedEnumYear);
        var $56 = fromEnum(boundedEnumYear);
        return function($57) {
          return $55(function(v) {
            return v + 1 | 0;
          }($56($57)));
        };
      }(),
      pred: function() {
        var $58 = toEnum(boundedEnumYear);
        var $59 = fromEnum(boundedEnumYear);
        return function($60) {
          return $58(function(v) {
            return v - 1 | 0;
          }($59($60)));
        };
      }(),
      Ord0: function() {
        return ordYear;
      }
    };
  });
  var boundedEnumMonth = {
    cardinality: 12,
    toEnum: function(v) {
      if (v === 1) {
        return new Just(January.value);
      }
      ;
      if (v === 2) {
        return new Just(February.value);
      }
      ;
      if (v === 3) {
        return new Just(March.value);
      }
      ;
      if (v === 4) {
        return new Just(April.value);
      }
      ;
      if (v === 5) {
        return new Just(May.value);
      }
      ;
      if (v === 6) {
        return new Just(June.value);
      }
      ;
      if (v === 7) {
        return new Just(July.value);
      }
      ;
      if (v === 8) {
        return new Just(August.value);
      }
      ;
      if (v === 9) {
        return new Just(September.value);
      }
      ;
      if (v === 10) {
        return new Just(October.value);
      }
      ;
      if (v === 11) {
        return new Just(November.value);
      }
      ;
      if (v === 12) {
        return new Just(December.value);
      }
      ;
      return Nothing.value;
    },
    fromEnum: function(v) {
      if (v instanceof January) {
        return 1;
      }
      ;
      if (v instanceof February) {
        return 2;
      }
      ;
      if (v instanceof March) {
        return 3;
      }
      ;
      if (v instanceof April) {
        return 4;
      }
      ;
      if (v instanceof May) {
        return 5;
      }
      ;
      if (v instanceof June) {
        return 6;
      }
      ;
      if (v instanceof July) {
        return 7;
      }
      ;
      if (v instanceof August) {
        return 8;
      }
      ;
      if (v instanceof September) {
        return 9;
      }
      ;
      if (v instanceof October) {
        return 10;
      }
      ;
      if (v instanceof November) {
        return 11;
      }
      ;
      if (v instanceof December) {
        return 12;
      }
      ;
      throw new Error("Failed pattern match at Data.Date.Component (line 87, column 14 - line 99, column 19): " + [v.constructor.name]);
    },
    Bounded0: function() {
      return boundedMonth;
    },
    Enum1: function() {
      return $lazy_enumMonth(0);
    }
  };
  var $lazy_enumMonth = /* @__PURE__ */ $runtime_lazy4("enumMonth", "Data.Date.Component", function() {
    return {
      succ: function() {
        var $67 = toEnum(boundedEnumMonth);
        var $68 = fromEnum(boundedEnumMonth);
        return function($69) {
          return $67(function(v) {
            return v + 1 | 0;
          }($68($69)));
        };
      }(),
      pred: function() {
        var $70 = toEnum(boundedEnumMonth);
        var $71 = fromEnum(boundedEnumMonth);
        return function($72) {
          return $70(function(v) {
            return v - 1 | 0;
          }($71($72)));
        };
      }(),
      Ord0: function() {
        return ordMonth;
      }
    };
  });
  var boundedDay = {
    bottom: 1,
    top: 31,
    Ord0: function() {
      return ordDay;
    }
  };
  var boundedEnumDay = {
    cardinality: 31,
    toEnum: function(n) {
      if (n >= 1 && n <= 31) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Date.Component (line 133, column 1 - line 138, column 23): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedDay;
    },
    Enum1: function() {
      return $lazy_enumDay(0);
    }
  };
  var $lazy_enumDay = /* @__PURE__ */ $runtime_lazy4("enumDay", "Data.Date.Component", function() {
    return {
      succ: function() {
        var $73 = toEnum(boundedEnumDay);
        var $74 = fromEnum(boundedEnumDay);
        return function($75) {
          return $73(function(v) {
            return v + 1 | 0;
          }($74($75)));
        };
      }(),
      pred: function() {
        var $76 = toEnum(boundedEnumDay);
        var $77 = fromEnum(boundedEnumDay);
        return function($78) {
          return $76(function(v) {
            return v - 1 | 0;
          }($77($78)));
        };
      }(),
      Ord0: function() {
        return ordDay;
      }
    };
  });

  // output/Data.Date/index.js
  var fromEnum2 = /* @__PURE__ */ fromEnum(boundedEnumMonth);
  var fromJust4 = /* @__PURE__ */ fromJust();
  var toEnum2 = /* @__PURE__ */ toEnum(boundedEnumMonth);
  var $$Date = /* @__PURE__ */ function() {
    function $$Date2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    $$Date2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new $$Date2(value0, value1, value22);
        };
      };
    };
    return $$Date2;
  }();
  var year = function(v) {
    return v.value0;
  };
  var month = function(v) {
    return v.value1;
  };
  var day = function(v) {
    return v.value2;
  };
  var canonicalDate = function(y) {
    return function(m) {
      return function(d) {
        var mkDate = function(y$prime) {
          return function(m$prime) {
            return function(d$prime) {
              return new $$Date(y$prime, fromJust4(toEnum2(m$prime)), d$prime);
            };
          };
        };
        return canonicalDateImpl(mkDate, y, fromEnum2(m), d);
      };
    };
  };

  // output/Data.Time.Component/index.js
  var $runtime_lazy5 = function(name16, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var ordSecond = ordInt;
  var ordMinute = ordInt;
  var ordMillisecond = ordInt;
  var ordHour = ordInt;
  var boundedSecond = {
    bottom: 0,
    top: 59,
    Ord0: function() {
      return ordSecond;
    }
  };
  var boundedMinute = {
    bottom: 0,
    top: 59,
    Ord0: function() {
      return ordMinute;
    }
  };
  var boundedMillisecond = {
    bottom: 0,
    top: 999,
    Ord0: function() {
      return ordMillisecond;
    }
  };
  var boundedHour = {
    bottom: 0,
    top: 23,
    Ord0: function() {
      return ordHour;
    }
  };
  var boundedEnumSecond = {
    cardinality: 60,
    toEnum: function(n) {
      if (n >= 0 && n <= 59) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Time.Component (line 90, column 1 - line 95, column 26): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedSecond;
    },
    Enum1: function() {
      return $lazy_enumSecond(0);
    }
  };
  var $lazy_enumSecond = /* @__PURE__ */ $runtime_lazy5("enumSecond", "Data.Time.Component", function() {
    return {
      succ: function() {
        var $36 = toEnum(boundedEnumSecond);
        var $37 = fromEnum(boundedEnumSecond);
        return function($38) {
          return $36(function(v) {
            return v + 1 | 0;
          }($37($38)));
        };
      }(),
      pred: function() {
        var $39 = toEnum(boundedEnumSecond);
        var $40 = fromEnum(boundedEnumSecond);
        return function($41) {
          return $39(function(v) {
            return v - 1 | 0;
          }($40($41)));
        };
      }(),
      Ord0: function() {
        return ordSecond;
      }
    };
  });
  var boundedEnumMinute = {
    cardinality: 60,
    toEnum: function(n) {
      if (n >= 0 && n <= 59) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Time.Component (line 61, column 1 - line 66, column 26): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedMinute;
    },
    Enum1: function() {
      return $lazy_enumMinute(0);
    }
  };
  var $lazy_enumMinute = /* @__PURE__ */ $runtime_lazy5("enumMinute", "Data.Time.Component", function() {
    return {
      succ: function() {
        var $42 = toEnum(boundedEnumMinute);
        var $43 = fromEnum(boundedEnumMinute);
        return function($44) {
          return $42(function(v) {
            return v + 1 | 0;
          }($43($44)));
        };
      }(),
      pred: function() {
        var $45 = toEnum(boundedEnumMinute);
        var $46 = fromEnum(boundedEnumMinute);
        return function($47) {
          return $45(function(v) {
            return v - 1 | 0;
          }($46($47)));
        };
      }(),
      Ord0: function() {
        return ordMinute;
      }
    };
  });
  var boundedEnumMillisecond = {
    cardinality: 1e3,
    toEnum: function(n) {
      if (n >= 0 && n <= 999) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Time.Component (line 120, column 1 - line 125, column 31): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedMillisecond;
    },
    Enum1: function() {
      return $lazy_enumMillisecond(0);
    }
  };
  var $lazy_enumMillisecond = /* @__PURE__ */ $runtime_lazy5("enumMillisecond", "Data.Time.Component", function() {
    return {
      succ: function() {
        var $48 = toEnum(boundedEnumMillisecond);
        var $49 = fromEnum(boundedEnumMillisecond);
        return function($50) {
          return $48(function(v) {
            return v + 1 | 0;
          }($49($50)));
        };
      }(),
      pred: function() {
        var $51 = toEnum(boundedEnumMillisecond);
        var $52 = fromEnum(boundedEnumMillisecond);
        return function($53) {
          return $51(function(v) {
            return v - 1 | 0;
          }($52($53)));
        };
      }(),
      Ord0: function() {
        return ordMillisecond;
      }
    };
  });
  var boundedEnumHour = {
    cardinality: 24,
    toEnum: function(n) {
      if (n >= 0 && n <= 23) {
        return new Just(n);
      }
      ;
      if (otherwise) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at Data.Time.Component (line 32, column 1 - line 37, column 24): " + [n.constructor.name]);
    },
    fromEnum: function(v) {
      return v;
    },
    Bounded0: function() {
      return boundedHour;
    },
    Enum1: function() {
      return $lazy_enumHour(0);
    }
  };
  var $lazy_enumHour = /* @__PURE__ */ $runtime_lazy5("enumHour", "Data.Time.Component", function() {
    return {
      succ: function() {
        var $54 = toEnum(boundedEnumHour);
        var $55 = fromEnum(boundedEnumHour);
        return function($56) {
          return $54(function(v) {
            return v + 1 | 0;
          }($55($56)));
        };
      }(),
      pred: function() {
        var $57 = toEnum(boundedEnumHour);
        var $58 = fromEnum(boundedEnumHour);
        return function($59) {
          return $57(function(v) {
            return v - 1 | 0;
          }($58($59)));
        };
      }(),
      Ord0: function() {
        return ordHour;
      }
    };
  });

  // output/Data.Time/index.js
  var Time = /* @__PURE__ */ function() {
    function Time2(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    Time2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new Time2(value0, value1, value22, value32);
          };
        };
      };
    };
    return Time2;
  }();
  var second = function(v) {
    return v.value2;
  };
  var minute = function(v) {
    return v.value1;
  };
  var millisecond = function(v) {
    return v.value3;
  };
  var hour = function(v) {
    return v.value0;
  };

  // output/Data.DateTime/index.js
  var DateTime = /* @__PURE__ */ function() {
    function DateTime2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    DateTime2.create = function(value0) {
      return function(value1) {
        return new DateTime2(value0, value1);
      };
    };
    return DateTime2;
  }();

  // output/Data.DateTime.Instant/foreign.js
  function toDateTimeImpl(ctor) {
    return function(instant2) {
      var dt = new Date(instant2);
      return ctor(dt.getUTCFullYear())(dt.getUTCMonth() + 1)(dt.getUTCDate())(dt.getUTCHours())(dt.getUTCMinutes())(dt.getUTCSeconds())(dt.getUTCMilliseconds());
    };
  }

  // output/Data.DateTime.Instant/index.js
  var fromJust5 = /* @__PURE__ */ fromJust();
  var toEnum3 = /* @__PURE__ */ toEnum(boundedEnumMonth);
  var toDateTime = /* @__PURE__ */ function() {
    var mkDateTime = function(y) {
      return function(mo) {
        return function(d) {
          return function(h) {
            return function(mi) {
              return function(s) {
                return function(ms) {
                  return new DateTime(canonicalDate(y)(fromJust5(toEnum3(mo)))(d), new Time(h, mi, s, ms));
                };
              };
            };
          };
        };
      };
    };
    return toDateTimeImpl(mkDateTime);
  }();

  // output/Foreign/foreign.js
  var isArray = Array.isArray || function(value13) {
    return Object.prototype.toString.call(value13) === "[object Array]";
  };

  // output/Effect.Exception/foreign.js
  function error(msg) {
    return new Error(msg);
  }
  function throwException(e) {
    return function() {
      throw e;
    };
  }

  // output/Control.Monad.ST.Global/index.js
  var toEffect = unsafeCoerce2;

  // output/Control.Monad.ST.Class/index.js
  var monadSTST = {
    liftST: /* @__PURE__ */ identity(categoryFn),
    Monad0: function() {
      return monadST;
    }
  };
  var monadSTEffect = {
    liftST: toEffect,
    Monad0: function() {
      return monadEffect;
    }
  };
  var liftST = function(dict) {
    return dict.liftST;
  };

  // output/Data.String.CodeUnits/foreign.js
  var _indexOf = function(just) {
    return function(nothing) {
      return function(x) {
        return function(s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  // output/Data.String.CodeUnits/index.js
  var indexOf = /* @__PURE__ */ function() {
    return _indexOf(Just.create)(Nothing.value);
  }();
  var contains = function(pat) {
    var $23 = indexOf(pat);
    return function($24) {
      return isJust($23($24));
    };
  };

  // output/Data.JSDate/index.js
  var fromEnum3 = /* @__PURE__ */ fromEnum(boundedEnumYear);
  var fromEnum1 = /* @__PURE__ */ fromEnum(boundedEnumMonth);
  var fromEnum22 = /* @__PURE__ */ fromEnum(boundedEnumDay);
  var fromEnum32 = /* @__PURE__ */ fromEnum(boundedEnumHour);
  var fromEnum4 = /* @__PURE__ */ fromEnum(boundedEnumMinute);
  var fromEnum5 = /* @__PURE__ */ fromEnum(boundedEnumSecond);
  var fromEnum6 = /* @__PURE__ */ fromEnum(boundedEnumMillisecond);
  var toUTCString = function(dt) {
    return dateMethod("toUTCString", dt);
  };
  var fromDateTime = function(v) {
    return jsdate({
      year: toNumber(fromEnum3(year(v.value0))),
      month: toNumber(fromEnum1(month(v.value0)) - 1 | 0),
      day: toNumber(fromEnum22(day(v.value0))),
      hour: toNumber(fromEnum32(hour(v.value1))),
      minute: toNumber(fromEnum4(minute(v.value1))),
      second: toNumber(fromEnum5(second(v.value1))),
      millisecond: toNumber(fromEnum6(millisecond(v.value1)))
    });
  };

  // output/Data.Compactable/index.js
  var $$void3 = /* @__PURE__ */ $$void(functorST);
  var pure1 = /* @__PURE__ */ pure(applicativeST);
  var apply3 = /* @__PURE__ */ apply2(applyST);
  var map7 = /* @__PURE__ */ map(functorST);
  var compactableArray = {
    compact: function(xs) {
      return function __do3() {
        var result = newSTArray();
        var iter = iterator(function(v) {
          return index(xs)(v);
        })();
        iterate(iter)(function($108) {
          return $$void3(function(v) {
            if (v instanceof Nothing) {
              return pure1(0);
            }
            ;
            if (v instanceof Just) {
              return push(v.value0)(result);
            }
            ;
            throw new Error("Failed pattern match at Data.Compactable (line 111, column 34 - line 113, column 35): " + [v.constructor.name]);
          }($108));
        })();
        return unsafeFreeze(result)();
      }();
    },
    separate: function(xs) {
      return function __do3() {
        var ls = newSTArray();
        var rs = newSTArray();
        var iter = iterator(function(v) {
          return index(xs)(v);
        })();
        iterate(iter)(function($109) {
          return $$void3(function(v) {
            if (v instanceof Left) {
              return push(v.value0)(ls);
            }
            ;
            if (v instanceof Right) {
              return push(v.value0)(rs);
            }
            ;
            throw new Error("Failed pattern match at Data.Compactable (line 122, column 34 - line 124, column 31): " + [v.constructor.name]);
          }($109));
        })();
        return apply3(map7(function(v) {
          return function(v1) {
            return {
              left: v,
              right: v1
            };
          };
        })(unsafeFreeze(ls)))(unsafeFreeze(rs))();
      }();
    }
  };
  var compact = function(dict) {
    return dict.compact;
  };

  // output/Deku.Do/index.js
  var bind2 = function(f) {
    return function(a2) {
      return f(a2);
    };
  };

  // output/Data.CatQueue/index.js
  var CatQueue = /* @__PURE__ */ function() {
    function CatQueue2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    CatQueue2.create = function(value0) {
      return function(value1) {
        return new CatQueue2(value0, value1);
      };
    };
    return CatQueue2;
  }();
  var uncons3 = function($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
      if (v.value0 instanceof Nil && v.value1 instanceof Nil) {
        $tco_done = true;
        return Nothing.value;
      }
      ;
      if (v.value0 instanceof Nil) {
        $copy_v = new CatQueue(reverse2(v.value1), Nil.value);
        return;
      }
      ;
      if (v.value0 instanceof Cons) {
        $tco_done = true;
        return new Just(new Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
      }
      ;
      throw new Error("Failed pattern match at Data.CatQueue (line 82, column 1 - line 82, column 63): " + [v.constructor.name]);
    }
    ;
    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }
    ;
    return $tco_result;
  };
  var snoc3 = function(v) {
    return function(a2) {
      return new CatQueue(v.value0, new Cons(a2, v.value1));
    };
  };
  var $$null = function(v) {
    if (v.value0 instanceof Nil && v.value1 instanceof Nil) {
      return true;
    }
    ;
    return false;
  };
  var empty4 = /* @__PURE__ */ function() {
    return new CatQueue(Nil.value, Nil.value);
  }();

  // output/Data.CatList/index.js
  var CatNil = /* @__PURE__ */ function() {
    function CatNil2() {
    }
    ;
    CatNil2.value = new CatNil2();
    return CatNil2;
  }();
  var CatCons = /* @__PURE__ */ function() {
    function CatCons2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    CatCons2.create = function(value0) {
      return function(value1) {
        return new CatCons2(value0, value1);
      };
    };
    return CatCons2;
  }();
  var link = function(v) {
    return function(v1) {
      if (v instanceof CatNil) {
        return v1;
      }
      ;
      if (v1 instanceof CatNil) {
        return v;
      }
      ;
      if (v instanceof CatCons) {
        return new CatCons(v.value0, snoc3(v.value1)(v1));
      }
      ;
      throw new Error("Failed pattern match at Data.CatList (line 108, column 1 - line 108, column 54): " + [v.constructor.name, v1.constructor.name]);
    };
  };
  var foldr3 = function(k) {
    return function(b) {
      return function(q) {
        var foldl4 = function($copy_v) {
          return function($copy_v1) {
            return function($copy_v2) {
              var $tco_var_v = $copy_v;
              var $tco_var_v1 = $copy_v1;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1, v2) {
                if (v2 instanceof Nil) {
                  $tco_done = true;
                  return v1;
                }
                ;
                if (v2 instanceof Cons) {
                  $tco_var_v = v;
                  $tco_var_v1 = v(v1)(v2.value0);
                  $copy_v2 = v2.value1;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.CatList (line 124, column 3 - line 124, column 59): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
              }
              ;
              return $tco_result;
            };
          };
        };
        var go2 = function($copy_xs) {
          return function($copy_ys) {
            var $tco_var_xs = $copy_xs;
            var $tco_done1 = false;
            var $tco_result;
            function $tco_loop(xs, ys) {
              var v = uncons3(xs);
              if (v instanceof Nothing) {
                $tco_done1 = true;
                return foldl4(function(x) {
                  return function(i) {
                    return i(x);
                  };
                })(b)(ys);
              }
              ;
              if (v instanceof Just) {
                $tco_var_xs = v.value0.value1;
                $copy_ys = new Cons(k(v.value0.value0), ys);
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.CatList (line 120, column 14 - line 122, column 67): " + [v.constructor.name]);
            }
            ;
            while (!$tco_done1) {
              $tco_result = $tco_loop($tco_var_xs, $copy_ys);
            }
            ;
            return $tco_result;
          };
        };
        return go2(q)(Nil.value);
      };
    };
  };
  var uncons4 = function(v) {
    if (v instanceof CatNil) {
      return Nothing.value;
    }
    ;
    if (v instanceof CatCons) {
      return new Just(new Tuple(v.value0, function() {
        var $66 = $$null(v.value1);
        if ($66) {
          return CatNil.value;
        }
        ;
        return foldr3(link)(CatNil.value)(v.value1);
      }()));
    }
    ;
    throw new Error("Failed pattern match at Data.CatList (line 99, column 1 - line 99, column 61): " + [v.constructor.name]);
  };
  var empty5 = /* @__PURE__ */ function() {
    return CatNil.value;
  }();
  var append2 = link;
  var semigroupCatList = {
    append: append2
  };
  var snoc4 = function(cat) {
    return function(a2) {
      return append2(cat)(new CatCons(a2, empty4));
    };
  };

  // output/Control.Monad.Free/index.js
  var $runtime_lazy6 = function(name16, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var append3 = /* @__PURE__ */ append(semigroupCatList);
  var Free = /* @__PURE__ */ function() {
    function Free2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Free2.create = function(value0) {
      return function(value1) {
        return new Free2(value0, value1);
      };
    };
    return Free2;
  }();
  var Return = /* @__PURE__ */ function() {
    function Return2(value0) {
      this.value0 = value0;
    }
    ;
    Return2.create = function(value0) {
      return new Return2(value0);
    };
    return Return2;
  }();
  var Bind = /* @__PURE__ */ function() {
    function Bind2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Bind2.create = function(value0) {
      return function(value1) {
        return new Bind2(value0, value1);
      };
    };
    return Bind2;
  }();
  var toView = function($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
      var runExpF = function(v22) {
        return v22;
      };
      var concatF = function(v22) {
        return function(r) {
          return new Free(v22.value0, append3(v22.value1)(r));
        };
      };
      if (v.value0 instanceof Return) {
        var v2 = uncons4(v.value1);
        if (v2 instanceof Nothing) {
          $tco_done = true;
          return new Return(v.value0.value0);
        }
        ;
        if (v2 instanceof Just) {
          $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
          return;
        }
        ;
        throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [v2.constructor.name]);
      }
      ;
      if (v.value0 instanceof Bind) {
        $tco_done = true;
        return new Bind(v.value0.value0, function(a2) {
          return concatF(v.value0.value1(a2))(v.value1);
        });
      }
      ;
      throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [v.value0.constructor.name]);
    }
    ;
    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }
    ;
    return $tco_result;
  };
  var resume$prime = function(k) {
    return function(j) {
      return function(f) {
        var v = toView(f);
        if (v instanceof Return) {
          return j(v.value0);
        }
        ;
        if (v instanceof Bind) {
          return k(v.value0)(v.value1);
        }
        ;
        throw new Error("Failed pattern match at Control.Monad.Free (line 213, column 17 - line 215, column 20): " + [v.constructor.name]);
      };
    };
  };
  var resume = function(dictFunctor) {
    var map111 = map(dictFunctor);
    return resume$prime(function(g) {
      return function(i) {
        return new Left(map111(i)(g));
      };
    })(Right.create);
  };
  var fromView = function(f) {
    return new Free(f, empty5);
  };
  var freeMonad = {
    Applicative0: function() {
      return freeApplicative;
    },
    Bind1: function() {
      return freeBind;
    }
  };
  var freeFunctor = {
    map: function(k) {
      return function(f) {
        return bindFlipped(freeBind)(function() {
          var $189 = pure(freeApplicative);
          return function($190) {
            return $189(k($190));
          };
        }())(f);
      };
    }
  };
  var freeBind = {
    bind: function(v) {
      return function(k) {
        return new Free(v.value0, snoc4(v.value1)(k));
      };
    },
    Apply0: function() {
      return $lazy_freeApply(0);
    }
  };
  var freeApplicative = {
    pure: function($191) {
      return fromView(Return.create($191));
    },
    Apply0: function() {
      return $lazy_freeApply(0);
    }
  };
  var $lazy_freeApply = /* @__PURE__ */ $runtime_lazy6("freeApply", "Control.Monad.Free", function() {
    return {
      apply: ap(freeMonad),
      Functor0: function() {
        return freeFunctor;
      }
    };
  });
  var pure2 = /* @__PURE__ */ pure(freeApplicative);
  var liftF = function(f) {
    return fromView(new Bind(f, function($192) {
      return pure2($192);
    }));
  };

  // output/Data.Nullable/foreign.js
  function nullable(a2, r, f) {
    return a2 == null ? r : f(a2);
  }

  // output/Data.Nullable/index.js
  var toMaybe = function(n) {
    return nullable(n, Nothing.value, Just.create);
  };

  // output/Effect.Uncurried/foreign.js
  var mkEffectFn1 = function mkEffectFn12(fn) {
    return function(x) {
      return fn(x)();
    };
  };
  var mkEffectFn2 = function mkEffectFn22(fn) {
    return function(a2, b) {
      return fn(a2)(b)();
    };
  };
  var mkEffectFn3 = function mkEffectFn32(fn) {
    return function(a2, b, c) {
      return fn(a2)(b)(c)();
    };
  };
  var runEffectFn1 = function runEffectFn12(fn) {
    return function(a2) {
      return function() {
        return fn(a2);
      };
    };
  };
  var runEffectFn2 = function runEffectFn22(fn) {
    return function(a2) {
      return function(b) {
        return function() {
          return fn(a2, b);
        };
      };
    };
  };

  // output/Effect.Uncurried/index.js
  var semigroupEffectFn1 = function(dictSemigroup) {
    var append6 = append(semigroupEffect(dictSemigroup));
    return {
      append: function(f1) {
        return function(f2) {
          return mkEffectFn1(function(a2) {
            return append6(runEffectFn1(f1)(a2))(runEffectFn1(f2)(a2));
          });
        };
      }
    };
  };
  var monoidEffectFn1 = function(dictMonoid) {
    var mempty3 = mempty(monoidEffect(dictMonoid));
    var semigroupEffectFn11 = semigroupEffectFn1(dictMonoid.Semigroup0());
    return {
      mempty: mkEffectFn1(function(v) {
        return mempty3;
      }),
      Semigroup0: function() {
        return semigroupEffectFn11;
      }
    };
  };

  // output/Foreign.Object/foreign.js
  function toArrayWithKey(f) {
    return function(m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
  var keys3 = Object.keys || toArrayWithKey(function(k) {
    return function() {
      return k;
    };
  });

  // output/Deku.Internal.Ancestry/index.js
  var show2 = /* @__PURE__ */ show(showInt);
  var Element = /* @__PURE__ */ function() {
    function Element3(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Element3.create = function(value0) {
      return function(value1) {
        return new Element3(value0, value1);
      };
    };
    return Element3;
  }();
  var Root = /* @__PURE__ */ function() {
    function Root2() {
    }
    ;
    Root2.value = new Root2();
    return Root2;
  }();
  var RealAncestry = /* @__PURE__ */ function() {
    function RealAncestry2(value0) {
      this.value0 = value0;
    }
    ;
    RealAncestry2.create = function(value0) {
      return new RealAncestry2(value0);
    };
    return RealAncestry2;
  }();
  var FakeAncestry = /* @__PURE__ */ function() {
    function FakeAncestry2(value0) {
      this.value0 = value0;
    }
    ;
    FakeAncestry2.create = function(value0) {
      return new FakeAncestry2(value0);
    };
    return FakeAncestry2;
  }();
  var root = /* @__PURE__ */ function() {
    return new RealAncestry({
      rep: "",
      lineage: Root.value,
      hasElementParent: false
    });
  }();
  var hasElementParent = function(v) {
    if (v instanceof RealAncestry) {
      return v.value0.hasElementParent;
    }
    ;
    if (v instanceof FakeAncestry) {
      return contains("e")(v.value0.rep);
    }
    ;
    throw new Error("Failed pattern match at Deku.Internal.Ancestry (line 110, column 1 - line 110, column 40): " + [v.constructor.name]);
  };
  var element = function(v) {
    return function(v1) {
      if (v1 instanceof RealAncestry) {
        return new RealAncestry({
          rep: v1.value0.rep + ("e" + show2(v)),
          lineage: new Element(v, v1.value0.lineage),
          hasElementParent: true
        });
      }
      ;
      if (v1 instanceof FakeAncestry) {
        return new FakeAncestry({
          rep: v1.value0.rep + ("e" + show2(v))
        });
      }
      ;
      throw new Error("Failed pattern match at Deku.Internal.Ancestry (line 120, column 1 - line 120, column 39): " + [v.constructor.name, v1.constructor.name]);
    };
  };

  // output/Deku.Internal.Entities/index.js
  var toDekuText = unsafeCoerce2;
  var toDekuElement = unsafeCoerce2;
  var fromDekuText = unsafeCoerce2;
  var fromDekuElement = unsafeCoerce2;

  // output/FRP.Event/foreign.js
  var objHack = (tag) => () => {
    return {
      r: false,
      q: [],
      m: [{}],
      tag
    };
  };
  var insertObjHack = (k, v, o) => {
    o.m[o.m.length - 1][k] = v;
  };
  var deleteObjHack = (k, o) => {
    for (const m of o.m) {
      if (delete m[k]) {
        return true;
      }
    }
    return false;
  };
  var run3 = (o, M, f, i) => {
    o.m.push({});
    for (const kv of Object.entries(o.m[i])) {
      const k = kv[0];
      const v = kv[1];
      f(v);
      if (Object.keys(o.m[i + 1]).length)
        run3(o, M, f, i + 1);
      o.m[i + 1] = {};
      o.m.length = i + 1 + 1;
      M[k] = v;
    }
  };
  var fastForeachOhE = (o, ff2) => {
    let f = ff2;
    while (true) {
      if (o.r) {
        o.q.push(f);
        return;
      }
      o.r = true;
      const M = {};
      run3(o, M, f, 0);
      o.m.length = 0;
      o.m.push(M);
      o.r = false;
      f = o.q.shift();
      if (f == void 0) {
        break;
      }
    }
  };

  // output/Data.Filterable/index.js
  var append4 = /* @__PURE__ */ append(semigroupArray);
  var foldl3 = /* @__PURE__ */ foldl(foldableArray);
  var maybeBool = function(p) {
    return function(x) {
      var $66 = p(x);
      if ($66) {
        return new Just(x);
      }
      ;
      return Nothing.value;
    };
  };
  var filterableArray = {
    partitionMap: function(p) {
      var go2 = function(acc) {
        return function(x) {
          var v = p(x);
          if (v instanceof Left) {
            return {
              right: acc.right,
              left: append4(acc.left)([v.value0])
            };
          }
          ;
          if (v instanceof Right) {
            return {
              left: acc.left,
              right: append4(acc.right)([v.value0])
            };
          }
          ;
          throw new Error("Failed pattern match at Data.Filterable (line 149, column 16 - line 151, column 50): " + [v.constructor.name]);
        };
      };
      return foldl3(go2)({
        left: [],
        right: []
      });
    },
    partition,
    filterMap: mapMaybe,
    filter,
    Compactable0: function() {
      return compactableArray;
    },
    Functor1: function() {
      return functorArray;
    }
  };
  var filterMap = function(dict) {
    return dict.filterMap;
  };
  var eitherBool = function(p) {
    return function(x) {
      var $84 = p(x);
      if ($84) {
        return new Right(x);
      }
      ;
      return new Left(x);
    };
  };

  // output/FRP.Event.Class/index.js
  var sampleOnRight = function(dict) {
    return dict.sampleOnRight;
  };
  var sampleOnRightOp = function(dictIsEvent) {
    var sampleOnRight12 = sampleOnRight(dictIsEvent);
    var map111 = map(dictIsEvent.Filterable2().Functor1());
    return function(ef) {
      return function(ea) {
        return sampleOnRight12(ef)(map111(applyFlipped)(ea));
      };
    };
  };
  var sampleOnLeft = function(dict) {
    return dict.sampleOnLeft;
  };
  var once = function(dict) {
    return dict.once;
  };
  var keepLatest = function(dict) {
    return dict.keepLatest;
  };
  var fix = function(dict) {
    return dict.fix;
  };

  // output/FRP.Event/index.js
  var liftST2 = /* @__PURE__ */ liftST(monadSTEffect);
  var map8 = /* @__PURE__ */ map(functorST);
  var $$void4 = /* @__PURE__ */ $$void(functorEffect);
  var for_2 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var pure3 = /* @__PURE__ */ pure(applicativeST);
  var void1 = /* @__PURE__ */ $$void(functorST);
  var join2 = /* @__PURE__ */ join(bindST);
  var pure12 = /* @__PURE__ */ pure(applicativeEffect);
  var liftST1 = /* @__PURE__ */ liftST(monadSTST);
  var mempty2 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffectFn1(monoidUnit));
  var mapFlipped2 = /* @__PURE__ */ mapFlipped(functorST);
  var identity5 = /* @__PURE__ */ identity(categoryFn);
  var resume2 = /* @__PURE__ */ resume(/* @__PURE__ */ functorCompose(functorST)(functorTuple));
  var tailRecM3 = /* @__PURE__ */ tailRecM(monadRecEffect);
  var apply4 = /* @__PURE__ */ apply2(applyST);
  var subscribeO = function(v, effectfulCallback) {
    return liftST2(map8(liftST2)(function() {
      return v(effectfulCallback);
    }))();
  };
  var subscribe = function(v) {
    return function(effectfulCallback) {
      return liftST2(map8(liftST2)(function() {
        return v(mkEffectFn1(effectfulCallback));
      }));
    };
  };
  var sampleOnRight2 = function(v) {
    return function(v1) {
      return function(effectfulCallback) {
        var latest = newSTRef(Nothing.value)();
        var c1 = v(function(a2) {
          return $$void4(liftST2(write2(new Just(a2))(latest)))();
        });
        var c2 = v1(function(f) {
          var o = liftST2(read2(latest))();
          return for_2(o)(function(a2) {
            return function() {
              return effectfulCallback(f(a2));
            };
          })();
        });
        return function __do3() {
          c1();
          return c2();
        };
      };
    };
  };
  var sampleOnLeft2 = function(v) {
    return function(v1) {
      return function(effectfulCallback) {
        var latest = newSTRef(Nothing.value)();
        var c1 = v(function(a2) {
          var o = liftST2(read2(latest))();
          return for_2(o)(function(f) {
            return function() {
              return effectfulCallback(f(a2));
            };
          })();
        });
        var c2 = v1(function(f) {
          return liftST2(void1(write2(new Just(f))(latest)))();
        });
        return function __do3() {
          c1();
          return c2();
        };
      };
    };
  };
  var once2 = function(v) {
    return function(effectfulCallback) {
      var latest = newSTRef(Nothing.value)();
      var u = newSTRef(pure3(unit))();
      var c = v(function(a2) {
        var o2 = liftST2(read2(latest))();
        if (o2 instanceof Nothing) {
          $$void4(liftST2(write2(new Just(a2))(latest)))();
          effectfulCallback(a2);
          return liftST2(join2(read2(u)))();
        }
        ;
        if (o2 instanceof Just) {
          return unit;
        }
        ;
        throw new Error("Failed pattern match at FRP.Event (line 227, column 9 - line 233, column 30): " + [o2.constructor.name]);
      });
      void1(write2(c)(u))();
      var o = liftST1(read2(latest))();
      (function() {
        if (o instanceof Just) {
          return c();
        }
        ;
        return unit;
      })();
      return c;
    };
  };
  var keepLatest2 = function(v) {
    return function(effectfulCallback) {
      var cancelInner = newSTRef(pure3(unit))();
      var cancelOuter = v(function(v1) {
        return liftST2(function __do3() {
          var ci = read2(cancelInner)();
          ci();
          var c = v1(effectfulCallback);
          return void1(write2(c)(cancelInner))();
        })();
      });
      return function __do3() {
        var ci = read2(cancelInner)();
        ci();
        return cancelOuter();
      };
    };
  };
  var justOneM = function(a2) {
    return liftF(mapFlipped2(a2)(function(a$prime) {
      return new Tuple([a$prime], unit);
    }));
  };
  var justOne = function(a2) {
    return liftF(pure3(new Tuple([a2], unit)));
  };
  var justNone = function(st) {
    return liftF(mapFlipped2(st)(function(st$prime) {
      return new Tuple([], st$prime);
    }));
  };
  var justManyM = function(a2) {
    return liftF(mapFlipped2(a2)(function(a$prime) {
      return new Tuple(a$prime, unit);
    }));
  };
  var justMany = function(a2) {
    return liftF(pure3(new Tuple(a2, unit)));
  };
  var functorEvent = {
    map: function(f) {
      return function(v) {
        return function(effectfulCallback) {
          return v(function(a2) {
            return effectfulCallback(f(a2));
          });
        };
      };
    }
  };
  var map1 = /* @__PURE__ */ map(functorEvent);
  var filter6 = function(p) {
    return function(v) {
      return function(effectfulCallback) {
        return v(function(a2) {
          var v1 = p(a2);
          if (v1 instanceof Just) {
            return effectfulCallback(v1.value0);
          }
          ;
          if (v1 instanceof Nothing) {
            return unit;
          }
          ;
          throw new Error("Failed pattern match at FRP.Event (line 248, column 31 - line 250, column 35): " + [v1.constructor.name]);
        });
      };
    };
  };
  var filter$prime = function(f) {
    return filter6(function(a2) {
      var v = f(a2);
      if (v) {
        return new Just(a2);
      }
      ;
      if (!v) {
        return Nothing.value;
      }
      ;
      throw new Error("Failed pattern match at FRP.Event (line 133, column 13 - line 135, column 25): " + [v.constructor.name]);
    });
  };
  var fastForeachST = function(array, fn) {
    return foreach(array)(function(x) {
      return function() {
        return fn(x);
      };
    })();
  };
  var fastForeachE = fastForeachST;
  var makeEventFromO = function(event) {
    return function(eventfulProgram) {
      return function(effectfulCallback) {
        return function __do3() {
          var closeEvent = event(function(a2) {
            var go2 = function($170) {
              return function(v) {
                if (v instanceof Right) {
                  return pure12(new Done(unit));
                }
                ;
                if (v instanceof Left) {
                  return function __do4() {
                    var v1 = liftST2(v.value0)();
                    fastForeachE(v1.value0, effectfulCallback);
                    return new Loop(v1.value1);
                  };
                }
                ;
                throw new Error("Failed pattern match at FRP.Event (line 452, column 23 - line 457, column 27): " + [v.constructor.name]);
              }(resume2($170));
            };
            return tailRecM3(go2)(eventfulProgram(a2))();
          });
          return closeEvent;
        };
      };
    };
  };
  var makeEvent = function(giveMe_eventb_btoEventfulProgram_iGive_StSt) {
    return function(effectfulCallback) {
      return giveMe_eventb_btoEventfulProgram_iGive_StSt(function(v) {
        return function(bToEventfulProgram) {
          return makeEventFromO(v)(bToEventfulProgram)(effectfulCallback);
        };
      })();
    };
  };
  var create_ = function(tag) {
    return function __do3() {
      var subscribers = objHack(tag)();
      var idx = newSTRef(0)();
      return {
        event: function(effectfulCallback) {
          var recordOfEffectfulCallbacks = newSTRef(effectfulCallback)();
          var ix = read2(idx)();
          insertObjHack(ix, recordOfEffectfulCallbacks, subscribers);
          void1(modify(function(v) {
            return v + 1 | 0;
          })(idx))();
          return function __do4() {
            void1(write2(mempty2)(recordOfEffectfulCallbacks))();
            deleteObjHack(ix, subscribers);
            return unit;
          };
        },
        push: function(a2) {
          return function() {
            return fastForeachOhE(subscribers, function(recordOfEffectfulCallbacks) {
              var effectfulCallback = liftST2(read2(recordOfEffectfulCallbacks))();
              return effectfulCallback(a2);
            });
          };
        }
      };
    };
  };
  var createPure = /* @__PURE__ */ create_("");
  var create = /* @__PURE__ */ create_("");
  var fix2 = function(f) {
    return function(v) {
      var v1 = create();
      var v2 = f(v1.event);
      var c2 = v1.event(v);
      var c1 = v2(mkEffectFn1(v1.push));
      return function __do3() {
        c1();
        return c2();
      };
    };
  };
  var memoize = function(e) {
    return function __do3() {
      var v = liftST2(create)();
      var unsubscribe = subscribe(e)(v.push)();
      return {
        event: v.event,
        unsubscribe
      };
    };
  };
  var compactableEvent = {
    compact: /* @__PURE__ */ filter6(identity5),
    separate: function(xs) {
      return {
        left: filter6(function(v) {
          if (v instanceof Left) {
            return new Just(v.value0);
          }
          ;
          if (v instanceof Right) {
            return Nothing.value;
          }
          ;
          throw new Error("Failed pattern match at FRP.Event (line 116, column 13 - line 118, column 33): " + [v.constructor.name]);
        })(xs),
        right: filter6(function(v) {
          if (v instanceof Right) {
            return new Just(v.value0);
          }
          ;
          if (v instanceof Left) {
            return Nothing.value;
          }
          ;
          throw new Error("Failed pattern match at FRP.Event (line 123, column 13 - line 125, column 32): " + [v.constructor.name]);
        })(xs)
      };
    }
  };
  var filterableEvent = {
    filter: filter$prime,
    filterMap: filter6,
    partition: function(p) {
      return function(xs) {
        return {
          yes: filter$prime(p)(xs),
          no: filter$prime(function($171) {
            return !p($171);
          })(xs)
        };
      };
    },
    partitionMap: function(f) {
      return function(xs) {
        return {
          left: filterMap(filterableEvent)(function() {
            var $172 = either(Just.create)($$const(Nothing.value));
            return function($173) {
              return $172(f($173));
            };
          }())(xs),
          right: filterMap(filterableEvent)(function($174) {
            return hush(f($174));
          })(xs)
        };
      };
    },
    Compactable0: function() {
      return compactableEvent;
    },
    Functor1: function() {
      return functorEvent;
    }
  };
  var biSampleOn = function(v) {
    return function(v1) {
      return function(effectfulCallback) {
        var latest1 = newSTRef(Nothing.value)();
        var latest2 = newSTRef(Nothing.value)();
        var c1 = v(function(a2) {
          $$void4(liftST2(write2(new Just(a2))(latest1)))();
          var res = liftST2(read2(latest2))();
          return for_2(res)(function(f) {
            return function() {
              return effectfulCallback(f(a2));
            };
          })();
        });
        var c2 = v1(function(f) {
          $$void4(liftST2(write2(new Just(f))(latest2)))();
          var res = liftST2(read2(latest1))();
          return for_2(res)(function(a2) {
            return function() {
              return effectfulCallback(f(a2));
            };
          })();
        });
        return function __do3() {
          c1();
          return c2();
        };
      };
    };
  };
  var applyEvent = {
    apply: function(a2) {
      return function(b) {
        return biSampleOn(a2)(map1(applyFlipped)(b));
      };
    },
    Functor0: function() {
      return functorEvent;
    }
  };
  var altEvent = {
    alt: function(v) {
      return function(v1) {
        return function(effectfulCallback) {
          return apply4(map8(function(v2) {
            return function(v3) {
              return function __do3() {
                v2();
                return v3();
              };
            };
          })(function() {
            return v(effectfulCallback);
          }))(function() {
            return v1(effectfulCallback);
          })();
        };
      };
    },
    Functor0: function() {
      return functorEvent;
    }
  };
  var plusEvent = {
    empty: function(v) {
      return pure3(unit);
    },
    Alt0: function() {
      return altEvent;
    }
  };
  var eventIsEvent = {
    keepLatest: keepLatest2,
    sampleOnRight: sampleOnRight2,
    sampleOnLeft: sampleOnLeft2,
    fix: fix2,
    once: once2,
    Plus0: function() {
      return plusEvent;
    },
    Alt1: function() {
      return altEvent;
    },
    Filterable2: function() {
      return filterableEvent;
    }
  };

  // output/Data.Profunctor/index.js
  var profunctorFn = {
    dimap: function(a2b) {
      return function(c2d) {
        return function(b2c) {
          return function($18) {
            return c2d(b2c(a2b($18)));
          };
        };
      };
    }
  };
  var dimap = function(dict) {
    return dict.dimap;
  };

  // output/Web.HTML/foreign.js
  var windowImpl = function() {
    return window;
  };

  // output/Web.Internal.FFI/foreign.js
  function _unsafeReadProtoTagged(nothing, just, name16, value13) {
    if (typeof window !== "undefined") {
      var ty = window[name16];
      if (ty != null && value13 instanceof ty) {
        return just(value13);
      }
    }
    var obj = value13;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name16) {
        return just(value13);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  }

  // output/Web.Internal.FFI/index.js
  var unsafeReadProtoTagged = function(name16) {
    return function(value13) {
      return _unsafeReadProtoTagged(Nothing.value, Just.create, name16, value13);
    };
  };

  // output/Web.HTML.HTMLButtonElement/foreign.js
  function setDisabled(disabled10) {
    return function(button2) {
      return function() {
        button2.disabled = disabled10;
      };
    };
  }

  // output/Web.HTML.HTMLButtonElement/index.js
  var fromElement = /* @__PURE__ */ unsafeReadProtoTagged("HTMLButtonElement");

  // output/Web.HTML.HTMLCanvasElement/index.js
  var fromElement2 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLCanvasElement");

  // output/Web.HTML.HTMLDocument/foreign.js
  function _body(doc) {
    return doc.body;
  }

  // output/Web.HTML.HTMLDocument/index.js
  var map9 = /* @__PURE__ */ map(functorEffect);
  var body = function(doc) {
    return map9(toMaybe)(function() {
      return _body(doc);
    });
  };

  // output/Web.HTML.HTMLElement/index.js
  var toElement = unsafeCoerce2;

  // output/Web.HTML.HTMLFieldSetElement/foreign.js
  function setDisabled2(disabled10) {
    return function(fieldset) {
      return function() {
        fieldset.disabled = disabled10;
      };
    };
  }

  // output/Web.HTML.HTMLFieldSetElement/index.js
  var fromElement3 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLFieldSetElement");

  // output/Web.HTML.HTMLInputElement/foreign.js
  function checked(input2) {
    return function() {
      return input2.checked;
    };
  }
  function setChecked(checked2) {
    return function(input2) {
      return function() {
        input2.checked = checked2;
      };
    };
  }
  function setDisabled3(disabled10) {
    return function(input2) {
      return function() {
        input2.disabled = disabled10;
      };
    };
  }
  function setValue3(value13) {
    return function(input2) {
      return function() {
        input2.value = value13;
      };
    };
  }

  // output/Web.HTML.HTMLInputElement/index.js
  var fromEventTarget = /* @__PURE__ */ unsafeReadProtoTagged("HTMLInputElement");
  var fromElement4 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLInputElement");

  // output/Web.HTML.HTMLKeygenElement/foreign.js
  function setDisabled4(disabled10) {
    return function(keygen) {
      return function() {
        keygen.disabled = disabled10;
      };
    };
  }

  // output/Web.HTML.HTMLKeygenElement/index.js
  var fromElement5 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLKeygenElement");

  // output/Web.HTML.HTMLLinkElement/foreign.js
  function setDisabled5(disabled10) {
    return function(link2) {
      return function() {
        link2.disabled = disabled10;
      };
    };
  }

  // output/Web.HTML.HTMLLinkElement/index.js
  var fromElement6 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLLinkElement");

  // output/Web.HTML.HTMLOptGroupElement/foreign.js
  function setDisabled6(disabled10) {
    return function(optgroup) {
      return function() {
        optgroup.disabled = disabled10;
      };
    };
  }

  // output/Web.HTML.HTMLOptGroupElement/index.js
  var fromElement7 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLOptGroupElement");

  // output/Web.HTML.HTMLOptionElement/foreign.js
  function setDisabled7(disabled10) {
    return function(option) {
      return function() {
        option.disabled = disabled10;
      };
    };
  }

  // output/Web.HTML.HTMLOptionElement/index.js
  var fromElement8 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLOptionElement");

  // output/Web.HTML.HTMLSelectElement/foreign.js
  function setDisabled8(disabled10) {
    return function(select3) {
      return function() {
        select3.disabled = disabled10;
      };
    };
  }

  // output/Web.HTML.HTMLSelectElement/index.js
  var fromElement9 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLSelectElement");

  // output/Web.HTML.HTMLTextAreaElement/foreign.js
  function setDisabled9(disabled10) {
    return function(textarea) {
      return function() {
        textarea.disabled = disabled10;
      };
    };
  }
  function setValue11(value13) {
    return function(textarea) {
      return function() {
        textarea.value = value13;
      };
    };
  }

  // output/Web.HTML.HTMLTextAreaElement/index.js
  var fromElement10 = /* @__PURE__ */ unsafeReadProtoTagged("HTMLTextAreaElement");

  // output/Web.HTML.Window/foreign.js
  function document2(window2) {
    return function() {
      return window2.document;
    };
  }

  // output/FRP.Poll.Unoptimized/index.js
  var identity6 = /* @__PURE__ */ identity(categoryFn);
  var oneOf2 = /* @__PURE__ */ oneOf(foldableArray);
  var empty7 = /* @__PURE__ */ empty(plusMaybe);
  var once1 = /* @__PURE__ */ once(eventIsEvent);
  var $$void5 = /* @__PURE__ */ $$void(functorST);
  var sampleOnRightOp2 = /* @__PURE__ */ sampleOnRightOp(eventIsEvent);
  var composeFlipped2 = /* @__PURE__ */ composeFlipped(semigroupoidFn);
  var map12 = /* @__PURE__ */ map(functorMaybe);
  var liftST12 = /* @__PURE__ */ liftST(monadSTST);
  var map22 = /* @__PURE__ */ map(functorArray);
  var APoll = function(x) {
    return x;
  };
  var KeepLatestStart = /* @__PURE__ */ function() {
    function KeepLatestStart2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    KeepLatestStart2.create = function(value0) {
      return function(value1) {
        return new KeepLatestStart2(value0, value1);
      };
    };
    return KeepLatestStart2;
  }();
  var KeepLatestLast = /* @__PURE__ */ function() {
    function KeepLatestLast2(value0) {
      this.value0 = value0;
    }
    ;
    KeepLatestLast2.create = function(value0) {
      return new KeepLatestLast2(value0);
    };
    return KeepLatestLast2;
  }();
  var pollable = function(dictIsEvent) {
    return {
      sample: function(v) {
        return function(ab) {
          return v(ab);
        };
      }
    };
  };
  var pollable1 = /* @__PURE__ */ pollable(eventIsEvent);
  var sample = function(dict) {
    return dict.sample;
  };
  var poll = APoll;
  var sham = function(dictIsEvent) {
    var sampleOnLeft12 = sampleOnLeft(dictIsEvent);
    return function(i) {
      return poll(function(e) {
        return sampleOnLeft12(i)(e);
      });
    };
  };
  var stRefToPoll = function(r) {
    return poll(function(e) {
      return makeEvent(function(s) {
        return s(e)(function(f) {
          return justOneM(function __do3() {
            var i = read2(r)();
            return f(i);
          });
        });
      });
    });
  };
  var stToPoll = function(r) {
    return poll(function(e) {
      return makeEvent(function(s) {
        return s(e)(function(f) {
          return justOneM(function __do3() {
            var i = r();
            return f(i);
          });
        });
      });
    });
  };
  var once3 = function(dictPollable) {
    var sample23 = sample(dictPollable);
    return function(dictIsEvent) {
      var once22 = once(dictIsEvent);
      return function(a2) {
        return poll(function(e) {
          return once22(sample23(a2)(e));
        });
      };
    };
  };
  var functorAPoll = function(dictFunctor) {
    var map34 = map(dictFunctor);
    return {
      map: function(f) {
        return function(v) {
          return function(e) {
            return v(map34(function(v1) {
              return function($496) {
                return v1(f($496));
              };
            })(e));
          };
        };
      }
    };
  };
  var sampleBy = function(dictPollable) {
    var sample23 = sample(dictPollable);
    return function(dictFunctor) {
      var map34 = map(functorAPoll(dictFunctor));
      return function(dictFunctor1) {
        var map42 = map(dictFunctor1);
        return function(f) {
          return function(apollA) {
            return function(pollableB) {
              return sample23(map34(f)(apollA))(map42(applyFlipped)(pollableB));
            };
          };
        };
      };
    };
  };
  var keepLatest3 = function(dictFilterable) {
    var filterMap12 = filterMap(dictFilterable);
    var Functor1 = dictFilterable.Functor1();
    return function(dictIsEvent) {
      var fix12 = fix(dictIsEvent);
      var oneOf1 = oneOf2(dictIsEvent.Plus0());
      var keepLatest1 = keepLatest(dictIsEvent);
      var once22 = once(dictIsEvent);
      return function(dictPollable) {
        var sampleBy12 = sampleBy(dictPollable)(Functor1)(Functor1);
        return function(a2) {
          return function(e) {
            return filterMap12(function(v) {
              if (v instanceof KeepLatestLast) {
                return new Just(v.value0);
              }
              ;
              return Nothing.value;
            })(fix12(function(ie) {
              return oneOf1([sampleBy12(KeepLatestStart.create)(a2)(e), keepLatest1(flip(filterMap12)(ie)(function(v) {
                if (v instanceof KeepLatestStart) {
                  return new Just(sampleBy12(function(bb) {
                    return function(v1) {
                      return new KeepLatestLast(v.value1(bb));
                    };
                  })(v.value0)(once22(ie)));
                }
                ;
                return empty7;
              }))]);
            }));
          };
        };
      };
    };
  };
  var sample_ = function(dictPollable) {
    var sampleBy12 = sampleBy(dictPollable);
    return function(dictFunctor) {
      var sampleBy2 = sampleBy12(dictFunctor);
      return function(dictFunctor1) {
        return sampleBy2(dictFunctor1)($$const);
      };
    };
  };
  var sample_1 = /* @__PURE__ */ sample_(pollable1)(functorEvent)(functorEvent);
  var rant = function(a2) {
    return function __do3() {
      var ep = createPure();
      var maybeUnsubscribe = newSTRef(Nothing.value)();
      return {
        unsubscribe: function __do4() {
          var v = read2(maybeUnsubscribe)();
          if (v instanceof Nothing) {
            return unit;
          }
          ;
          if (v instanceof Just) {
            return v.value0();
          }
          ;
          throw new Error("Failed pattern match at FRP.Poll.Unoptimized (line 861, column 41 - line 863, column 42): " + [v.constructor.name]);
        },
        poll: poll(function(requesterEvent) {
          return makeEvent(function(responseEventCallback) {
            return function __do4() {
              (function __do5() {
                var v = read2(maybeUnsubscribe)();
                if (v instanceof Nothing) {
                  var unsubscribe = responseEventCallback(sample_1(a2)(once1(requesterEvent)))(function(v1) {
                    return justNone(ep.push(v1));
                  })();
                  return $$void5(flip(write2)(maybeUnsubscribe)(new Just(unsubscribe)))();
                }
                ;
                if (v instanceof Just) {
                  return unit;
                }
                ;
                throw new Error("Failed pattern match at FRP.Poll.Unoptimized (line 865, column 41 - line 869, column 30): " + [v.constructor.name]);
              })();
              var u3 = responseEventCallback(sampleOnRightOp2(requesterEvent)(ep.event))(justOne)();
              return u3;
            };
          });
        })
      };
    };
  };
  var sampleOnLeft3 = function(dictPollable) {
    var sample_2 = sample_(dictPollable);
    var sampleBy12 = sampleBy(dictPollable);
    return function(dictIsEvent) {
      var sampleOnLeft12 = sampleOnLeft(dictIsEvent);
      var Functor1 = dictIsEvent.Filterable2().Functor1();
      var sample_3 = sample_2(Functor1)(Functor1);
      var sampleBy2 = sampleBy12(Functor1)(Functor1);
      return function(pollA) {
        return function(pollAB) {
          return poll(function(e) {
            return sampleOnLeft12(sample_3(pollA)(e))(sampleBy2(composeFlipped2)(pollAB)(e));
          });
        };
      };
    };
  };
  var sampleOnRight3 = function(dictPollable) {
    var sample_2 = sample_(dictPollable);
    var sampleBy12 = sampleBy(dictPollable);
    return function(dictIsEvent) {
      var sampleOnRight12 = sampleOnRight(dictIsEvent);
      var Functor1 = dictIsEvent.Filterable2().Functor1();
      var sample_3 = sample_2(Functor1)(Functor1);
      var sampleBy2 = sampleBy12(Functor1)(Functor1);
      return function(pollA) {
        return function(pollAB) {
          return poll(function(e) {
            return sampleOnRight12(sample_3(pollA)(e))(sampleBy2(composeFlipped2)(pollAB)(e));
          });
        };
      };
    };
  };
  var altAPoll = function(dictAlt) {
    var alt8 = alt(dictAlt);
    var functorAPoll1 = functorAPoll(dictAlt.Functor0());
    return {
      alt: function(v) {
        return function(v1) {
          return function(e) {
            return alt8(v(e))(v1(e));
          };
        };
      },
      Functor0: function() {
        return functorAPoll1;
      }
    };
  };
  var plusAPoll = function(dictPlus) {
    var empty12 = empty(dictPlus);
    var altAPoll1 = altAPoll(dictPlus.Alt0());
    return {
      empty: function(v) {
        return empty12;
      },
      Alt0: function() {
        return altAPoll1;
      }
    };
  };
  var fix3 = function(dictPollable) {
    var sampleBy12 = sampleBy(dictPollable);
    return function(dictIsEvent) {
      var fix12 = fix(dictIsEvent);
      var Functor1 = dictIsEvent.Filterable2().Functor1();
      var sampleBy2 = sampleBy12(Functor1)(Functor1);
      var sham22 = sham(dictIsEvent);
      var map34 = map(Functor1);
      return function(f) {
        return poll(function() {
          var innerPoll = function(e) {
            var fixed2 = fix12(function(ee) {
              return sampleBy2(Tuple.create)(f(sham22(map34(fst)(ee))))(e);
            });
            return map34(function(v) {
              return v.value1(v.value0);
            })(fixed2);
          };
          return innerPoll;
        }());
      };
    };
  };
  var filterMap2 = function(dictCompactable) {
    var compact2 = compact(dictCompactable);
    return function(dictPollable) {
      var sampleBy12 = sampleBy(dictPollable);
      return function(dictFunctor) {
        var sampleBy2 = sampleBy12(dictFunctor)(dictFunctor);
        return function(f) {
          return function(pollA) {
            return poll(function(e) {
              return compact2(sampleBy2(function(a2) {
                return function(ff2) {
                  return map12(ff2)(f(a2));
                };
              })(pollA)(e));
            });
          };
        };
      };
    };
  };
  var partitionMap = function(dictPollable) {
    return function(dictCompactable) {
      var filterMap12 = filterMap2(dictCompactable)(dictPollable);
      return function(dictFunctor) {
        var map34 = map(functorAPoll(dictFunctor));
        var filterMap23 = filterMap12(dictFunctor);
        return function(f) {
          return function(pollA) {
            var fb = map34(f)(pollA);
            return {
              left: filterMap23(either(Just.create)($$const(Nothing.value)))(fb),
              right: filterMap23(either($$const(Nothing.value))(Just.create))(fb)
            };
          };
        };
      };
    };
  };
  var compactableAPoll = function(dictFunctor) {
    return function(dictCompactable) {
      var filterMap12 = filterMap2(dictCompactable);
      return function(dictPollable) {
        return {
          compact: filterMap12(dictPollable)(dictFunctor)(identity6),
          separate: partitionMap(dictPollable)(dictCompactable)(dictFunctor)(identity6)
        };
      };
    };
  };
  var filterableAPoll = function(dictFunctor) {
    var compactableAPoll1 = compactableAPoll(dictFunctor);
    var functorAPoll1 = functorAPoll(dictFunctor);
    return function(dictCompactable) {
      var filterMap12 = filterMap2(dictCompactable);
      var compactableAPoll2 = compactableAPoll1(dictCompactable);
      return function(dictPollable) {
        var filterMap23 = filterMap12(dictPollable)(dictFunctor);
        var partitionMap1 = partitionMap(dictPollable)(dictCompactable)(dictFunctor);
        var compactableAPoll3 = compactableAPoll2(dictPollable);
        return {
          filterMap: filterMap23,
          filter: function($497) {
            return filterMap23(maybeBool($497));
          },
          partitionMap: partitionMap1,
          partition: function(p) {
            return function(xs) {
              var o = partitionMap1(eitherBool(p))(xs);
              return {
                no: o.left,
                yes: o.right
              };
            };
          },
          Compactable0: function() {
            return compactableAPoll3;
          },
          Functor1: function() {
            return functorAPoll1;
          }
        };
      };
    };
  };
  var isEventAPoll = function(dictIsEvent) {
    var Filterable2 = dictIsEvent.Filterable2();
    var keepLatest1 = keepLatest3(Filterable2)(dictIsEvent);
    var plusAPoll1 = plusAPoll(dictIsEvent.Plus0());
    var altAPoll1 = altAPoll(dictIsEvent.Alt1());
    var filterableAPoll1 = filterableAPoll(Filterable2.Functor1())(Filterable2.Compactable0());
    return function(dictPlus) {
      return function(dictPollable) {
        var filterableAPoll2 = filterableAPoll1(dictPollable);
        return {
          sampleOnRight: sampleOnRight3(dictPollable)(dictIsEvent),
          sampleOnLeft: sampleOnLeft3(dictPollable)(dictIsEvent),
          keepLatest: keepLatest1(dictPollable),
          fix: fix3(dictPollable)(dictIsEvent),
          once: once3(dictPollable)(dictIsEvent),
          Plus0: function() {
            return plusAPoll1;
          },
          Alt1: function() {
            return altAPoll1;
          },
          Filterable2: function() {
            return filterableAPoll2;
          }
        };
      };
    };
  };
  var deflect = function(pollA) {
    return function __do3() {
      var ep = newSTRef([])();
      var maybeUnsubscribe = newSTRef(Nothing.value)();
      var innerPoll = function(e) {
        var innerEvent = function(s) {
          return function __do4() {
            (function __do5() {
              var v = read2(maybeUnsubscribe)();
              if (v instanceof Nothing) {
                var unsubscribe = s(sample_1(pollA)(once1(e)))(function(i) {
                  return justNone($$void5(liftST12(flip(modify)(ep)(flip(snoc)(i)))));
                })();
                return $$void5(write2(new Just(unsubscribe))(maybeUnsubscribe))();
              }
              ;
              if (v instanceof Just) {
                return unit;
              }
              ;
              throw new Error("Failed pattern match at FRP.Poll.Unoptimized (line 917, column 43 - line 923, column 24): " + [v.constructor.name]);
            })();
            var u3 = s(e)(function(f) {
              return justManyM(function __do5() {
                (function __do6() {
                  var v = read2(maybeUnsubscribe)();
                  if (v instanceof Nothing) {
                    return unit;
                  }
                  ;
                  if (v instanceof Just) {
                    return v.value0();
                  }
                  ;
                  throw new Error("Failed pattern match at FRP.Poll.Unoptimized (line 925, column 45 - line 929, column 28): " + [v.constructor.name]);
                })();
                var r = read2(ep)();
                return map22(f)(r);
              });
            })();
            return u3;
          };
        };
        return makeEvent(innerEvent);
      };
      return poll(innerPoll);
    };
  };
  var applyAPoll = function(dictApply) {
    var apply8 = apply2(dictApply);
    var Functor0 = dictApply.Functor0();
    var map34 = map(Functor0);
    var voidLeft2 = voidLeft(Functor0);
    var functorAPoll1 = functorAPoll(Functor0);
    return {
      apply: function(v) {
        return function(v1) {
          return function(e) {
            return apply8(map34(function(ff2) {
              return function(v2) {
                return v2.value0(ff2(v2.value1));
              };
            })(v(voidLeft2(e)(identity6))))(v1(map34(Tuple.create)(e)));
          };
        };
      },
      Functor0: function() {
        return functorAPoll1;
      }
    };
  };
  var applicativeAPoll = function(dictApply) {
    var map34 = map(dictApply.Functor0());
    var applyAPoll1 = applyAPoll(dictApply);
    return {
      pure: function(a2) {
        return function(e) {
          return map34(applyFlipped(a2))(e);
        };
      },
      Apply0: function() {
        return applyAPoll1;
      }
    };
  };

  // output/FRP.Poll/index.js
  var $runtime_lazy7 = function(name16, moduleName, init3) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2)
        return val;
      if (state3 === 1)
        throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init3();
      state3 = 2;
      return val;
    };
  };
  var map10 = /* @__PURE__ */ map(functorArray);
  var alt5 = /* @__PURE__ */ alt(altEvent);
  var pollable2 = /* @__PURE__ */ pollable(eventIsEvent);
  var sample1 = /* @__PURE__ */ sample(pollable2);
  var sampleOnLeft1 = /* @__PURE__ */ sampleOnLeft(eventIsEvent);
  var alt1 = /* @__PURE__ */ alt(/* @__PURE__ */ altAPoll(altEvent));
  var oneOfMap2 = /* @__PURE__ */ oneOfMap(foldableArray)(/* @__PURE__ */ plusAPoll(plusEvent));
  var pure4 = /* @__PURE__ */ pure(/* @__PURE__ */ applicativeAPoll(applyEvent));
  var sham1 = /* @__PURE__ */ sham(eventIsEvent);
  var sampleOnRight1 = /* @__PURE__ */ sampleOnRight(eventIsEvent);
  var isEventAPoll2 = /* @__PURE__ */ isEventAPoll(eventIsEvent)(plusEvent)(pollable2);
  var sampleOnLeft22 = /* @__PURE__ */ sampleOnLeft(isEventAPoll2);
  var sampleOnRight22 = /* @__PURE__ */ sampleOnRight(isEventAPoll2);
  var once12 = /* @__PURE__ */ once(isEventAPoll2);
  var append5 = /* @__PURE__ */ append(semigroupArray);
  var pure13 = /* @__PURE__ */ pure(applicativeST);
  var discard2 = /* @__PURE__ */ discard(discardUnit);
  var discard1 = /* @__PURE__ */ discard2(freeBind);
  var $$void6 = /* @__PURE__ */ $$void(functorST);
  var liftST3 = /* @__PURE__ */ liftST(monadSTST);
  var identity7 = /* @__PURE__ */ identity(categoryFn);
  var map23 = /* @__PURE__ */ map(/* @__PURE__ */ functorAPoll(functorEvent));
  var map32 = /* @__PURE__ */ map(functorEvent);
  var unsafeIndex2 = /* @__PURE__ */ unsafeIndex();
  var sampleBy1 = /* @__PURE__ */ sampleBy(pollable2)(functorEvent)(functorEvent);
  var fix1 = /* @__PURE__ */ fix(eventIsEvent);
  var filterMap1 = /* @__PURE__ */ filterMap(filterableArray);
  var filterMap22 = /* @__PURE__ */ filterMap(/* @__PURE__ */ filterableAPoll(functorEvent)(compactableEvent)(pollable2));
  var filterMap3 = /* @__PURE__ */ filterMap(filterableEvent);
  var empty8 = /* @__PURE__ */ empty(plusEvent);
  var dimap2 = /* @__PURE__ */ dimap(profunctorFn);
  var fix22 = /* @__PURE__ */ fix(isEventAPoll2);
  var apply5 = /* @__PURE__ */ apply2(applyEvent);
  var apply1 = /* @__PURE__ */ apply2(/* @__PURE__ */ applyAPoll(applyEvent));
  var OnlyPure = /* @__PURE__ */ function() {
    function OnlyPure2(value0) {
      this.value0 = value0;
    }
    ;
    OnlyPure2.create = function(value0) {
      return new OnlyPure2(value0);
    };
    return OnlyPure2;
  }();
  var OnlyPoll = /* @__PURE__ */ function() {
    function OnlyPoll2(value0) {
      this.value0 = value0;
    }
    ;
    OnlyPoll2.create = function(value0) {
      return new OnlyPoll2(value0);
    };
    return OnlyPoll2;
  }();
  var OnlyEvent = /* @__PURE__ */ function() {
    function OnlyEvent2(value0) {
      this.value0 = value0;
    }
    ;
    OnlyEvent2.create = function(value0) {
      return new OnlyEvent2(value0);
    };
    return OnlyEvent2;
  }();
  var PureAndEvent = /* @__PURE__ */ function() {
    function PureAndEvent2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    PureAndEvent2.create = function(value0) {
      return function(value1) {
        return new PureAndEvent2(value0, value1);
      };
    };
    return PureAndEvent2;
  }();
  var PureAndPoll = /* @__PURE__ */ function() {
    function PureAndPoll2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    PureAndPoll2.create = function(value0) {
      return function(value1) {
        return new PureAndPoll2(value0, value1);
      };
    };
    return PureAndPoll2;
  }();
  var pollableEvent = {
    sample: function(v) {
      return function(v1) {
        if (v instanceof PureAndPoll) {
          var e = makeEvent(function(s) {
            return s(v1)(function(f) {
              return justMany(map10(f)(v.value0));
            });
          });
          return alt5(e)(sample1(v.value1)(v1));
        }
        ;
        if (v instanceof PureAndEvent) {
          var e = makeEvent(function(s) {
            return s(v1)(function(f) {
              return justMany(map10(f)(v.value0));
            });
          });
          return alt5(e)(sampleOnLeft1(v.value1)(v1));
        }
        ;
        if (v instanceof OnlyEvent) {
          return sampleOnLeft1(v.value0)(v1);
        }
        ;
        if (v instanceof OnlyPoll) {
          return sample1(v.value0)(v1);
        }
        ;
        if (v instanceof OnlyPure) {
          var e = makeEvent(function(s) {
            return s(v1)(function(f) {
              return justMany(map10(f)(v.value0));
            });
          });
          return e;
        }
        ;
        throw new Error("Failed pattern match at FRP.Poll (line 648, column 1 - line 659, column 54): " + [v.constructor.name, v1.constructor.name]);
      };
    }
  };
  var toPoll = function(v) {
    if (v instanceof PureAndPoll) {
      return alt1(oneOfMap2(pure4)(v.value0))(v.value1);
    }
    ;
    if (v instanceof PureAndEvent) {
      return alt1(oneOfMap2(pure4)(v.value0))(sham1(v.value1));
    }
    ;
    if (v instanceof OnlyEvent) {
      return sham1(v.value0);
    }
    ;
    if (v instanceof OnlyPure) {
      return oneOfMap2(pure4)(v.value0);
    }
    ;
    if (v instanceof OnlyPoll) {
      return v.value0;
    }
    ;
    throw new Error("Failed pattern match at FRP.Poll (line 141, column 1 - line 141, column 28): " + [v.constructor.name]);
  };
  var sample2 = function(dict) {
    return dict.sample;
  };
  var sample22 = /* @__PURE__ */ sample2(pollableEvent);
  var pollFromPoll = function(i) {
    return new OnlyPoll(i);
  };
  var sampleOnLeft4 = function(v) {
    return function(v1) {
      if (v instanceof OnlyEvent && v1 instanceof OnlyEvent) {
        return new OnlyEvent(sampleOnLeft1(v.value0)(v1.value0));
      }
      ;
      return pollFromPoll(sampleOnLeft22(toPoll(v))(toPoll(v1)));
    };
  };
  var sampleOnRight4 = function(v) {
    return function(v1) {
      if (v instanceof OnlyEvent && v1 instanceof OnlyEvent) {
        return new OnlyEvent(sampleOnRight1(v.value0)(v1.value0));
      }
      ;
      return pollFromPoll(sampleOnRight22(toPoll(v))(toPoll(v1)));
    };
  };
  var stRefToPoll2 = function(r) {
    return pollFromPoll(stRefToPoll(r));
  };
  var stToPoll2 = function(r) {
    return pollFromPoll(stToPoll(r));
  };
  var pollFromEvent = /* @__PURE__ */ function() {
    return OnlyEvent.create;
  }();
  var sham2 = pollFromEvent;
  var once4 = function(i) {
    return pollFromPoll(once12(toPoll(i)));
  };
  var keepLatest$prime = function(e) {
    return makeEvent(function(s) {
      return function __do3() {
        var cancelInner = newSTRef(pure13(unit))();
        var onPure = function(p) {
          return discard1(justNone($$void6(liftST3(write2(pure13(unit))(cancelInner)))))(function() {
            return justMany(p);
          });
        };
        var onPoll = function(p) {
          return justNone(function __do4() {
            var ep = createPure();
            var c = s(sample1(p)(ep.event))(justOne)();
            ep.push(identity7)();
            return $$void6(liftST3(write2(c)(cancelInner)))();
          });
        };
        var onEvent = function(ev) {
          return justNone(function __do4() {
            var c = s(ev)(justOne)();
            return $$void6(liftST3(write2(c)(cancelInner)))();
          });
        };
        var treatMe = function(i) {
          if (i instanceof OnlyPure) {
            return onPure(i.value0);
          }
          ;
          if (i instanceof OnlyEvent) {
            return onEvent(i.value0);
          }
          ;
          if (i instanceof OnlyPoll) {
            return onPoll(i.value0);
          }
          ;
          if (i instanceof PureAndEvent) {
            return discard1(onPure(i.value0))(function() {
              return onEvent(i.value1);
            });
          }
          ;
          if (i instanceof PureAndPoll) {
            return discard1(onPure(i.value0))(function() {
              return onPoll(i.value1);
            });
          }
          ;
          throw new Error("Failed pattern match at FRP.Poll (line 587, column 17 - line 596, column 17): " + [i.constructor.name]);
        };
        var cancelOuter = s(e)(function(i) {
          return discard1(justNone(function __do4() {
            var ci = read2(cancelInner)();
            return ci();
          }))(function() {
            return treatMe(i);
          });
        })();
        return function __do4() {
          var ci = read2(cancelInner)();
          ci();
          return cancelOuter();
        };
      };
    });
  };
  var functorAPoll2 = {
    map: function(v) {
      return function(v1) {
        if (v1 instanceof PureAndPoll) {
          return new PureAndPoll(map10(v)(v1.value0), map23(v)(v1.value1));
        }
        ;
        if (v1 instanceof PureAndEvent) {
          return new PureAndEvent(map10(v)(v1.value0), map32(v)(v1.value1));
        }
        ;
        if (v1 instanceof OnlyPure) {
          return new OnlyPure(map10(v)(v1.value0));
        }
        ;
        if (v1 instanceof OnlyEvent) {
          return new OnlyEvent(map32(v)(v1.value0));
        }
        ;
        if (v1 instanceof OnlyPoll) {
          return new OnlyPoll(map23(v)(v1.value0));
        }
        ;
        throw new Error("Failed pattern match at FRP.Poll (line 84, column 1 - line 89, column 42): " + [v.constructor.name, v1.constructor.name]);
      };
    }
  };
  var map52 = /* @__PURE__ */ map(functorAPoll2);
  var altPoll = {
    alt: function(v) {
      return function(v1) {
        if (v instanceof OnlyPure && v1 instanceof OnlyPure) {
          return new OnlyPure(append5(v.value0)(v1.value0));
        }
        ;
        if (v instanceof OnlyPure && v1 instanceof OnlyEvent) {
          return new PureAndEvent(v.value0, v1.value0);
        }
        ;
        if (v instanceof OnlyPure && v1 instanceof OnlyPoll) {
          return new PureAndPoll(v.value0, v1.value0);
        }
        ;
        if (v instanceof OnlyPure && v1 instanceof PureAndEvent) {
          return new PureAndEvent(append5(v.value0)(v1.value0), v1.value1);
        }
        ;
        if (v instanceof OnlyPure && v1 instanceof PureAndPoll) {
          return new PureAndPoll(append5(v.value0)(v1.value0), v1.value1);
        }
        ;
        if (v instanceof OnlyEvent && v1 instanceof OnlyPure) {
          return new PureAndPoll(v1.value0, sham1(v.value0));
        }
        ;
        if (v instanceof OnlyEvent && v1 instanceof OnlyEvent) {
          return new OnlyEvent(alt5(v.value0)(v1.value0));
        }
        ;
        if (v instanceof OnlyEvent && v1 instanceof OnlyPoll) {
          return new OnlyPoll(alt1(sham1(v.value0))(v1.value0));
        }
        ;
        if (v instanceof OnlyEvent && v1 instanceof PureAndEvent) {
          return new PureAndEvent(v1.value0, alt5(v.value0)(v1.value1));
        }
        ;
        if (v instanceof OnlyEvent && v1 instanceof PureAndPoll) {
          return new PureAndPoll(v1.value0, alt1(sham1(v.value0))(v1.value1));
        }
        ;
        if (v instanceof OnlyPoll && v1 instanceof OnlyPure) {
          return new PureAndPoll(v1.value0, v.value0);
        }
        ;
        if (v instanceof OnlyPoll && v1 instanceof OnlyEvent) {
          return new OnlyPoll(alt1(v.value0)(sham1(v1.value0)));
        }
        ;
        if (v instanceof OnlyPoll && v1 instanceof OnlyPoll) {
          return new OnlyPoll(alt1(v.value0)(v1.value0));
        }
        ;
        if (v instanceof OnlyPoll && v1 instanceof PureAndEvent) {
          return new PureAndPoll(v1.value0, alt1(v.value0)(sham1(v1.value1)));
        }
        ;
        if (v instanceof OnlyPoll && v1 instanceof PureAndPoll) {
          return new PureAndPoll(v1.value0, alt1(v.value0)(v1.value1));
        }
        ;
        if (v instanceof PureAndEvent && v1 instanceof OnlyPure) {
          return new PureAndEvent(append5(v.value0)(v1.value0), v.value1);
        }
        ;
        if (v instanceof PureAndEvent && v1 instanceof OnlyEvent) {
          return new PureAndEvent(v.value0, alt5(v.value1)(v1.value0));
        }
        ;
        if (v instanceof PureAndEvent && v1 instanceof OnlyPoll) {
          return new PureAndPoll(v.value0, alt1(sham1(v.value1))(v1.value0));
        }
        ;
        if (v instanceof PureAndEvent && v1 instanceof PureAndEvent) {
          return new PureAndEvent(append5(v.value0)(v1.value0), alt5(v.value1)(v1.value1));
        }
        ;
        if (v instanceof PureAndEvent && v1 instanceof PureAndPoll) {
          return new PureAndPoll(append5(v.value0)(v1.value0), alt1(sham1(v.value1))(v1.value1));
        }
        ;
        if (v instanceof PureAndPoll && v1 instanceof OnlyPure) {
          return new PureAndPoll(append5(v.value0)(v1.value0), v.value1);
        }
        ;
        if (v instanceof PureAndPoll && v1 instanceof OnlyEvent) {
          return new PureAndPoll(v.value0, alt1(v.value1)(sham1(v1.value0)));
        }
        ;
        if (v instanceof PureAndPoll && v1 instanceof OnlyPoll) {
          return new PureAndPoll(v.value0, alt1(v.value1)(v1.value0));
        }
        ;
        if (v instanceof PureAndPoll && v1 instanceof PureAndEvent) {
          return new PureAndPoll(append5(v.value0)(v1.value0), alt1(v.value1)(sham1(v1.value1)));
        }
        ;
        if (v instanceof PureAndPoll && v1 instanceof PureAndPoll) {
          return new PureAndPoll(append5(v.value0)(v1.value0), alt1(v.value1)(v1.value1));
        }
        ;
        throw new Error("Failed pattern match at FRP.Poll (line 159, column 1 - line 188, column 75): " + [v.constructor.name, v1.constructor.name]);
      };
    },
    Functor0: function() {
      return functorAPoll2;
    }
  };
  var plusPoll = /* @__PURE__ */ function() {
    return {
      empty: new OnlyPure([]),
      Alt0: function() {
        return altPoll;
      }
    };
  }();
  var empty1 = /* @__PURE__ */ empty(plusPoll);
  var rant2 = function($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
      if (v instanceof PureAndPoll) {
        $copy_v = new OnlyPoll(v.value1);
        return;
      }
      ;
      if (v instanceof PureAndEvent) {
        $copy_v = new OnlyEvent(v.value1);
        return;
      }
      ;
      if (v instanceof OnlyEvent) {
        $tco_done = true;
        return function __do3() {
          var v1 = memoize(v.value0)();
          return {
            poll: new OnlyEvent(v1.event),
            unsubscribe: v1.unsubscribe
          };
        };
      }
      ;
      if (v instanceof OnlyPoll) {
        $tco_done = true;
        return function __do3() {
          var v1 = rant(v.value0)();
          return {
            poll: new OnlyPoll(v1.poll),
            unsubscribe: v1.unsubscribe
          };
        };
      }
      ;
      if (v instanceof OnlyPure) {
        $tco_done = true;
        return pure13({
          poll: empty1,
          unsubscribe: pure13(unit)
        });
      }
      ;
      throw new Error("Failed pattern match at FRP.Poll (line 535, column 1 - line 538, column 65): " + [v.constructor.name]);
    }
    ;
    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }
    ;
    return $tco_result;
  };
  var foldlArr = function(bc) {
    return function(arf) {
      return function(bb) {
        return function(arr) {
          var go2 = function($copy_i) {
            return function($copy_b) {
              var $tco_var_i = $copy_i;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(i, b) {
                if (i === length(arr)) {
                  $tco_done = true;
                  return bc(b);
                }
                ;
                if (otherwise) {
                  var v = arf(b)(unsafeIndex2(arr)(i))((i + 1 | 0) === length(arr))(function(v1) {
                    return drop(i + 1 | 0)(arr);
                  });
                  if (v instanceof Left) {
                    $tco_var_i = i + 1 | 0;
                    $copy_b = v.value0;
                    return;
                  }
                  ;
                  if (v instanceof Right) {
                    $tco_done = true;
                    return v.value0;
                  }
                  ;
                  throw new Error("Failed pattern match at FRP.Poll (line 613, column 19 - line 615, column 21): " + [v.constructor.name]);
                }
                ;
                throw new Error("Failed pattern match at FRP.Poll (line 611, column 3 - line 615, column 21): " + [i.constructor.name, b.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_i, $copy_b);
              }
              ;
              return $tco_result;
            };
          };
          return go2(0)(bb);
        };
      };
    };
  };
  var $lazy_replayPollsForKeepLatest = /* @__PURE__ */ $runtime_lazy7("replayPollsForKeepLatest", "FRP.Poll", function() {
    var cnt = function(isLast) {
      return function(pl) {
        return function(x) {
          return poll(function(e) {
            return makeEvent(function(sub2) {
              return function __do3() {
                var dfl = function() {
                  if (isLast) {
                    return pure13;
                  }
                  ;
                  return deflect;
                }()(pl)();
                return sub2(alt5(sample1(dfl)(e))(sample22($lazy_replayPollsForKeepLatest(632)(x(unit)))(e)))(justOne)();
              };
            });
          });
        };
      };
    };
    return foldlArr(OnlyPure.create)(function(b) {
      return function(a2) {
        return function(isLast) {
          return function(x) {
            if (a2 instanceof OnlyPure) {
              return new Left(append5(b)(a2.value0));
            }
            ;
            if (a2 instanceof OnlyEvent) {
              return new Left(b);
            }
            ;
            if (a2 instanceof PureAndEvent) {
              return new Left(append5(b)(a2.value0));
            }
            ;
            if (a2 instanceof OnlyPoll) {
              return new Right(new PureAndPoll(b, cnt(isLast)(a2.value0)(x)));
            }
            ;
            if (a2 instanceof PureAndPoll) {
              return new Right(new PureAndPoll(append5(b)(a2.value0), cnt(isLast)(a2.value1)(x)));
            }
            ;
            throw new Error("Failed pattern match at FRP.Poll (line 619, column 22 - line 626, column 75): " + [a2.constructor.name]);
          };
        };
      };
    })([]);
  });
  var replayPollsForKeepLatest = /* @__PURE__ */ $lazy_replayPollsForKeepLatest(617);
  var keepLatest4 = function(v) {
    if (v instanceof OnlyPure) {
      return replayPollsForKeepLatest(v.value0);
    }
    ;
    if (v instanceof OnlyEvent) {
      return new OnlyEvent(keepLatest$prime(v.value0));
    }
    ;
    if (v instanceof OnlyPoll) {
      return new OnlyPoll(poll(function(e) {
        return map32(uncurry(apply))(keepLatest$prime(sampleBy1(function(pl) {
          return function(ff2) {
            return map52(Tuple.create(ff2))(pl);
          };
        })(v.value0)(e)));
      }));
    }
    ;
    if (v instanceof PureAndEvent) {
      return replayPollsForKeepLatest(append5(v.value0)([new OnlyEvent(keepLatest$prime(v.value1))]));
    }
    ;
    if (v instanceof PureAndPoll) {
      return replayPollsForKeepLatest(append5(v.value0)([keepLatest4(new OnlyPoll(v.value1))]));
    }
    ;
    throw new Error("Failed pattern match at FRP.Poll (line 634, column 1 - line 637, column 12): " + [v.constructor.name]);
  };
  var filterMap4 = function(v) {
    return function(v1) {
      if (v1 instanceof PureAndPoll) {
        return new PureAndPoll(filterMap1(v)(v1.value0), filterMap22(v)(v1.value1));
      }
      ;
      if (v1 instanceof PureAndEvent) {
        return new PureAndEvent(filterMap1(v)(v1.value0), filterMap3(v)(v1.value1));
      }
      ;
      if (v1 instanceof OnlyPure) {
        return new OnlyPure(filterMap1(v)(v1.value0));
      }
      ;
      if (v1 instanceof OnlyEvent) {
        return new OnlyEvent(filterMap3(v)(v1.value0));
      }
      ;
      if (v1 instanceof OnlyPoll) {
        return new OnlyPoll(filterMap22(v)(v1.value0));
      }
      ;
      throw new Error("Failed pattern match at FRP.Poll (line 428, column 1 - line 432, column 12): " + [v.constructor.name, v1.constructor.name]);
    };
  };
  var partitionMap2 = function(f) {
    return function(b) {
      var fb = map52(f)(b);
      return {
        left: filterMap4(either(Just.create)($$const(Nothing.value)))(fb),
        right: filterMap4(either($$const(Nothing.value))(Just.create))(fb)
      };
    };
  };
  var compactablePoll = {
    compact: /* @__PURE__ */ filterMap4(identity7),
    separate: /* @__PURE__ */ partitionMap2(identity7)
  };
  var filterablePoll = {
    filterMap: filterMap4,
    filter: function($449) {
      return filterMap4(maybeBool($449));
    },
    partitionMap: partitionMap2,
    partition: function(p) {
      return function(xs) {
        var o = partitionMap2(eitherBool(p))(xs);
        return {
          no: o.left,
          yes: o.right
        };
      };
    },
    Compactable0: function() {
      return compactablePoll;
    },
    Functor1: function() {
      return functorAPoll2;
    }
  };
  var eventOrBust = function(v) {
    if (v instanceof OnlyEvent) {
      return v.value0;
    }
    ;
    return empty8;
  };
  var fix4 = function(f) {
    var o = f(empty1);
    if (o instanceof OnlyEvent) {
      return pollFromEvent(fix1(dimap2(pollFromEvent)(eventOrBust)(f)));
    }
    ;
    return pollFromPoll(fix22(dimap2(pollFromPoll)(toPoll)(f)));
  };
  var isEventPoll = {
    sampleOnRight: sampleOnRight4,
    sampleOnLeft: sampleOnLeft4,
    keepLatest: keepLatest4,
    fix: fix4,
    once: once4,
    Plus0: function() {
      return plusPoll;
    },
    Alt1: function() {
      return altPoll;
    },
    Filterable2: function() {
      return filterablePoll;
    }
  };
  var create4 = function __do() {
    var v = create();
    var v1 = rant2(sham2(v.event))();
    return {
      poll: v1.poll,
      push: v.push
    };
  };
  var applyAPoll2 = {
    apply: function(v) {
      return function(v1) {
        if (v instanceof OnlyEvent && v1 instanceof OnlyEvent) {
          return new OnlyEvent(apply5(v.value0)(v1.value0));
        }
        ;
        return pollFromPoll(apply1(toPoll(v))(toPoll(v1)));
      };
    },
    Functor0: function() {
      return functorAPoll2;
    }
  };
  var applicativeAPoll2 = {
    pure: function(a2) {
      return new OnlyPure([a2]);
    },
    Apply0: function() {
      return applyAPoll2;
    }
  };

  // output/Deku.Internal.Region/index.js
  var $$void7 = /* @__PURE__ */ $$void(functorST);
  var bind3 = /* @__PURE__ */ bind(bindST);
  var map11 = /* @__PURE__ */ map(functorST);
  var join3 = /* @__PURE__ */ join(bindST);
  var bindFlipped3 = /* @__PURE__ */ bindFlipped(bindST);
  var pure5 = /* @__PURE__ */ pure(applicativeST);
  var empty9 = /* @__PURE__ */ empty(plusPoll);
  var eq3 = /* @__PURE__ */ eq(eqInt);
  var apply6 = /* @__PURE__ */ apply2(applyST);
  var notEq2 = /* @__PURE__ */ notEq(eqInt);
  var unsafeIndex3 = /* @__PURE__ */ unsafeIndex();
  var when2 = /* @__PURE__ */ when(applicativeST);
  var clamp2 = /* @__PURE__ */ clamp(ordInt);
  var add2 = /* @__PURE__ */ add(semiringInt);
  var alt6 = /* @__PURE__ */ alt(altPoll);
  var map13 = /* @__PURE__ */ map(functorAPoll2);
  var not4 = /* @__PURE__ */ not(heytingAlgebraBoolean);
  var whenM2 = /* @__PURE__ */ whenM(monadST);
  var min5 = /* @__PURE__ */ min(ordInt);
  var traverse_2 = /* @__PURE__ */ traverse_(applicativeST)(foldableMaybe);
  var ParentStart = /* @__PURE__ */ function() {
    function ParentStart2(value0) {
      this.value0 = value0;
    }
    ;
    ParentStart2.create = function(value0) {
      return new ParentStart2(value0);
    };
    return ParentStart2;
  }();
  var Element2 = /* @__PURE__ */ function() {
    function Element3(value0) {
      this.value0 = value0;
    }
    ;
    Element3.create = function(value0) {
      return new Element3(value0);
    };
    return Element3;
  }();
  var Text = /* @__PURE__ */ function() {
    function Text2(value0) {
      this.value0 = value0;
    }
    ;
    Text2.create = function(value0) {
      return new Text2(value0);
    };
    return Text2;
  }();
  var StaticRegion = function(x) {
    return x;
  };
  var updateShared = function(shared) {
    return function(v, region) {
      return $$void7(write2(shared)(region.end))();
    };
  };
  var updateIx = function(i, v) {
    return v.pushIx(i);
  };
  var readSharedBound = function(shared) {
    var v = read2(shared)();
    return v.bound();
  };
  var newSpan = function(parent2, parentBump) {
    var children2 = newSTArray();
    var parentBound = function __do3() {
      var owner = newSTRef(pure5(0))();
      var extent = newSTRef(pure5(0))();
      var pushAnchor = function(v) {
        return unit;
      };
      return newSTRef({
        owner,
        extent,
        bound: parent2,
        pushAnchor
      })();
    }();
    var parentRegion = {
      ix: pure5(0),
      pushIx: function(v) {
        return unit;
      },
      position: empty9,
      end: parentBound
    };
    $$void7(push(parentRegion)(children2))();
    return {
      children: children2,
      bump: parentBump
    };
  };
  var isLastBound = function(region, children2) {
    var length8 = length2(children2)();
    var end = read2(region.end)();
    var owner = join3(read2(end.owner))();
    var pos = region.ix();
    var extent = join3(read2(end.extent))();
    return owner === pos && extent === (length8 - 1 | 0);
  };
  var isEmpty2 = function(v) {
    var v1 = read2(v.end)();
    return apply6(map11(notEq2)(join3(read2(v1.owner))))(v.ix)();
  };
  var index5 = function(ix, arr) {
    return map11(flip(unsafeIndex3)(ix))(unsafeFreeze(arr))();
  };
  var lastRegion = function(children2) {
    var length8 = length2(children2)();
    return index5(length8 - 1 | 0, children2);
  };
  var updateParent = function(wasLast, managed, v) {
    var nowLast = isLastBound(managed, v.children);
    return when2(wasLast !== nowLast)(function __do3() {
      var last3 = lastRegion(v.children);
      var end = read2(last3.end)();
      var ownerIx = join3(read2(end.owner))();
      var $66 = ownerIx === 0;
      if ($66) {
        return v.bump(Nothing.value);
      }
      ;
      var anchor = end.bound();
      return v.bump(new Just(anchor));
    })();
  };
  var shareBound = function(posRef, children2) {
    var pos = posRef();
    var prev = index5(pos - 1 | 0, children2);
    var endFromPrev = read2(prev.end)();
    var currentExtent = join3(read2(endFromPrev.extent))();
    when2(currentExtent < pos)($$void7(write2(posRef)(endFromPrev.extent)))();
    return endFromPrev;
  };
  var fixManagedTo = function(from2, to, fn, children2) {
    var elems = unsafeFreeze(children2)();
    return forST(from2)(to)(function(ix) {
      return function() {
        return fn(ix, unsafeIndex3(elems)(ix));
      };
    })();
  };
  var fixManaged = function(from2, fn, children2) {
    var length8 = length2(children2)();
    return fixManagedTo(from2, length8, fn, children2);
  };
  var insertManaged = function(givenPos, children2) {
    var length8 = length2(children2)();
    var pos = clamp2(1)(length8)(maybe(length8)(add2(1))(givenPos));
    var ixRef = newSTRef(pos)();
    var posEvent = createPure();
    var pushIx = function(i) {
      $$void7(write2(i)(ixRef))();
      return posEvent.push(i - 1 | 0)();
    };
    var position2 = alt6(map13(add2(-1 | 0))(stRefToPoll2(ixRef)))(pollFromEvent(posEvent.event));
    var ix = read2(ixRef);
    var prevBegin = shareBound(ix, children2);
    var end = newSTRef(prevBegin)();
    var managed = {
      ix,
      pushIx,
      position: position2,
      end
    };
    $$void7(splice(pos)(0)([managed])(children2))();
    fixManaged(pos + 1 | 0, updateIx, children2);
    return managed;
  };
  var clearBound = function(cleared, children2) {
    var nextBound = read2(cleared.end)();
    var selfIx = cleared.ix();
    var prevBound = bindFlipped3(function($95) {
      return read2(function(v) {
        return v.end;
      }($95));
    })(function() {
      return index5(selfIx - 1 | 0, children2);
    })();
    var extentToEff = read2(nextBound.extent)();
    var extentToIx = extentToEff();
    var ownerEff = read2(prevBound.owner)();
    var ownerIx = ownerEff();
    var $69 = (selfIx - ownerIx | 0) > (extentToIx - selfIx | 0) || ownerIx === 0;
    if ($69) {
      $$void7(write2(extentToEff)(prevBound.extent))();
      return fixManagedTo(selfIx, extentToIx + 1 | 0, updateShared(prevBound), children2);
    }
    ;
    var anchor = prevBound.bound();
    nextBound.pushAnchor(anchor);
    $$void7(write2(ownerEff)(nextBound.owner))();
    return fixManagedTo(ownerIx, selfIx + 1 | 0, updateShared(nextBound), children2);
  };
  var bumpBound = function(anchor, bumped, children2) {
    var empty12 = isEmpty2(bumped);
    var $70 = !empty12;
    if ($70) {
      var ownedBound = read2(bumped.end)();
      return ownedBound.pushAnchor(anchor);
    }
    ;
    var prevExtent = read2(bumped.end)();
    var ownerEff = read2(prevExtent.owner)();
    var ownerIx = ownerEff();
    var extentToEff = read2(prevExtent.extent)();
    var extentToIx = extentToEff();
    var selfIx = bumped.ix();
    var previousRegion = index5(selfIx - 1 | 0, children2);
    var $71 = (selfIx - ownerIx | 0) > (extentToIx - selfIx | 0) || ownerIx === 0;
    if ($71) {
      var newShared = function __do3() {
        var owner = newSTRef(bumped.ix)();
        var extent = newSTRef(extentToEff)();
        var ref = newSTRef(anchor)();
        var pushAnchor = function(a2) {
          return $$void7(write2(a2)(ref))();
        };
        var bound = read2(ref);
        return {
          owner,
          extent,
          bound,
          pushAnchor
        };
      }();
      fixManagedTo(selfIx, extentToIx + 1 | 0, updateShared(newShared), children2);
      return $$void7(write2(previousRegion.ix)(prevExtent.extent))();
    }
    ;
    var newShared = function __do3() {
      var owner = newSTRef(ownerEff)();
      var extent = newSTRef(previousRegion.ix)();
      var ref = bindFlipped3(newSTRef)(prevExtent.bound)();
      var pushAnchor = function(a2) {
        return $$void7(write2(a2)(ref))();
      };
      var bound = read2(ref);
      return {
        owner,
        extent,
        bound,
        pushAnchor
      };
    }();
    fixManagedTo(ownerIx, selfIx, updateShared(newShared), children2);
    $$void7(write2(bumped.ix)(prevExtent.owner))();
    return prevExtent.pushAnchor(anchor);
  };
  var beginBound = function(region, children2) {
    var ix = region.ix();
    var prev = index5(ix - 1 | 0, children2);
    var sbound = read2(prev.end)();
    return sbound.bound();
  };
  var allocateRegion = function(givenPos, v) {
    var v1 = insertManaged(givenPos, v.children);
    var sendTo = function(pos$prime) {
      var pos = pos$prime + 1 | 0;
      var lastAnchor = newSTRef(Nothing.value)();
      var wasLast = isLastBound(v1, v.children);
      var lastIx = v1.ix();
      whenM2(map11(not4)(function() {
        return isEmpty2(v1);
      }))(function __do3() {
        var anchor = bindFlipped3(function(v2) {
          return v2.bound;
        })(read2(v1.end))();
        $$void7(write2(new Just(anchor))(lastAnchor))();
        return clearBound(v1, v.children);
      })();
      (function __do3() {
        var sharedBound = read2(v1.end)();
        return whenM2(map11(eq3(lastIx))(join3(read2(sharedBound.extent))))(function __do4() {
          var previousRegion = index5(lastIx - 1 | 0, v.children);
          return $$void7(write2(previousRegion.ix)(sharedBound.extent))();
        })();
      })();
      (function __do3() {
        var removed = splice(lastIx)(1)([])(v.children)();
        $$void7(splice(pos)(0)(removed)(v.children))();
        fixManaged(min5(lastIx)(pos), updateIx, v.children);
        var newBegin = shareBound(v1.ix, v.children);
        return $$void7(write2(newBegin)(v1.end))();
      })();
      bind3(read2(lastAnchor))(traverse_2(function(anchor) {
        return function() {
          return bumpBound(anchor, v1, v.children);
        };
      }))();
      return updateParent(wasLast, v1, v);
    };
    var end = function() {
      return readSharedBound(v1.end);
    };
    var bump = function(v2) {
      if (v2 instanceof Nothing) {
        var wasLast = isLastBound(v1, v.children);
        clearBound(v1, v.children);
        return updateParent(wasLast, v1, v);
      }
      ;
      if (v2 instanceof Just) {
        bumpBound(v2.value0, v1, v.children);
        return whenM2(function() {
          return isLastBound(v1, v.children);
        })(function() {
          return v.bump(v2);
        })();
      }
      ;
      throw new Error("Failed pattern match at Deku.Internal.Region (line 198, column 22 - line 207, column 34): " + [v2.constructor.name]);
    };
    var remove2 = function __do3() {
      bump(Nothing.value);
      var finalIx = v1.ix();
      v1.pushIx(-1 | 0);
      $$void7(splice(finalIx)(1)([])(v.children))();
      return fixManaged(finalIx, updateIx, v.children);
    };
    var begin = function() {
      return beginBound(v1, v.children);
    };
    return {
      begin,
      end,
      position: v1.position,
      sendTo,
      remove: remove2,
      bump
    };
  };
  var newStaticRegion = function(parentBound, parentBump) {
    var spanCounter = newSTRef(-1 | 0)();
    var spanState = newSTRef(Nothing.value)();
    var staticEnd = newSTRef(Nothing.value)();
    var spanEnd = newSTRef(Nothing.value)();
    var findOrCreateSpan = function __do3() {
      var v = read2(spanState)();
      if (v instanceof Nothing) {
        var spanIx = modify(add2(1))(spanCounter)();
        var staticBegin = read2(staticEnd)();
        var bump = function(update2) {
          return whenM2(map11(eq3(spanIx))(read2(spanCounter)))(function __do4() {
            $$void7(write2(update2)(spanEnd))();
            if (update2 instanceof Nothing) {
              return bindFlipped3(runSTFn1(parentBump))(read2(staticEnd))();
            }
            ;
            return parentBump(update2);
          })();
        };
        var begin = function() {
          if (staticBegin instanceof Just) {
            return pure5(staticBegin.value0);
          }
          ;
          if (staticBegin instanceof Nothing) {
            return parentBound;
          }
          ;
          throw new Error("Failed pattern match at Deku.Internal.Region (line 510, column 13 - line 512, column 37): " + [staticBegin.constructor.name]);
        }();
        var span4 = newSpan(begin, bump);
        $$void7(write2(new Just(span4))(spanState))();
        return span4;
      }
      ;
      if (v instanceof Just) {
        return v.value0;
      }
      ;
      throw new Error("Failed pattern match at Deku.Internal.Region (line 503, column 46 - line 531, column 18): " + [v.constructor.name]);
    };
    return {
      end: function __do3() {
        var fromSpan = read2(spanEnd)();
        if (fromSpan instanceof Just) {
          return fromSpan.value0;
        }
        ;
        if (fromSpan instanceof Nothing) {
          var fromStatic = read2(staticEnd)();
          if (fromStatic instanceof Just) {
            return fromStatic.value0;
          }
          ;
          if (fromStatic instanceof Nothing) {
            return parentBound();
          }
          ;
          throw new Error("Failed pattern match at Deku.Internal.Region (line 542, column 13 - line 547, column 28): " + [fromStatic.constructor.name]);
        }
        ;
        throw new Error("Failed pattern match at Deku.Internal.Region (line 536, column 9 - line 547, column 28): " + [fromSpan.constructor.name]);
      },
      region: function __do3() {
        var span4 = findOrCreateSpan();
        return allocateRegion(Nothing.value, span4);
      },
      element: function(anchor) {
        whenM2(map11(isJust)(read2(spanState)))(function __do3() {
          $$void7(write2(Nothing.value)(spanState))();
          $$void7(write2(Nothing.value)(spanEnd))();
          return $$void7(modify(add2(1))(spanCounter))();
        })();
        $$void7(write2(new Just(anchor))(staticEnd))();
        return parentBump(new Just(anchor));
      }
    };
  };
  var fromParent = function(parent2) {
    return newStaticRegion(pure5(new ParentStart(parent2)), function(v) {
      return unit;
    });
  };

  // output/Deku.Core/index.js
  var liftST4 = /* @__PURE__ */ liftST(monadSTEffect);
  var alt7 = /* @__PURE__ */ alt(altPoll);
  var map14 = /* @__PURE__ */ map(functorFn);
  var $$void8 = /* @__PURE__ */ $$void(functorEffect);
  var sample3 = /* @__PURE__ */ sample(/* @__PURE__ */ pollable(eventIsEvent));
  var identity8 = /* @__PURE__ */ identity(categoryFn);
  var void12 = /* @__PURE__ */ $$void(functorST);
  var unsafeIndex4 = /* @__PURE__ */ unsafeIndex();
  var once5 = /* @__PURE__ */ once(isEventPoll);
  var un2 = /* @__PURE__ */ un();
  var when3 = /* @__PURE__ */ when(applicativeEffect);
  var add3 = /* @__PURE__ */ add(semiringInt);
  var map15 = /* @__PURE__ */ map(functorEffect);
  var map33 = /* @__PURE__ */ map(functorMaybe);
  var sample12 = /* @__PURE__ */ sample2(pollableEvent);
  var PSR = function(x) {
    return x;
  };
  var Namespace = function(x) {
    return x;
  };
  var Cb = function(x) {
    return x;
  };
  var DOMInterpret = function(x) {
    return x;
  };
  var Attribute = function(x) {
    return x;
  };
  var useState$prime = function(f) {
    return function(psr, di) {
      var v = liftST4(create4)();
      var v1 = f(new Tuple(v.push, v.poll));
      return v1(psr, di);
    };
  };
  var unsafeAttribute = Attribute;
  var pump$prime = function(v) {
    return function(p) {
      return function(effF) {
        var staticEff = effF(true);
        var handlePoll = function(whichF) {
          return function(y) {
            return function __do3() {
              var uu = subscribeO(y, function(i) {
                var f = liftST4(read2(whichF))();
                return f(i);
              });
              return $$void8(liftST4(function() {
                return v.addEffectToDisposalQueue(uu);
              }))();
            };
          };
        };
        var dynamicEff = effF(false);
        var handleEvent = function(y) {
          return function __do3() {
            var uu = subscribeO(y, dynamicEff);
            return $$void8(liftST4(function() {
              return v.addEffectToDisposalQueue(uu);
            }))();
          };
        };
        var go2 = function(v1) {
          if (v1 instanceof OnlyEvent) {
            return handleEvent(v1.value0);
          }
          ;
          if (v1 instanceof OnlyPure) {
            return function() {
              return fastForeachE(v1.value0, staticEff);
            };
          }
          ;
          if (v1 instanceof OnlyPoll) {
            return function __do3() {
              var bang = liftST4(create)();
              var f = liftST4(newSTRef(staticEff))();
              handlePoll(f)(sample3(v1.value0)(bang.event))();
              bang.push(identity8)();
              return liftST4(void12(write2(dynamicEff)(f)))();
            };
          }
          ;
          if (v1 instanceof PureAndEvent) {
            return function __do3() {
              go2(new OnlyPure(v1.value0))();
              return go2(new OnlyEvent(v1.value1))();
            };
          }
          ;
          if (v1 instanceof PureAndPoll) {
            return function __do3() {
              go2(new OnlyPure(v1.value0))();
              return go2(new OnlyPoll(v1.value1))();
            };
          }
          ;
          throw new Error("Failed pattern match at Deku.Core (line 320, column 8 - line 336, column 22): " + [v1.constructor.name]);
        };
        return go2(p);
      };
    };
  };
  var pump = function(psr) {
    return function(poll2) {
      return function(fn) {
        return pump$prime(psr)(poll2)($$const(fn));
      };
    };
  };
  var prop$prime = function(k) {
    return function(v) {
      return function(v1, e, v2) {
        return v2.setProp(k, v, toDekuElement(e));
      };
    };
  };
  var newPSR = function(ancestry, signalDisposalQueueShouldBeTriggered, region) {
    var unsubs = newSTArray();
    var triggerDisposalQueueEffects = function __do3() {
      var stack = liftST4(unsafeFreeze(unsubs))();
      var l = length(stack);
      return forE(0)(l)(function(i) {
        return unsafeIndex4(stack)((l - 1 | 0) - i | 0);
      })();
    };
    var addEffectToDisposalQueue = function(eff) {
      return void12(push(eff)(unsubs))();
    };
    return {
      signalDisposalQueueShouldBeTriggered: once5(signalDisposalQueueShouldBeTriggered),
      ancestry,
      region,
      addEffectToDisposalQueue,
      triggerDisposalQueueEffects
    };
  };
  var handleScope = function(psr) {
    return pump(psr)(un2(PSR)(psr).signalDisposalQueueShouldBeTriggered)(function(v) {
      return un2(PSR)(psr).triggerDisposalQueueEffects();
    })();
  };
  var text5 = function(texts) {
    return function(psr, di) {
      var ancestry = un2(PSR)(psr).ancestry;
      var txt = function() {
        if (texts instanceof OnlyPure) {
          return un2(DOMInterpret)(di).makeText(ancestry, last(texts.value0));
        }
        ;
        if (texts instanceof OnlyEvent) {
          return un2(DOMInterpret)(di).makeText(ancestry, Nothing.value);
        }
        ;
        if (texts instanceof OnlyPoll) {
          return un2(DOMInterpret)(di).makeText(ancestry, Nothing.value);
        }
        ;
        if (texts instanceof PureAndEvent) {
          return un2(DOMInterpret)(di).makeText(ancestry, last(texts.value0));
        }
        ;
        if (texts instanceof PureAndPoll) {
          return un2(DOMInterpret)(di).makeText(ancestry, last(texts.value0));
        }
        ;
        throw new Error("Failed pattern match at Deku.Core (line 833, column 10 - line 857, column 24): " + [texts.constructor.name]);
      }();
      liftST4(function() {
        return un2(DOMInterpret)(di).initializeTextRendering(un2(PSR)(psr).ancestry, txt);
      })();
      var modifiedPoll = function() {
        if (texts instanceof OnlyPure) {
          return new OnlyPure([]);
        }
        ;
        if (texts instanceof OnlyEvent) {
          return new OnlyEvent(texts.value0);
        }
        ;
        if (texts instanceof OnlyPoll) {
          return new OnlyPoll(texts.value0);
        }
        ;
        if (texts instanceof PureAndEvent) {
          return new OnlyEvent(texts.value1);
        }
        ;
        if (texts instanceof PureAndPoll) {
          return new OnlyPoll(texts.value1);
        }
        ;
        throw new Error("Failed pattern match at Deku.Core (line 864, column 20 - line 873, column 36): " + [texts.constructor.name]);
      }();
      (function() {
        if (texts instanceof OnlyPure) {
          return unit;
        }
        ;
        return liftST4(function() {
          return un2(DOMInterpret)(di).markTextAsImpure(ancestry);
        })();
      })();
      var handleTextUpdate = function(useOriginalDi) {
        return function(x) {
          var di2 = function() {
            if (useOriginalDi) {
              return di;
            }
            ;
            return un2(DOMInterpret)(di).dynamicDOMInterpret(unit);
          }();
          return un2(DOMInterpret)(di2).setText(x, txt);
        };
      };
      pump$prime(psr)(modifiedPoll)(handleTextUpdate)();
      var regionEnd = liftST4(un2(StaticRegion)(un2(PSR)(psr).region).end)();
      un2(DOMInterpret)(di).attachText(txt, regionEnd);
      liftST4(function() {
        return un2(StaticRegion)(un2(PSR)(psr).region).element(new Text(txt));
      })();
      var handleRemove = when3(!hasElementParent(un2(PSR)(psr).ancestry))(function() {
        return un2(DOMInterpret)(di).removeText(txt);
      });
      liftST4(function() {
        return un2(PSR)(psr).addEffectToDisposalQueue(handleRemove);
      })();
      return handleScope(psr);
    };
  };
  var elementify = function(ns) {
    return function(tag) {
      return function(arrAtts) {
        return function(nuts) {
          return function(psr, di) {
            var isBoring = un2(DOMInterpret)(di).isBoring(un2(PSR)(psr).ancestry);
            return when3(!isBoring)(function __do3() {
              var elt = un2(DOMInterpret)(di).makeElement(un2(PSR)(psr).ancestry, map33(Namespace)(ns), tag);
              var regionEnd = liftST4(un2(StaticRegion)(un2(PSR)(psr).region).end)();
              liftST4(function() {
                return un2(StaticRegion)(un2(PSR)(psr).region).element(new Element2(elt));
              })();
              liftST4(function() {
                return un2(DOMInterpret)(di).initializeElementRendering(un2(PSR)(psr).ancestry, elt);
              })();
              var handleAtts = function(atts) {
                (function() {
                  if (atts instanceof OnlyPure) {
                    return unit;
                  }
                  ;
                  return liftST4(function() {
                    return un2(DOMInterpret)(di).markElementAsImpure(un2(PSR)(psr).ancestry);
                  })();
                })();
                return pump$prime(psr)(atts)(function(useOriginalDi) {
                  var newDi = function() {
                    if (useOriginalDi) {
                      return di;
                    }
                    ;
                    return un2(DOMInterpret)(di).dynamicDOMInterpret(unit);
                  }();
                  return function(v) {
                    return v(un2(PSR)(psr).ancestry, fromDekuElement(elt), newDi);
                  };
                })();
              };
              fastForeachE(arrAtts, handleAtts);
              var eltRegion = liftST4(function() {
                return fromParent(elt);
              })();
              var aref = liftST4(newSTRef(-1 | 0))();
              var handleNuts = function(v) {
                var a2 = liftST4(modify(add3(1))(aref))();
                var scope2 = liftST4(function() {
                  return newPSR(element(a2)(un2(PSR)(psr).ancestry), un2(PSR)(psr).signalDisposalQueueShouldBeTriggered, eltRegion);
                })();
                return v(scope2, di);
              };
              fastForeachE(nuts, handleNuts);
              var handleRemove = when3(!hasElementParent(un2(PSR)(psr).ancestry))(function() {
                return un2(DOMInterpret)(di).removeElement(elt);
              });
              un2(DOMInterpret)(di).attachElement(elt, regionEnd);
              liftST4(function() {
                return un2(PSR)(psr).addEffectToDisposalQueue(handleRemove);
              })();
              return handleScope(psr);
            })();
          };
        };
      };
    };
  };
  var deferO = function(psr, eff) {
    return liftST4(function() {
      return un2(PSR)(psr).addEffectToDisposalQueue(eff);
    })();
  };
  var useRefST = function(a2) {
    return function(e) {
      return function(f) {
        return function(psr, di) {
          var r = liftST4(newSTRef(a2))();
          var v = liftST4(create)();
          var u = subscribe(sample12(e)(v.event))(function(i) {
            return $$void8(liftST4(write2(i)(r)));
          })();
          v.push(identity8)();
          var v1 = f(read2(r));
          deferO(psr, u);
          return v1(psr, di);
        };
      };
    };
  };
  var useHot = function(a2) {
    return function(f) {
      return bind2(useState$prime)(function(v) {
        return bind2(useRefST(a2)(v.value1))(function(r) {
          return f(new Tuple(v.value0, alt7(stToPoll2(r))(v.value1)));
        });
      });
    };
  };
  var useRef = function(a2) {
    return function(b) {
      return function(f) {
        return bind2(useRefST(a2)(b))(function(r) {
          return f(liftST4(r));
        });
      };
    };
  };
  var cb$prime = function(k) {
    return function(v) {
      return function(id3, e, v1) {
        liftST4(function() {
          return v1.markElementAsImpure(id3);
        })();
        return v1.setCb(k, v, toDekuElement(e));
      };
    };
  };
  var cb = /* @__PURE__ */ function() {
    var $236 = map14(map15($$const(true)));
    return function($237) {
      return Cb($236($237));
    };
  }();

  // output/Deku.DOM/index.js
  var label4 = /* @__PURE__ */ function() {
    return elementify(Nothing.value)("label");
  }();
  var input = /* @__PURE__ */ function() {
    return elementify(Nothing.value)("input");
  }();
  var div2 = /* @__PURE__ */ function() {
    return elementify(Nothing.value)("div");
  }();
  var div_ = /* @__PURE__ */ div2([]);
  var canvas = /* @__PURE__ */ function() {
    return elementify(Nothing.value)("canvas");
  }();
  var button = /* @__PURE__ */ function() {
    return elementify(Nothing.value)("button");
  }();
  var a = /* @__PURE__ */ function() {
    return elementify(Nothing.value)("a");
  }();

  // output/Deku.DOM.Self/index.js
  var self = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $60 = cb$prime("@self@");
      return function($61) {
        return unsafeAttribute($60(cb($61)));
      };
    }());
  };
  var self_ = function(dictApplicative) {
    var $62 = self(dictApplicative.Apply0().Functor0());
    var $63 = pure(dictApplicative);
    return function($64) {
      return $62($63($64));
    };
  };

  // output/Effect.Aff/foreign.js
  var Aff = function() {
    var EMPTY = {};
    var PURE = "Pure";
    var THROW = "Throw";
    var CATCH = "Catch";
    var SYNC = "Sync";
    var ASYNC = "Async";
    var BIND = "Bind";
    var BRACKET = "Bracket";
    var FORK = "Fork";
    var SEQ = "Sequential";
    var MAP = "Map";
    var APPLY = "Apply";
    var ALT = "Alt";
    var CONS = "Cons";
    var RESUME = "Resume";
    var RELEASE = "Release";
    var FINALIZER = "Finalizer";
    var FINALIZED = "Finalized";
    var FORKED = "Forked";
    var FIBER = "Fiber";
    var THUNK = "Thunk";
    function Aff2(tag, _1, _2, _3) {
      this.tag = tag;
      this._1 = _1;
      this._2 = _2;
      this._3 = _3;
    }
    function AffCtr(tag) {
      var fn = function(_1, _2, _3) {
        return new Aff2(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }
    function nonCanceler(error2) {
      return new Aff2(PURE, void 0);
    }
    function runEff(eff) {
      try {
        eff();
      } catch (error2) {
        setTimeout(function() {
          throw error2;
        }, 0);
      }
    }
    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error2) {
        return left(error2);
      }
    }
    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error2) {
        k(left(error2))();
        return nonCanceler;
      }
    }
    var Scheduler = function() {
      var limit = 1024;
      var size6 = 0;
      var ix = 0;
      var queue = new Array(limit);
      var draining = false;
      function drain() {
        var thunk;
        draining = true;
        while (size6 !== 0) {
          size6--;
          thunk = queue[ix];
          queue[ix] = void 0;
          ix = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }
      return {
        isDraining: function() {
          return draining;
        },
        enqueue: function(cb2) {
          var i, tmp;
          if (size6 === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }
          queue[(ix + size6) % limit] = cb2;
          size6++;
          if (!draining) {
            drain();
          }
        }
      };
    }();
    function Supervisor(util) {
      var fibers = {};
      var fiberId = 0;
      var count2 = 0;
      return {
        register: function(fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function(result) {
              return function() {
                count2--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count2++;
        },
        isEmpty: function() {
          return count2 === 0;
        },
        killAll: function(killError, cb2) {
          return function() {
            if (count2 === 0) {
              return cb2();
            }
            var killCount = 0;
            var kills = {};
            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function(result) {
                return function() {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function() {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb2();
                  }
                };
              })();
            }
            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }
            fibers = {};
            fiberId = 0;
            count2 = 0;
            return function(error2) {
              return new Aff2(SYNC, function() {
                for (var k2 in kills) {
                  if (kills.hasOwnProperty(k2)) {
                    kills[k2]();
                  }
                }
              });
            };
          };
        }
      };
    }
    var SUSPENDED = 0;
    var CONTINUE = 1;
    var STEP_BIND = 2;
    var STEP_RESULT = 3;
    var PENDING = 4;
    var RETURN = 5;
    var COMPLETED = 6;
    function Fiber(util, supervisor, aff) {
      var runTick = 0;
      var status = SUSPENDED;
      var step2 = aff;
      var fail2 = null;
      var interrupt = null;
      var bhead = null;
      var btail = null;
      var attempts = null;
      var bracketCount = 0;
      var joinId = 0;
      var joins = null;
      var rethrow = true;
      function run4(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp = null;
          result = null;
          attempt = null;
          switch (status) {
            case STEP_BIND:
              status = CONTINUE;
              try {
                step2 = bhead(step2);
                if (btail === null) {
                  bhead = null;
                } else {
                  bhead = btail._1;
                  btail = btail._2;
                }
              } catch (e) {
                status = RETURN;
                fail2 = util.left(e);
                step2 = null;
              }
              break;
            case STEP_RESULT:
              if (util.isLeft(step2)) {
                status = RETURN;
                fail2 = step2;
                step2 = null;
              } else if (bhead === null) {
                status = RETURN;
              } else {
                status = STEP_BIND;
                step2 = util.fromRight(step2);
              }
              break;
            case CONTINUE:
              switch (step2.tag) {
                case BIND:
                  if (bhead) {
                    btail = new Aff2(CONS, bhead, btail);
                  }
                  bhead = step2._2;
                  status = CONTINUE;
                  step2 = step2._1;
                  break;
                case PURE:
                  if (bhead === null) {
                    status = RETURN;
                    step2 = util.right(step2._1);
                  } else {
                    status = STEP_BIND;
                    step2 = step2._1;
                  }
                  break;
                case SYNC:
                  status = STEP_RESULT;
                  step2 = runSync(util.left, util.right, step2._1);
                  break;
                case ASYNC:
                  status = PENDING;
                  step2 = runAsync(util.left, step2._1, function(result2) {
                    return function() {
                      if (runTick !== localRunTick) {
                        return;
                      }
                      runTick++;
                      Scheduler.enqueue(function() {
                        if (runTick !== localRunTick + 1) {
                          return;
                        }
                        status = STEP_RESULT;
                        step2 = result2;
                        run4(runTick);
                      });
                    };
                  });
                  return;
                case THROW:
                  status = RETURN;
                  fail2 = util.left(step2._1);
                  step2 = null;
                  break;
                case CATCH:
                  if (bhead === null) {
                    attempts = new Aff2(CONS, step2, attempts, interrupt);
                  } else {
                    attempts = new Aff2(CONS, step2, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                  }
                  bhead = null;
                  btail = null;
                  status = CONTINUE;
                  step2 = step2._1;
                  break;
                case BRACKET:
                  bracketCount++;
                  if (bhead === null) {
                    attempts = new Aff2(CONS, step2, attempts, interrupt);
                  } else {
                    attempts = new Aff2(CONS, step2, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                  }
                  bhead = null;
                  btail = null;
                  status = CONTINUE;
                  step2 = step2._1;
                  break;
                case FORK:
                  status = STEP_RESULT;
                  tmp = Fiber(util, supervisor, step2._2);
                  if (supervisor) {
                    supervisor.register(tmp);
                  }
                  if (step2._1) {
                    tmp.run();
                  }
                  step2 = util.right(tmp);
                  break;
                case SEQ:
                  status = CONTINUE;
                  step2 = sequential2(util, supervisor, step2._1);
                  break;
              }
              break;
            case RETURN:
              bhead = null;
              btail = null;
              if (attempts === null) {
                status = COMPLETED;
                step2 = interrupt || fail2 || step2;
              } else {
                tmp = attempts._3;
                attempt = attempts._1;
                attempts = attempts._2;
                switch (attempt.tag) {
                  case CATCH:
                    if (interrupt && interrupt !== tmp && bracketCount === 0) {
                      status = RETURN;
                    } else if (fail2) {
                      status = CONTINUE;
                      step2 = attempt._2(util.fromLeft(fail2));
                      fail2 = null;
                    }
                    break;
                  case RESUME:
                    if (interrupt && interrupt !== tmp && bracketCount === 0 || fail2) {
                      status = RETURN;
                    } else {
                      bhead = attempt._1;
                      btail = attempt._2;
                      status = STEP_BIND;
                      step2 = util.fromRight(step2);
                    }
                    break;
                  case BRACKET:
                    bracketCount--;
                    if (fail2 === null) {
                      result = util.fromRight(step2);
                      attempts = new Aff2(CONS, new Aff2(RELEASE, attempt._2, result), attempts, tmp);
                      if (interrupt === tmp || bracketCount > 0) {
                        status = CONTINUE;
                        step2 = attempt._3(result);
                      }
                    }
                    break;
                  case RELEASE:
                    attempts = new Aff2(CONS, new Aff2(FINALIZED, step2, fail2), attempts, interrupt);
                    status = CONTINUE;
                    if (interrupt && interrupt !== tmp && bracketCount === 0) {
                      step2 = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                    } else if (fail2) {
                      step2 = attempt._1.failed(util.fromLeft(fail2))(attempt._2);
                    } else {
                      step2 = attempt._1.completed(util.fromRight(step2))(attempt._2);
                    }
                    fail2 = null;
                    bracketCount++;
                    break;
                  case FINALIZER:
                    bracketCount++;
                    attempts = new Aff2(CONS, new Aff2(FINALIZED, step2, fail2), attempts, interrupt);
                    status = CONTINUE;
                    step2 = attempt._1;
                    break;
                  case FINALIZED:
                    bracketCount--;
                    status = RETURN;
                    step2 = attempt._1;
                    fail2 = attempt._2;
                    break;
                }
              }
              break;
            case COMPLETED:
              for (var k in joins) {
                if (joins.hasOwnProperty(k)) {
                  rethrow = rethrow && joins[k].rethrow;
                  runEff(joins[k].handler(step2));
                }
              }
              joins = null;
              if (interrupt && fail2) {
                setTimeout(function() {
                  throw util.fromLeft(fail2);
                }, 0);
              } else if (util.isLeft(step2) && rethrow) {
                setTimeout(function() {
                  if (rethrow) {
                    throw util.fromLeft(step2);
                  }
                }, 0);
              }
              return;
            case SUSPENDED:
              status = CONTINUE;
              break;
            case PENDING:
              return;
          }
        }
      }
      function onComplete(join5) {
        return function() {
          if (status === COMPLETED) {
            rethrow = rethrow && join5.rethrow;
            join5.handler(step2)();
            return function() {
            };
          }
          var jid = joinId++;
          joins = joins || {};
          joins[jid] = join5;
          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }
      function kill(error2, cb2) {
        return function() {
          if (status === COMPLETED) {
            cb2(util.right(void 0))();
            return function() {
            };
          }
          var canceler = onComplete({
            rethrow: false,
            handler: function() {
              return cb2(util.right(void 0));
            }
          })();
          switch (status) {
            case SUSPENDED:
              interrupt = util.left(error2);
              status = COMPLETED;
              step2 = interrupt;
              run4(runTick);
              break;
            case PENDING:
              if (interrupt === null) {
                interrupt = util.left(error2);
              }
              if (bracketCount === 0) {
                if (status === PENDING) {
                  attempts = new Aff2(CONS, new Aff2(FINALIZER, step2(error2)), attempts, interrupt);
                }
                status = RETURN;
                step2 = null;
                fail2 = null;
                run4(++runTick);
              }
              break;
            default:
              if (interrupt === null) {
                interrupt = util.left(error2);
              }
              if (bracketCount === 0) {
                status = RETURN;
                step2 = null;
                fail2 = null;
              }
          }
          return canceler;
        };
      }
      function join4(cb2) {
        return function() {
          var canceler = onComplete({
            rethrow: false,
            handler: cb2
          })();
          if (status === SUSPENDED) {
            run4(runTick);
          }
          return canceler;
        };
      }
      return {
        kill,
        join: join4,
        onComplete,
        isSuspended: function() {
          return status === SUSPENDED;
        },
        run: function() {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function() {
                run4(runTick);
              });
            } else {
              run4(runTick);
            }
          }
        }
      };
    }
    function runPar(util, supervisor, par, cb2) {
      var fiberId = 0;
      var fibers = {};
      var killId = 0;
      var kills = {};
      var early = new Error("[ParAff] Early exit");
      var interrupt = null;
      var root2 = EMPTY;
      function kill(error2, par2, cb3) {
        var step2 = par2;
        var head3 = null;
        var tail3 = null;
        var count2 = 0;
        var kills2 = {};
        var tmp, kid;
        loop:
          while (true) {
            tmp = null;
            switch (step2.tag) {
              case FORKED:
                if (step2._3 === EMPTY) {
                  tmp = fibers[step2._1];
                  kills2[count2++] = tmp.kill(error2, function(result) {
                    return function() {
                      count2--;
                      if (count2 === 0) {
                        cb3(result)();
                      }
                    };
                  });
                }
                if (head3 === null) {
                  break loop;
                }
                step2 = head3._2;
                if (tail3 === null) {
                  head3 = null;
                } else {
                  head3 = tail3._1;
                  tail3 = tail3._2;
                }
                break;
              case MAP:
                step2 = step2._2;
                break;
              case APPLY:
              case ALT:
                if (head3) {
                  tail3 = new Aff2(CONS, head3, tail3);
                }
                head3 = step2;
                step2 = step2._1;
                break;
            }
          }
        if (count2 === 0) {
          cb3(util.right(void 0))();
        } else {
          kid = 0;
          tmp = count2;
          for (; kid < tmp; kid++) {
            kills2[kid] = kills2[kid]();
          }
        }
        return kills2;
      }
      function join4(result, head3, tail3) {
        var fail2, step2, lhs, rhs, tmp, kid;
        if (util.isLeft(result)) {
          fail2 = result;
          step2 = null;
        } else {
          step2 = result;
          fail2 = null;
        }
        loop:
          while (true) {
            lhs = null;
            rhs = null;
            tmp = null;
            kid = null;
            if (interrupt !== null) {
              return;
            }
            if (head3 === null) {
              cb2(fail2 || step2)();
              return;
            }
            if (head3._3 !== EMPTY) {
              return;
            }
            switch (head3.tag) {
              case MAP:
                if (fail2 === null) {
                  head3._3 = util.right(head3._1(util.fromRight(step2)));
                  step2 = head3._3;
                } else {
                  head3._3 = fail2;
                }
                break;
              case APPLY:
                lhs = head3._1._3;
                rhs = head3._2._3;
                if (fail2) {
                  head3._3 = fail2;
                  tmp = true;
                  kid = killId++;
                  kills[kid] = kill(early, fail2 === lhs ? head3._2 : head3._1, function() {
                    return function() {
                      delete kills[kid];
                      if (tmp) {
                        tmp = false;
                      } else if (tail3 === null) {
                        join4(fail2, null, null);
                      } else {
                        join4(fail2, tail3._1, tail3._2);
                      }
                    };
                  });
                  if (tmp) {
                    tmp = false;
                    return;
                  }
                } else if (lhs === EMPTY || rhs === EMPTY) {
                  return;
                } else {
                  step2 = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
                  head3._3 = step2;
                }
                break;
              case ALT:
                lhs = head3._1._3;
                rhs = head3._2._3;
                if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
                  return;
                }
                if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
                  fail2 = step2 === lhs ? rhs : lhs;
                  step2 = null;
                  head3._3 = fail2;
                } else {
                  head3._3 = step2;
                  tmp = true;
                  kid = killId++;
                  kills[kid] = kill(early, step2 === lhs ? head3._2 : head3._1, function() {
                    return function() {
                      delete kills[kid];
                      if (tmp) {
                        tmp = false;
                      } else if (tail3 === null) {
                        join4(step2, null, null);
                      } else {
                        join4(step2, tail3._1, tail3._2);
                      }
                    };
                  });
                  if (tmp) {
                    tmp = false;
                    return;
                  }
                }
                break;
            }
            if (tail3 === null) {
              head3 = null;
            } else {
              head3 = tail3._1;
              tail3 = tail3._2;
            }
          }
      }
      function resolve(fiber) {
        return function(result) {
          return function() {
            delete fibers[fiber._1];
            fiber._3 = result;
            join4(result, fiber._2._1, fiber._2._2);
          };
        };
      }
      function run4() {
        var status = CONTINUE;
        var step2 = par;
        var head3 = null;
        var tail3 = null;
        var tmp, fid;
        loop:
          while (true) {
            tmp = null;
            fid = null;
            switch (status) {
              case CONTINUE:
                switch (step2.tag) {
                  case MAP:
                    if (head3) {
                      tail3 = new Aff2(CONS, head3, tail3);
                    }
                    head3 = new Aff2(MAP, step2._1, EMPTY, EMPTY);
                    step2 = step2._2;
                    break;
                  case APPLY:
                    if (head3) {
                      tail3 = new Aff2(CONS, head3, tail3);
                    }
                    head3 = new Aff2(APPLY, EMPTY, step2._2, EMPTY);
                    step2 = step2._1;
                    break;
                  case ALT:
                    if (head3) {
                      tail3 = new Aff2(CONS, head3, tail3);
                    }
                    head3 = new Aff2(ALT, EMPTY, step2._2, EMPTY);
                    step2 = step2._1;
                    break;
                  default:
                    fid = fiberId++;
                    status = RETURN;
                    tmp = step2;
                    step2 = new Aff2(FORKED, fid, new Aff2(CONS, head3, tail3), EMPTY);
                    tmp = Fiber(util, supervisor, tmp);
                    tmp.onComplete({
                      rethrow: false,
                      handler: resolve(step2)
                    })();
                    fibers[fid] = tmp;
                    if (supervisor) {
                      supervisor.register(tmp);
                    }
                }
                break;
              case RETURN:
                if (head3 === null) {
                  break loop;
                }
                if (head3._1 === EMPTY) {
                  head3._1 = step2;
                  status = CONTINUE;
                  step2 = head3._2;
                  head3._2 = EMPTY;
                } else {
                  head3._2 = step2;
                  step2 = head3;
                  if (tail3 === null) {
                    head3 = null;
                  } else {
                    head3 = tail3._1;
                    tail3 = tail3._2;
                  }
                }
            }
          }
        root2 = step2;
        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }
      function cancel(error2, cb3) {
        interrupt = util.left(error2);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }
        kills = null;
        var newKills = kill(error2, root2, cb3);
        return function(killError) {
          return new Aff2(ASYNC, function(killCb) {
            return function() {
              for (var kid2 in newKills) {
                if (newKills.hasOwnProperty(kid2)) {
                  newKills[kid2]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }
      run4();
      return function(killError) {
        return new Aff2(ASYNC, function(killCb) {
          return function() {
            return cancel(killError, killCb);
          };
        });
      };
    }
    function sequential2(util, supervisor, par) {
      return new Aff2(ASYNC, function(cb2) {
        return function() {
          return runPar(util, supervisor, par, cb2);
        };
      });
    }
    Aff2.EMPTY = EMPTY;
    Aff2.Pure = AffCtr(PURE);
    Aff2.Throw = AffCtr(THROW);
    Aff2.Catch = AffCtr(CATCH);
    Aff2.Sync = AffCtr(SYNC);
    Aff2.Async = AffCtr(ASYNC);
    Aff2.Bind = AffCtr(BIND);
    Aff2.Bracket = AffCtr(BRACKET);
    Aff2.Fork = AffCtr(FORK);
    Aff2.Seq = AffCtr(SEQ);
    Aff2.ParMap = AffCtr(MAP);
    Aff2.ParApply = AffCtr(APPLY);
    Aff2.ParAlt = AffCtr(ALT);
    Aff2.Fiber = Fiber;
    Aff2.Supervisor = Supervisor;
    Aff2.Scheduler = Scheduler;
    Aff2.nonCanceler = nonCanceler;
    return Aff2;
  }();
  var _pure = Aff.Pure;
  var _throwError = Aff.Throw;
  var _liftEffect = Aff.Sync;
  var makeAff = Aff.Async;
  var _delay = function() {
    function setDelay(n, k) {
      if (n === 0 && typeof setImmediate !== "undefined") {
        return setImmediate(k);
      } else {
        return setTimeout(k, n);
      }
    }
    function clearDelay(n, t) {
      if (n === 0 && typeof clearImmediate !== "undefined") {
        return clearImmediate(t);
      } else {
        return clearTimeout(t);
      }
    }
    return function(right, ms) {
      return Aff.Async(function(cb2) {
        return function() {
          var timer = setDelay(ms, cb2(right()));
          return function() {
            return Aff.Sync(function() {
              return right(clearDelay(ms, timer));
            });
          };
        };
      });
    };
  }();
  var _sequential = Aff.Seq;

  // output/Web.Event.Event/foreign.js
  function _target(e) {
    return e.target;
  }

  // output/Web.Event.Event/index.js
  var target5 = function($3) {
    return toMaybe(_target($3));
  };

  // output/Deku.DOM.Combinators/index.js
  var for_3 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var bind4 = /* @__PURE__ */ bind(bindMaybe);
  var composeKleisli2 = /* @__PURE__ */ composeKleisli(bindEffect);
  var transformOn = function(dictFunctor) {
    var map21 = map(dictFunctor);
    return function(v) {
      return function(listener) {
        var $61 = map21(function(push2) {
          return function(e) {
            return for_3(bind4(target5(e))(v.fromEventTarget))(composeKleisli2(v.value)(push2));
          };
        });
        return function($62) {
          return listener($61($62));
        };
      };
    };
  };
  var runOn = function(dictFunctor) {
    var map21 = map(dictFunctor);
    return function(listener) {
      var $67 = map21($$const);
      return function($68) {
        return listener($67($68));
      };
    };
  };
  var runOn_ = function(dictApplicative) {
    var runOn1 = runOn(dictApplicative.Apply0().Functor0());
    var pure7 = pure(dictApplicative);
    return function(listener) {
      var $69 = runOn1(listener);
      return function($70) {
        return $69(pure7($70));
      };
    };
  };
  var checkedOn = function(dictFunctor) {
    return transformOn(dictFunctor)({
      fromEventTarget,
      value: checked
    });
  };
  var checkedOn_ = function(dictApplicative) {
    var checkedOn1 = checkedOn(dictApplicative.Apply0().Functor0());
    var pure7 = pure(dictApplicative);
    return function(listener) {
      var $73 = checkedOn1(listener);
      return function($74) {
        return $73(pure7($74));
      };
    };
  };

  // output/Deku.DOM.Attributes/index.js
  var xtype = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $2151 = prop$prime("type");
      return function($2152) {
        return unsafeAttribute($2151($2152));
      };
    }());
  };
  var xtype_ = function(dictApplicative) {
    var $2153 = xtype(dictApplicative.Apply0().Functor0());
    var $2154 = pure(dictApplicative);
    return function($2155) {
      return $2153($2154($2155));
    };
  };
  var xtypeCheckbox = function(dictApplicative) {
    return xtype_(dictApplicative)("checkbox");
  };
  var xtypeRadio = function(dictApplicative) {
    return xtype_(dictApplicative)("radio");
  };
  var value12 = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $2191 = prop$prime("value");
      return function($2192) {
        return unsafeAttribute($2191($2192));
      };
    }());
  };
  var value_ = function(dictApplicative) {
    var $2193 = value12(dictApplicative.Apply0().Functor0());
    var $2194 = pure(dictApplicative);
    return function($2195) {
      return $2193($2194($2195));
    };
  };
  var style = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $2256 = prop$prime("style");
      return function($2257) {
        return unsafeAttribute($2256($2257));
      };
    }());
  };
  var style_ = function(dictApplicative) {
    var $2258 = style(dictApplicative.Apply0().Functor0());
    var $2259 = pure(dictApplicative);
    return function($2260) {
      return $2258($2259($2260));
    };
  };
  var name15 = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $2516 = prop$prime("name");
      return function($2517) {
        return unsafeAttribute($2516($2517));
      };
    }());
  };
  var name_ = function(dictApplicative) {
    var $2518 = name15(dictApplicative.Apply0().Functor0());
    var $2519 = pure(dictApplicative);
    return function($2520) {
      return $2518($2519($2520));
    };
  };
  var id = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $2701 = prop$prime("id");
      return function($2702) {
        return unsafeAttribute($2701($2702));
      };
    }());
  };
  var id_ = function(dictApplicative) {
    var $2703 = id(dictApplicative.Apply0().Functor0());
    var $2704 = pure(dictApplicative);
    return function($2705) {
      return $2703($2704($2705));
    };
  };
  var href4 = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $2721 = prop$prime("href");
      return function($2722) {
        return unsafeAttribute($2721($2722));
      };
    }());
  };
  var $$for = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $2791 = prop$prime("for");
      return function($2792) {
        return unsafeAttribute($2791($2792));
      };
    }());
  };
  var for_4 = function(dictApplicative) {
    var $2793 = $$for(dictApplicative.Apply0().Functor0());
    var $2794 = pure(dictApplicative);
    return function($2795) {
      return $2793($2794($2795));
    };
  };
  var download3 = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $2821 = prop$prime("download");
      return function($2822) {
        return unsafeAttribute($2821($2822));
      };
    }());
  };

  // output/Deku.DOM.Listeners/index.js
  var mouseup = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $1297 = cb$prime("mouseup");
      return function($1298) {
        return unsafeAttribute($1297(cb($1298)));
      };
    }());
  };
  var mousemove = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $1312 = cb$prime("mousemove");
      return function($1313) {
        return unsafeAttribute($1312(cb($1313)));
      };
    }());
  };
  var mousedown = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $1327 = cb$prime("mousedown");
      return function($1328) {
        return unsafeAttribute($1327(cb($1328)));
      };
    }());
  };
  var click2 = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $1617 = cb$prime("click");
      return function($1618) {
        return unsafeAttribute($1617(cb($1618)));
      };
    }());
  };
  var change = function(dictFunctor) {
    return map(dictFunctor)(function() {
      var $1622 = cb$prime("change");
      return function($1623) {
        return unsafeAttribute($1622(cb($1623)));
      };
    }());
  };

  // output/Deku.DOMInterpret/foreign.js
  var setInnerHtml = (html, element2) => {
    element2.innerHTML = html;
  };

  // output/Data.Exists/index.js
  var runExists = unsafeCoerce2;
  var mkExists = unsafeCoerce2;

  // output/Deku.UnsafeDOM/foreign.js
  var cbs = /* @__PURE__ */ new WeakMap();
  var pushCb = (name16, cb2, el) => {
    var ns = cbs.get(el);
    if (ns != null)
      ns[name16] = cb2;
    else
      cbs.set(el, { [name16]: cb2 });
  };
  var popCb = (name16, el) => {
    var ns = cbs.get(el);
    if (ns == null)
      return null;
    else {
      var result = ns[name16] ?? null;
      ns[name16] = void 0;
      return result;
    }
  };
  var createElement = (t) => document.createElement(t);
  var after = (cs, t) => t.after.apply(t, cs);
  var prepend = (cs, t) => t.prepend.apply(t, cs);
  var createElementNS = (ns, t) => document.createElementNS(ns, t);
  var createText = (t) => document.createTextNode(t);
  var createDocumentFragment = () => document.createDocumentFragment();
  var setTextContent = (value13, node) => node.textContent = value13;
  var addEventListener = (type, listener, useCapture, target6) => target6.addEventListener(type, listener, useCapture);
  var removeEventListener = (type, listener, useCapture, target6) => target6.removeEventListener(type, listener, useCapture);
  var eventListener = (fn) => fn;

  // output/Unsafe.Reference/foreign.js
  function reallyUnsafeRefEq(a2) {
    return function(b) {
      return a2 === b;
    };
  }

  // output/Unsafe.Reference/index.js
  var unsafeRefEq = reallyUnsafeRefEq;

  // output/Web.DOM.ChildNode/foreign.js
  function remove(node) {
    return function() {
      return node.remove();
    };
  }

  // output/Web.DOM.Element/foreign.js
  var getProp = function(name16) {
    return function(doctype) {
      return doctype[name16];
    };
  };
  var _namespaceURI = getProp("namespaceURI");
  var _prefix = getProp("prefix");
  var localName = getProp("localName");
  var tagName = getProp("tagName");
  function setAttribute(name16) {
    return function(value13) {
      return function(element2) {
        return function() {
          element2.setAttribute(name16, value13);
        };
      };
    };
  }
  function removeAttribute(name16) {
    return function(element2) {
      return function() {
        element2.removeAttribute(name16);
      };
    };
  }

  // output/Web.DOM.ParentNode/foreign.js
  var getEffProp = function(name16) {
    return function(node) {
      return function() {
        return node[name16];
      };
    };
  };
  var children = getEffProp("children");
  var _firstElementChild = getEffProp("firstElementChild");
  var _lastElementChild = getEffProp("lastElementChild");
  var childElementCount = getEffProp("childElementCount");

  // output/Web.DOM.Node/foreign.js
  var getEffProp2 = function(name16) {
    return function(node) {
      return function() {
        return node[name16];
      };
    };
  };
  var baseURI = getEffProp2("baseURI");
  var _ownerDocument = getEffProp2("ownerDocument");
  var _parentNode = getEffProp2("parentNode");
  var _parentElement = getEffProp2("parentElement");
  var childNodes = getEffProp2("childNodes");
  var _firstChild = getEffProp2("firstChild");
  var _lastChild = getEffProp2("lastChild");
  var _previousSibling = getEffProp2("previousSibling");
  var _nextSibling = getEffProp2("nextSibling");
  var _nodeValue = getEffProp2("nodeValue");
  var textContent = getEffProp2("textContent");

  // output/Web.DOM.Node/index.js
  var map16 = /* @__PURE__ */ map(functorEffect);
  var nextSibling = /* @__PURE__ */ function() {
    var $15 = map16(toMaybe);
    return function($16) {
      return $15(_nextSibling($16));
    };
  }();
  var firstChild = /* @__PURE__ */ function() {
    var $25 = map16(toMaybe);
    return function($26) {
      return $25(_firstChild($26));
    };
  }();

  // output/Web.DOM.Text/index.js
  var toChildNode = unsafeCoerce2;

  // output/Deku.DOMInterpret/index.js
  var bind5 = /* @__PURE__ */ bind(bindEffect);
  var for_5 = /* @__PURE__ */ for_(applicativeEffect)(foldableMaybe);
  var $$void9 = /* @__PURE__ */ $$void(functorEffect);
  var coerce3 = /* @__PURE__ */ coerce();
  var mapFlipped3 = /* @__PURE__ */ mapFlipped(functorMaybe);
  var liftST5 = /* @__PURE__ */ liftST(monadSTEffect);
  var map17 = /* @__PURE__ */ map(functorEffect);
  var fromJust6 = /* @__PURE__ */ fromJust();
  var traverse_3 = /* @__PURE__ */ traverse_(applicativeEffect)(foldableMaybe);
  var unsetAttributeEffect = /* @__PURE__ */ mkEffectFn2(function(v) {
    return function(elt$prime) {
      var asElt = fromDekuElement(elt$prime);
      return function __do3() {
        var l = popCb(v, asElt);
        var asEventTarget = fromDekuElement(elt$prime);
        for_5(toMaybe(l))(function(toRemove) {
          return function() {
            return removeEventListener(v, toRemove, false, asEventTarget);
          };
        })();
        return removeAttribute(v)(asElt)();
      };
    };
  });
  var setTextEffect = function(str, txt$prime) {
    var txt = fromDekuText(txt$prime);
    return setTextContent(str, txt);
  };
  var setInnerHtmlEffect = function(html, anchor) {
    if (anchor instanceof ParentStart) {
      return setInnerHtml(html, anchor.value0);
    }
    ;
    if (anchor instanceof Element2) {
      return throwException(error("setInnerHtmlEffect: Cannot set innerHTML on an Element"))();
    }
    ;
    if (anchor instanceof Text) {
      return throwException(error("setInnerHtmlEffect: Cannot set innerHTML on an Element"))();
    }
    ;
    throw new Error("Failed pattern match at Deku.DOMInterpret (line 278, column 3 - line 286, column 86): " + [anchor.constructor.name]);
  };
  var setCbEffect = /* @__PURE__ */ mkEffectFn3(function(v) {
    return function(v1) {
      return function(elt$prime) {
        var $47 = v === "@self@";
        if ($47) {
          return $$void9(v1(elt$prime));
        }
        ;
        var asElt = fromDekuElement(elt$prime);
        return function __do3() {
          var l = popCb(v, asElt);
          var eventTarget = fromDekuElement(elt$prime);
          for_5(toMaybe(l))(function(toRemove) {
            return function() {
              return removeEventListener(v, toRemove, false, eventTarget);
            };
          })();
          var nl = eventListener(mkEffectFn1(v1));
          addEventListener(v, nl, false, eventTarget);
          return pushCb(v, nl, asElt);
        };
      };
    };
  });
  var removeTextEffect = function(t) {
    return remove(toChildNode(fromDekuText(t)))();
  };
  var removeElementEffect = function(e) {
    return remove(fromDekuElement(e))();
  };
  var makeTextEffect = function(v, mstr) {
    var txt = createText(fromMaybe("")(mstr));
    return toDekuText(txt);
  };
  var makeElementEffect = function(v, ns, tag) {
    var elt = function() {
      var v1 = coerce3(ns);
      if (v1 instanceof Nothing) {
        return createElement(coerce3(tag));
      }
      ;
      if (v1 instanceof Just) {
        return createElementNS(coerce3(v1.value0), coerce3(tag));
      }
      ;
      throw new Error("Failed pattern match at Deku.DOMInterpret (line 46, column 10 - line 48, column 71): " + [v1.constructor.name]);
    }();
    return toDekuElement(elt);
  };
  var getDisableable = function(elt) {
    var go2 = function($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
        if (v instanceof Nil) {
          $tco_done = true;
          return Nothing.value;
        }
        ;
        var v1 = function(v2) {
          if (v instanceof Cons) {
            $copy_v = v.value1;
            return;
          }
          ;
          throw new Error("Failed pattern match at Deku.DOMInterpret (line 173, column 1 - line 173, column 69): " + [v.constructor.name]);
        };
        if (v instanceof Cons) {
          var $58 = runExists(function(v2) {
            return mapFlipped3(v2.e(elt))(function(e$prime) {
              return mkExists({
                f: v2.f,
                e: e$prime
              });
            });
          })(v.value0);
          if ($58 instanceof Just) {
            $tco_done = true;
            return new Just($58.value0);
          }
          ;
          return v1(true);
        }
        ;
        return v1(true);
      }
      ;
      while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
      }
      ;
      return $tco_result;
    };
    return go2;
  };
  var disableables = /* @__PURE__ */ function() {
    return new Cons(mkExists({
      e: fromElement,
      f: setDisabled
    }), new Cons(mkExists({
      e: fromElement4,
      f: setDisabled3
    }), new Cons(mkExists({
      e: fromElement3,
      f: setDisabled2
    }), new Cons(mkExists({
      e: fromElement5,
      f: setDisabled4
    }), new Cons(mkExists({
      e: fromElement6,
      f: setDisabled5
    }), new Cons(mkExists({
      e: fromElement7,
      f: setDisabled6
    }), new Cons(mkExists({
      e: fromElement8,
      f: setDisabled7
    }), new Cons(mkExists({
      e: fromElement9,
      f: setDisabled8
    }), new Cons(mkExists({
      e: fromElement10,
      f: setDisabled9
    }), Nil.value)))))))));
  }();
  var setPropEffect = /* @__PURE__ */ mkEffectFn3(function(v) {
    return function(v1) {
      return function(elt$prime) {
        var elt = fromDekuElement(elt$prime);
        var o = function() {
          var v3 = function(v4) {
            var v5 = function(v6) {
              var v7 = function(v8) {
                var v9 = function(v10) {
                  if (otherwise) {
                    return setAttribute(v)(v1)(elt);
                  }
                  ;
                  throw new Error("Failed pattern match at Deku.DOMInterpret (line 56, column 1 - line 56, column 30): " + []);
                };
                var $64 = v === "disabled";
                if ($64) {
                  var $65 = getDisableable(elt)(disableables);
                  if ($65 instanceof Just) {
                    return runExists(function(v10) {
                      return v10.f(v1 === "true")(v10.e);
                    })($65.value0);
                  }
                  ;
                  return v9(true);
                }
                ;
                return v9(true);
              };
              var $70 = v === "checked";
              if ($70) {
                var $71 = fromElement4(elt);
                if ($71 instanceof Just) {
                  return setChecked(v1 === "true")($71.value0);
                }
                ;
                return v7(true);
              }
              ;
              return v7(true);
            };
            var $73 = v === "value";
            if ($73) {
              var $74 = fromElement10(elt);
              if ($74 instanceof Just) {
                return setValue11(v1)($74.value0);
              }
              ;
              return v5(true);
            }
            ;
            return v5(true);
          };
          var $76 = v === "value";
          if ($76) {
            var $77 = fromElement4(elt);
            if ($77 instanceof Just) {
              return setValue3(v1)($77.value0);
            }
            ;
            return v3(true);
          }
          ;
          return v3(true);
        }();
        return o;
      };
    };
  });
  var bufferPortal = function __do2() {
    var frag = createDocumentFragment();
    return new Tuple(0, toDekuElement(frag));
  };
  var attachNodeEffect = function(nodes, anchor) {
    if (anchor instanceof ParentStart) {
      return prepend(nodes, fromDekuElement(anchor.value0));
    }
    ;
    if (anchor instanceof Element2) {
      return after(nodes, fromDekuElement(anchor.value0));
    }
    ;
    if (anchor instanceof Text) {
      return after(nodes, fromDekuText(anchor.value0));
    }
    ;
    throw new Error("Failed pattern match at Deku.DOMInterpret (line 264, column 3 - line 272, column 56): " + [anchor.constructor.name]);
  };
  var attachTextEffect = /* @__PURE__ */ mkEffectFn2(function(txt) {
    return runEffectFn2(attachNodeEffect)([fromDekuText(txt)]);
  });
  var beamRegionEffect = /* @__PURE__ */ function() {
    var toNode = function(a2) {
      if (a2 instanceof Element2) {
        return fromDekuElement(a2.value0);
      }
      ;
      if (a2 instanceof Text) {
        return fromDekuText(a2.value0);
      }
      ;
      throw new Error("Failed pattern match at Deku.DOMInterpret (line 258, column 28 - line 260, column 39): " + [a2.constructor.name]);
    };
    var beamNodes = function(first, end, target6) {
      var acc = liftST5(newSTArray)();
      var next2 = $$new(new Just(first))();
      (function() {
        while (map17(isJust)(read(next2))()) {
          (function __do3() {
            var current = map17(fromJust6)(read(next2))();
            $$void9(liftST5(push(current)(acc)))();
            var $86 = unsafeRefEq(current)(end);
            if ($86) {
              return $$void9(write(Nothing.value)(next2))();
            }
            ;
            var nextCandidate = nextSibling(current)();
            return $$void9(write(nextCandidate)(next2))();
          })();
        }
        ;
        return {};
      })();
      var nodes = liftST5(unsafeFreeze(acc))();
      return attachNodeEffect(nodes, target6);
    };
    return function(v, v1, v2) {
      if (v1 instanceof ParentStart) {
        return unit;
      }
      ;
      if (v instanceof ParentStart) {
        return bind5(firstChild(fromDekuElement(v.value0)))(traverse_3(function(first) {
          return function() {
            return beamNodes(first, toNode(v1), v2);
          };
        }))();
      }
      ;
      var endNode = toNode(v1);
      var beginNode = toNode(v);
      var $92 = unsafeRefEq(beginNode)(endNode);
      if ($92) {
        return unit;
      }
      ;
      return bind5(nextSibling(beginNode))(traverse_3(function(first) {
        return function() {
          return beamNodes(first, endNode, v2);
        };
      }))();
    };
  }();
  var attachElementEffect = /* @__PURE__ */ mkEffectFn2(function(v) {
    return runEffectFn2(attachNodeEffect)([fromDekuElement(v)]);
  });

  // output/Deku.SPAInterpret/index.js
  var spaInterpret = {
    dynamicDOMInterpret: function(v) {
      return spaInterpret;
    },
    portalDOMInterpret: function(v) {
      return spaInterpret;
    },
    isBoring: /* @__PURE__ */ $$const(false),
    makeElement: makeElementEffect,
    attachElement: attachElementEffect,
    initializeElementRendering: function(v, v1) {
      return unit;
    },
    initializeTextRendering: function(v, v1) {
      return unit;
    },
    markElementAsImpure: function(v) {
      return unit;
    },
    setProp: setPropEffect,
    setCb: setCbEffect,
    unsetAttribute: unsetAttributeEffect,
    removeElement: removeElementEffect,
    makeText: makeTextEffect,
    attachText: attachTextEffect,
    setText: setTextEffect,
    removeText: removeTextEffect,
    markTextAsImpure: function(v) {
      return unit;
    },
    beamRegion: beamRegionEffect,
    initializePortalRendering: function(v) {
      return unit;
    },
    markPortalAsRendered: function(v) {
      return unit;
    },
    bufferPortal,
    initializeDynRendering: function(v) {
      return unit;
    },
    initializeFixedRendering: function(v) {
      return unit;
    },
    setInnerHTML: setInnerHtmlEffect
  };

  // output/Deku.SPA/index.js
  var bind6 = /* @__PURE__ */ bind(bindEffect);
  var liftST6 = /* @__PURE__ */ liftST(monadSTEffect);
  var $$void10 = /* @__PURE__ */ $$void(functorEffect);
  var map18 = /* @__PURE__ */ map(functorMaybe);
  var runInElement = function(elt) {
    return function(v) {
      return function __do3() {
        var v1 = liftST6(create4)();
        var region = liftST6(function() {
          return fromParent(toDekuElement(elt));
        })();
        var scope2 = liftST6(function() {
          return newPSR(root, v1.poll, region);
        })();
        $$void10(function() {
          return v(scope2, spaInterpret);
        })();
        return v1.push(unit);
      };
    };
  };
  var doInBody = function(f) {
    return function(elt) {
      return function __do3() {
        var b$prime = bind6(bind6(windowImpl)(document2))(body)();
        return maybe(throwException(error("Could not find element")))(flip(f)(elt))(map18(toElement)(b$prime))();
      };
    };
  };
  var runInBody = /* @__PURE__ */ doInBody(runInElement);

  // output/Effect.Now/foreign.js
  function now2() {
    return Date.now();
  }

  // output/Effect.Now/index.js
  var map19 = /* @__PURE__ */ map(functorEffect);
  var nowDateTime = /* @__PURE__ */ map19(toDateTime)(now2);

  // output/Graphics.Canvas/foreign.js
  function getContext2D(c) {
    return function() {
      return c.getContext("2d");
    };
  }
  function setCanvasWidth(canvas2) {
    return function(width8) {
      return function() {
        canvas2.width = width8;
      };
    };
  }
  function setCanvasHeight(canvas2) {
    return function(height9) {
      return function() {
        canvas2.height = height9;
      };
    };
  }
  function canvasToDataURL(canvas2) {
    return function() {
      return canvas2.toDataURL();
    };
  }
  function setLineWidth(ctx) {
    return function(width8) {
      return function() {
        ctx.lineWidth = width8;
      };
    };
  }
  function setStrokeStyle(ctx) {
    return function(style2) {
      return function() {
        ctx.strokeStyle = style2;
      };
    };
  }
  function beginPath(ctx) {
    return function() {
      ctx.beginPath();
    };
  }
  function stroke(ctx) {
    return function() {
      ctx.stroke();
    };
  }
  function lineTo(ctx) {
    return function(x) {
      return function(y) {
        return function() {
          ctx.lineTo(x, y);
        };
      };
    };
  }
  function moveTo2(ctx) {
    return function(x) {
      return function(y) {
        return function() {
          ctx.moveTo(x, y);
        };
      };
    };
  }
  function clearRect(ctx) {
    return function(r) {
      return function() {
        ctx.clearRect(r.x, r.y, r.width, r.height);
      };
    };
  }

  // output/Web.CSSOM.MouseEvent/foreign.js
  function offsetX(e) {
    return e.offsetX;
  }
  function offsetY(e) {
    return e.offsetY;
  }

  // output/Processing02Remarkable.Main/index.js
  var pure6 = /* @__PURE__ */ pure(applicativeEffect);
  var point2 = /* @__PURE__ */ point(/* @__PURE__ */ shape1(analyticPoint));
  var semiringPolynomial2 = /* @__PURE__ */ semiringPolynomial(eqNumber)(semiringNumber);
  var add4 = /* @__PURE__ */ add(semiringPolynomial2);
  var index6 = /* @__PURE__ */ index2(analyticPoint);
  var zero2 = /* @__PURE__ */ zero(semiringPolynomial2);
  var map20 = /* @__PURE__ */ map(functorAPoll2);
  var bind7 = /* @__PURE__ */ bind(bindEffect);
  var mousedown2 = /* @__PURE__ */ mousedown(functorAPoll2);
  var mousemove2 = /* @__PURE__ */ mousemove(functorAPoll2);
  var mouseup2 = /* @__PURE__ */ mouseup(functorAPoll2);
  var self_2 = /* @__PURE__ */ self_(applicativeAPoll2);
  var traverse_4 = /* @__PURE__ */ traverse_(applicativeEffect)(foldableMaybe);
  var style_2 = /* @__PURE__ */ style_(applicativeAPoll2);
  var xtypeCheckbox2 = /* @__PURE__ */ xtypeCheckbox(applicativeAPoll2);
  var checkedOn_2 = /* @__PURE__ */ checkedOn_(applicativeAPoll2);
  var change2 = /* @__PURE__ */ change(functorAPoll2);
  var runOn_2 = /* @__PURE__ */ runOn_(applicativeAPoll2);
  var click3 = /* @__PURE__ */ click2(functorAPoll2);
  var pure14 = /* @__PURE__ */ pure(applicativeAPoll2);
  var show3 = /* @__PURE__ */ show(showInt);
  var xtypeRadio2 = /* @__PURE__ */ xtypeRadio(applicativeAPoll2);
  var id_2 = /* @__PURE__ */ id_(applicativeAPoll2);
  var name_2 = /* @__PURE__ */ name_(applicativeAPoll2);
  var value_2 = /* @__PURE__ */ value_(applicativeAPoll2);
  var for_6 = /* @__PURE__ */ for_4(applicativeAPoll2);
  var href5 = /* @__PURE__ */ href4(functorAPoll2);
  var download4 = /* @__PURE__ */ download3(functorAPoll2);
  var runOn2 = /* @__PURE__ */ runOn(functorAPoll2);
  var apply7 = /* @__PURE__ */ apply2(applyAPoll2);
  var map110 = /* @__PURE__ */ map(functorEffect);
  var map24 = /* @__PURE__ */ map(functorFn);
  var useHotRef = function(a2) {
    return function(f) {
      return bind2(useHot(a2))(function(v) {
        return bind2(useRef(a2)(v.value1))(function(valueGetter) {
          return bind2(useHot(false))(function(v1) {
            return bind2(useRef(false)(v1.value1))(function(tracingGetter) {
              return bind2(useHot(false))(function(v2) {
                return bind2(useRef(false)(v2.value1))(function(erasingGetter) {
                  return bind2(useHot(2))(function(v3) {
                    return bind2(useRef(2)(v3.value1))(function(linewidthGetter) {
                      return bind2(useHot("black"))(function(v4) {
                        return bind2(useRef("black")(v4.value1))(function(strokeGetter) {
                          return f({
                            valueSetter: v.value0,
                            tracingSetter: v1.value0,
                            erasingSetter: v2.value0,
                            linewidthSetter: v3.value0,
                            strokeSetter: v4.value0,
                            valueGetter,
                            tracingGetter,
                            erasingGetter,
                            linewidthGetter,
                            strokeGetter
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    };
  };
  var mouseCb = function(f) {
    return function(e) {
      var y = toNumber(offsetY(e));
      var x = toNumber(offsetX(e));
      var $76 = y < 0;
      if ($76) {
        return pure6(unit);
      }
      ;
      return f(point2(add4(monoPol(x)(0))(monoPol(y)(1))));
    };
  };
  var eraserhead = function(ctx) {
    return function(v) {
      return clearRect(ctx)({
        height: 41,
        width: 41,
        x: toNumber(v.value0),
        y: toNumber(v.value1)
      });
    };
  };
  var drawFromLastAtMouse = function(ctx) {
    return function(p0) {
      return function(p) {
        return function __do3() {
          beginPath(ctx)();
          moveTo2(ctx)(index6(p0)(0))(index6(p0)(1))();
          lineTo(ctx)(index6(p)(0))(index6(p)(1))();
          return stroke(ctx)();
        };
      };
    };
  };
  var main = /* @__PURE__ */ $$void(functorEffect)(/* @__PURE__ */ runInBody(/* @__PURE__ */ bind2(/* @__PURE__ */ useHot(""))(function(v) {
    return bind2(useHot(Nothing.value))(function(v1) {
      return bind2(useHot(""))(function(v2) {
        return bind2(useHot(2))(function(v3) {
          return bind2(useHot(pure6(unit)))(function(v4) {
            return bind2(useHotRef(point2(zero2)))(function(moverLocation) {
              var radioAction = function(s) {
                return map20(flip($$const(maybe(pure6(unit))($$const(moverLocation.strokeSetter(s))))))(v1.value1);
              };
              var mouseActionUp = map20(flip($$const(maybe(pure6(unit))($$const(moverLocation.tracingSetter(false))))))(v1.value1);
              var mouseActionMove = map20(flip(function(mouseEvent) {
                return function(mayGraphics) {
                  return maybe(pure6(unit))(function(v5) {
                    return mouseCb(function(mouse) {
                      return function __do3() {
                        var t = moverLocation.tracingGetter();
                        if (t) {
                          var e = moverLocation.erasingGetter();
                          var $96 = !e;
                          if ($96) {
                            var l = moverLocation.linewidthGetter();
                            setLineWidth(v5.value1)(toNumber(l))();
                            var s = moverLocation.strokeGetter();
                            setStrokeStyle(v5.value1)(s)();
                            var last3 = moverLocation.valueGetter();
                            drawFromLastAtMouse(v5.value1)(last3)(mouse)();
                            return moverLocation.valueSetter(mouse)();
                          }
                          ;
                          return eraserhead(v5.value1)(new Tuple(round2(index6(mouse)(0)), round2(index6(mouse)(1))))();
                        }
                        ;
                        return unit;
                      };
                    })(mouseEvent);
                  })(mayGraphics);
                };
              }))(v1.value1);
              var mouseActionDown = map20(flip(function(mouseEvent) {
                return function(mayGraphics) {
                  return maybe(pure6(unit))(function(v5) {
                    return mouseCb(function(mouse) {
                      return function __do3() {
                        moverLocation.valueSetter(mouse)();
                        return moverLocation.tracingSetter(true)();
                      };
                    })(mouseEvent);
                  })(mayGraphics);
                };
              }))(v1.value1);
              return div_([canvas([mousedown2(mouseActionDown), mousemove2(mouseActionMove), mouseup2(mouseActionUp), self_2(function() {
                var $112 = traverse_4(function(e) {
                  return function __do3() {
                    setCanvasWidth(e)(1800)();
                    setCanvasHeight(e)(800)();
                    var ctx = getContext2D(e)();
                    setStrokeStyle(ctx)("black")();
                    setLineWidth(ctx)(2)();
                    return v1.value0(new Just(new Tuple(e, ctx)))();
                  };
                });
                return function($113) {
                  return $112(fromElement2($113));
                };
              }())])([]), div2([style_2("display: grid; grid-template-columns: 1fr 1fr 1fr 1fr; justify-items: center;")])([input([xtypeCheckbox2, checkedOn_2(change2)($$const(function __do3() {
                var e = moverLocation.erasingGetter();
                return moverLocation.erasingSetter(!e)();
              }))])([]), div2([style_2("display: grid; grid-template-columns: 20px 50px 20px; justify-items: center;")])([button([runOn_2(click3)(function __do3() {
                var l = moverLocation.linewidthGetter();
                moverLocation.linewidthSetter(l - 1 | 0)();
                return v3.value0(l - 1 | 0)();
              })])([text5(pure14("-"))]), text5(map20(show3)(v3.value1)), button([runOn_2(click3)(function __do3() {
                var l = moverLocation.linewidthGetter();
                moverLocation.linewidthSetter(l + 1 | 0)();
                return v3.value0(l + 1 | 0)();
              })])([text5(pure14("+"))])]), div_([input([xtypeRadio2, id_2("opt1"), name_2("group"), value_2("ONE"), change2(radioAction("black"))])([]), label4([for_6("opt1"), style_2("color: white; background: black;")])([text5(pure14("black"))]), input([xtypeRadio2, id_2("opt2"), name_2("group"), value_2("TWO"), change2(radioAction("blue"))])([]), label4([for_6("opt2"), style_2("color: white; background: blue;")])([text5(pure14("blue"))]), input([xtypeRadio2, id_2("opt3"), name_2("group"), value_2("THR"), change2(radioAction("red"))])([]), label4([for_6("opt3"), style_2("color: white; background: red;")])([text5(pure14("red"))]), input([xtypeRadio2, id_2("opt4"), name_2("group"), value_2("FOR"), change2(radioAction("grey"))])([]), label4([for_6("opt4"), style_2("color: white; background: grey;")])([text5(pure14("grey"))]), input([xtypeRadio2, id_2("opt5"), name_2("group"), value_2("FIV"), change2(radioAction("green"))])([]), label4([for_6("opt5"), style_2("color: white; background: green;")])([text5(pure14("green"))])]), a([href5(v.value1), download4(map20(function(name16) {
                return "reMarkable - " + name16;
              })(v2.value1)), runOn2(click3)(apply7(map20(function(stopAction) {
                return function(mayGraphics) {
                  return maybe(pure6(unit))(function(v5) {
                    return function __do3() {
                      stopAction();
                      bind7(canvasToDataURL(v5.value0))(v.value0)();
                      var name16 = map110(map24(toUTCString)(fromDateTime))(nowDateTime)();
                      return v2.value0(name16)();
                    };
                  })(mayGraphics);
                };
              })(v4.value1))(v1.value1))])([text5(pure14("Download image"))])])]);
            });
          });
        });
      });
    });
  })));

  // <stdin>
  main();
})();
