// Generated by purs bundle 0.13.4
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                    
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Data_Function = $PS["Data.Function"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.createElement = function (localName) {
    return function (doc) {
      return function () {
        return doc.createElement(localName);
      };
    };
  };
})(PS["Web.DOM.Document"] = PS["Web.DOM.Document"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Web.DOM.Document"] = $PS["Web.DOM.Document"] || {};
  var exports = $PS["Web.DOM.Document"];
  var $foreign = $PS["Web.DOM.Document"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];     
  var toNonElementParentNode = Unsafe_Coerce.unsafeCoerce;
  exports["toNonElementParentNode"] = toNonElementParentNode;
  exports["createElement"] = $foreign.createElement;
})(PS);
(function(exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];
      if (ty != null && value instanceof ty) {
        return just(value);
      }
      return nothing;
    } 
    var obj = value;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];             
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;                                      
  var fromNode = Web_Internal_FFI.unsafeReadProtoTagged("Element");
  var fromEventTarget = Web_Internal_FFI.unsafeReadProtoTagged("Element");
  exports["fromNode"] = fromNode;
  exports["fromEventTarget"] = fromEventTarget;
  exports["toNode"] = toNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        return parent.appendChild(node);
      };
    };
  };
})(PS["Web.DOM.Node"] = PS["Web.DOM.Node"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Web.DOM.Node"] = $PS["Web.DOM.Node"] || {};
  var exports = $PS["Web.DOM.Node"];
  var $foreign = $PS["Web.DOM.Node"];
  exports["appendChild"] = $foreign.appendChild;
})(PS);
(function(exports) {
  "use strict";

  exports._getElementById = function (id) {
    return function (node) {
      return function () {
        return node.getElementById(id);
      };
    };
  };
})(PS["Web.DOM.NonElementParentNode"] = PS["Web.DOM.NonElementParentNode"] || {});
(function(exports) {
  "use strict";          

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];                                   
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Web.DOM.NonElementParentNode"] = $PS["Web.DOM.NonElementParentNode"] || {};
  var exports = $PS["Web.DOM.NonElementParentNode"];
  var $foreign = $PS["Web.DOM.NonElementParentNode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];                
  var getElementById = function (eid) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_getElementById"](eid);
      return function ($2) {
          return $0($1($2));
      };
  };
  exports["getElementById"] = getElementById;
})(PS);
(function(exports) {
  "use strict";

  exports._target = function (e) {
    return e.target;
  };
})(PS["Web.Event.Event"] = PS["Web.Event.Event"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Web.Event.Event"] = $PS["Web.Event.Event"] || {};
  var exports = $PS["Web.Event.Event"];
  var $foreign = $PS["Web.Event.Event"];
  var Data_Nullable = $PS["Data.Nullable"];
  var target = function ($4) {
      return Data_Nullable.toMaybe($foreign["_target"]($4));
  };
  exports["target"] = target;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
})(PS);
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Web.HTML.Event.EventTypes"] = $PS["Web.HTML.Event.EventTypes"] || {};
  var exports = $PS["Web.HTML.Event.EventTypes"];
  var change = "change";
  exports["change"] = change;
})(PS);
(function(exports) {
  "use strict";

  exports._body = function (doc) {
    return function () {
      return doc.body;
    };
  };
})(PS["Web.HTML.HTMLDocument"] = PS["Web.HTML.HTMLDocument"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var $foreign = $PS["Web.HTML.HTMLDocument"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];      
  var toDocument = Unsafe_Coerce.unsafeCoerce;
  var body = (function () {
      var $8 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($9) {
          return $8($foreign["_body"]($9));
      };
  })();
  exports["toDocument"] = toDocument;
  exports["body"] = body;
})(PS);
(function(exports) {
  "use strict";

  exports._read = function (nothing, just, value) {
    var tag = Object.prototype.toString.call(value);
    if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
      return just(value);
    } else {
      return nothing;
    }
  };

  exports.focus = function (elt) {
    return function () {
      return elt.focus();
    };
  };
})(PS["Web.HTML.HTMLElement"] = PS["Web.HTML.HTMLElement"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var $foreign = $PS["Web.HTML.HTMLElement"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var fromNode = function (x) {
      return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
  };
  exports["fromNode"] = fromNode;
  exports["toNode"] = toNode;
  exports["focus"] = $foreign.focus;
})(PS);
(function(exports) {
  "use strict";

  // ----------------------------------------------------------------------------

  exports.value = function (input) {
    return function () {
      return input.value;
    };
  };
})(PS["Web.HTML.HTMLInputElement"] = PS["Web.HTML.HTMLInputElement"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Web.HTML.HTMLInputElement"] = $PS["Web.HTML.HTMLInputElement"] || {};
  var exports = $PS["Web.HTML.HTMLInputElement"];
  var $foreign = $PS["Web.HTML.HTMLInputElement"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                                  
  var fromElement = Web_Internal_FFI.unsafeReadProtoTagged("HTMLInputElement");
  exports["fromElement"] = fromElement;
  exports["value"] = $foreign.value;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["DOM.Editor"] = $PS["DOM.Editor"] || {};
  var exports = $PS["DOM.Editor"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Web_DOM_Document = $PS["Web.DOM.Document"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_DOM_Node = $PS["Web.DOM.Node"];
  var Web_DOM_NonElementParentNode = $PS["Web.DOM.NonElementParentNode"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Event_EventTypes = $PS["Web.HTML.Event.EventTypes"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_HTMLInputElement = $PS["Web.HTML.HTMLInputElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var toNode = Web_DOM_Element.toNode;
  var setup = function __do() {
      var v = Web_HTML.window();
      var v1 = Web_HTML_Window.document(v)();
      var document = Web_HTML_HTMLDocument.toDocument(v1);
      var v2 = Web_HTML_HTMLDocument.body(v1)();
      var bodyRaw = Data_Maybe.fromJust()(v2);
      var body = Web_HTML_HTMLElement.toNode(bodyRaw);
      return {
          window: v,
          document: document,
          body: body
      };
  };
  var inputedValueFromEvent = function (ev) {
      return Web_HTML_HTMLInputElement.value(Data_Maybe.fromJust()(Web_HTML_HTMLInputElement.fromElement(Data_Maybe.fromJust()(Web_DOM_Element.fromEventTarget(Data_Maybe.fromJust()(Web_Event_Event.target(ev)))))));
  };
  var getElementById = function (str) {
      return function (doc) {
          return Data_Functor.map(Effect.functorEffect)(function (x) {
              return Web_DOM_Element.toNode(Data_Maybe.fromJust()(x));
          })(Web_DOM_NonElementParentNode.getElementById(str)(Web_DOM_Document.toNonElementParentNode(doc)));
      };
  };
  var focus = function (node) {
      return Web_HTML_HTMLElement.focus(Data_Maybe.fromJust()(Web_HTML_HTMLElement.fromNode(node)));
  };
  var createElement = function (str) {
      return function (doc) {
          return Data_Functor.map(Effect.functorEffect)(Web_DOM_Element.toNode)(Web_DOM_Document.createElement(str)(doc));
      };
  };                                          
  var change = Web_HTML_Event_EventTypes.change;
  var appendChild = Web_DOM_Node.appendChild;
  var addEventListener = function (cb) {
      return function (ev) {
          return function (node) {
              return function __do() {
                  var v = Web_Event_EventTarget.eventListener(cb)();
                  var v1 = Web_Event_EventTarget.addEventListener(ev)(v)(false)(Web_DOM_Element.toEventTarget(Data_Maybe.fromJust()(Web_DOM_Element.fromNode(node))))();
                  return Data_Unit.unit;
              };
          };
      };
  };
  exports["addEventListener"] = addEventListener;
  exports["appendChild"] = appendChild;
  exports["change"] = change;
  exports["createElement"] = createElement;
  exports["focus"] = focus;
  exports["getElementById"] = getElementById;
  exports["inputedValueFromEvent"] = inputedValueFromEvent;
  exports["setup"] = setup;
})(PS);
(function(exports) {
  "use strict";

  var replicateFill = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq; 
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqString"] = eqString;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["tt"] = tt;
  exports["conj"] = conj;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Monoid.Conj"] = $PS["Data.Monoid.Conj"] || {};
  var exports = $PS["Data.Monoid.Conj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["monoidConj"] = monoidConj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];                      
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                        
  var newtypeConj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Conj.Conj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                          var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                          return function ($98) {
                              return $96(f($97($98)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["alaF"] = alaF;
  exports["newtypeConj"] = newtypeConj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["all"] = all;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var last = function (xs) {
      return index(xs)($foreign.length(xs) - 1 | 0);
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var $$delete = function (dictEq) {
      return deleteBy(Data_Eq.eq(dictEq));
  };
  var difference = function (dictEq) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)($$delete(dictEq));
  };
  exports["fromFoldable"] = fromFoldable;
  exports["last"] = last;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["difference"] = difference;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  var negate = function (dictRing) {
      return function (a) {
          return sub(dictRing)(Data_Semiring.zero(dictRing.Semiring0()))(a);
      };
  };
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["negate"] = negate;
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.DivisionRing"] = $PS["Data.DivisionRing"] || {};
  var exports = $PS["Data.DivisionRing"];                  
  var DivisionRing = function (Ring0, recip) {
      this.Ring0 = Ring0;
      this.recip = recip;
  };
  var recip = function (dict) {
      return dict.recip;
  };
  exports["DivisionRing"] = DivisionRing;
  exports["recip"] = recip;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Semiring = $PS["Data.Semiring"];                
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  };
  var gcd = function ($copy_dictEq) {
      return function ($copy_dictEuclideanRing) {
          return function ($copy_a) {
              return function ($copy_b) {
                  var $tco_var_dictEq = $copy_dictEq;
                  var $tco_var_dictEuclideanRing = $copy_dictEuclideanRing;
                  var $tco_var_a = $copy_a;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictEq, dictEuclideanRing, a, b) {
                      var $7 = Data_Eq.eq(dictEq)(b)(Data_Semiring.zero(((dictEuclideanRing.CommutativeRing0()).Ring0()).Semiring0()));
                      if ($7) {
                          $tco_done = true;
                          return a;
                      };
                      $tco_var_dictEq = dictEq;
                      $tco_var_dictEuclideanRing = dictEuclideanRing;
                      $tco_var_a = b;
                      $copy_b = mod(dictEuclideanRing)(a)(b);
                      return;
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictEq, $tco_var_dictEuclideanRing, $tco_var_a, $copy_b);
                  };
                  return $tco_result;
              };
          };
      };
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["gcd"] = gcd;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                    
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($203) {
                  return $202(f($203));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($205) {
              return $204(rev($205));
          };
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;
  exports["foldableList"] = foldableList;
  exports["applicativeList"] = applicativeList;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var abs = function (dictOrd) {
      return function (dictRing) {
          return function (x) {
              var $53 = greaterThanOrEq(dictOrd)(x)(Data_Semiring.zero(dictRing.Semiring0()));
              if ($53) {
                  return x;
              };
              return Data_Ring.negate(dictRing)(x);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["lessThan"] = lessThan;
  exports["abs"] = abs;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Show = $PS["Data.Show"];                        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["showTuple"] = showTuple;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 612, column 1 - line 612, column 40): " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 577, column 18 - line 586, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 576, column 3 - line 576, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
  var showMap = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (m) {
              return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))(toAscArray(m)) + ")");
          });
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var empty = Leaf.value;
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["values"] = values;
  exports["showMap"] = showMap;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Traversable.Accum.Internal"] = $PS["Data.Traversable.Accum.Internal"] || {};
  var exports = $PS["Data.Traversable.Accum.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];
  var stateL = function (v) {
      return v;
  }; 
  var functorStateL = new Data_Functor.Functor(function (f) {
      return function (k) {
          return function (s) {
              var v = stateL(k)(s);
              return {
                  accum: v.accum,
                  value: f(v.value)
              };
          };
      };
  });
  var applyStateL = new Control_Apply.Apply(function () {
      return functorStateL;
  }, function (f) {
      return function (x) {
          return function (s) {
              var v = stateL(f)(s);
              var v1 = stateL(x)(v.accum);
              return {
                  accum: v1.accum,
                  value: v.value(v1.value)
              };
          };
      };
  });
  var applicativeStateL = new Control_Applicative.Applicative(function () {
      return applyStateL;
  }, function (a) {
      return function (s) {
          return {
              accum: s,
              value: a
          };
      };
  });
  exports["stateL"] = stateL;
  exports["applicativeStateL"] = applicativeStateL;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Traversable_Accum_Internal = $PS["Data.Traversable.Accum.Internal"];                
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var mapAccumL = function (dictTraversable) {
      return function (f) {
          return function (s0) {
              return function (xs) {
                  return Data_Traversable_Accum_Internal.stateL(traverse(dictTraversable)(Data_Traversable_Accum_Internal.applicativeStateL)(function (a) {
                      return function (s) {
                          return f(s)(a);
                      };
                  })(xs))(s0);
              };
          };
      };
  };
  var scanl = function (dictTraversable) {
      return function (f) {
          return function (b0) {
              return function (xs) {
                  return (mapAccumL(dictTraversable)(function (b) {
                      return function (a) {
                          var b$prime = f(b)(a);
                          return {
                              accum: b$prime,
                              value: b$prime
                          };
                      };
                  })(b0)(xs)).value;
              };
          };
      };
  };
  exports["scanl"] = scanl;
  exports["traversableArray"] = traversableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Fraction"] = $PS["Fraction"] || {};
  var exports = $PS["Fraction"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];
  var Data_DivisionRing = $PS["Data.DivisionRing"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Function = $PS["Data.Function"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var showFraction = new Data_Show.Show(function (v) {
      var $14 = v.den === 1;
      if ($14) {
          return Data_Show.show(Data_Show.showInt)(v.num);
      };
      return "\\frac{" + (Data_Show.show(Data_Show.showInt)(v.num) + ("}{" + (Data_Show.show(Data_Show.showInt)(v.den) + "}")));
  });
  var semiRingFraction = new Data_Semiring.Semiring(function (v) {
      return function (v1) {
          var n = (v.num * v1.den | 0) + (v1.num * v.den | 0) | 0;
          var d = v.den * v1.den | 0;
          var g = Data_EuclideanRing.gcd(Data_Eq.eqInt)(Data_EuclideanRing.euclideanRingInt)(Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)(n))(d);
          return {
              num: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(n)(g),
              den: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(d)(g)
          };
      };
  }, function (v) {
      return function (v1) {
          var n = v.num * v1.num | 0;
          var d = v.den * v1.den | 0;
          var g = Data_EuclideanRing.gcd(Data_Eq.eqInt)(Data_EuclideanRing.euclideanRingInt)(Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)(n))(d);
          return {
              num: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(n)(g),
              den: Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(d)(g)
          };
      };
  }, {
      num: 1,
      den: 1
  }, {
      num: 0,
      den: 1
  });
  var fromInt = function (n) {
      return {
          num: n,
          den: 1
      };
  };
  var ringFraction = new Data_Ring.Ring(function () {
      return semiRingFraction;
  }, function (f1) {
      return function (f2) {
          return Data_Semiring.add(semiRingFraction)(f1)(Data_Semiring.mul(semiRingFraction)(fromInt(-1 | 0))(f2));
      };
  });
  var eqFraction = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.num === 0 && v1.num === 0 || v.num === v1.num && v.den === v1.den;
      };
  });
  var ordFraction = new Data_Ord.Ord(function () {
      return eqFraction;
  }, function (f1) {
      return function (f2) {
          var v = Data_Ring.sub(ringFraction)(f1)(f2);
          if (v.num < 0) {
              return Data_Ordering.LT.value;
          };
          if (v.num > 0) {
              return Data_Ordering.GT.value;
          };
          if (Data_Boolean.otherwise) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Fraction (line 45, column 9 - line 48, column 36): " + [ Data_Unit.unit.constructor.name ]);
      };
  });
  var divisionRingFraction = new Data_DivisionRing.DivisionRing(function () {
      return ringFraction;
  }, function (v) {
      var $24 = v.num < 0;
      if ($24) {
          return {
              num: -v.den | 0,
              den: -v.num | 0
          };
      };
      return {
          num: v.den,
          den: v.num
      };
  });
  var commutativeRingFraction = new Data_CommutativeRing.CommutativeRing(function () {
      return ringFraction;
  });
  var euclideanRingFraction = new Data_EuclideanRing.EuclideanRing(function () {
      return commutativeRingFraction;
  }, Data_Function["const"](1), function (f1) {
      return function (f2) {
          return Data_Semiring.mul(semiRingFraction)(f1)(Data_DivisionRing.recip(divisionRingFraction)(f2));
      };
  }, function (v) {
      return function (v1) {
          return Data_Semiring.zero(semiRingFraction);
      };
  });
  var abs = function (v) {
      return {
          num: Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)(v.num),
          den: v.den
      };
  };
  exports["fromInt"] = fromInt;
  exports["showFraction"] = showFraction;
  exports["semiRingFraction"] = semiRingFraction;
  exports["ringFraction"] = ringFraction;
  exports["ordFraction"] = ordFraction;
  exports["euclideanRingFraction"] = euclideanRingFraction;
})(PS);
(function(exports) {
  
  exports.setTitle = function (name){
    return function(){
      document.querySelector("h1")
              .textContent = name;
    };
  };

  exports.subsection = function (name){
    return function(){
       let node = document.createElement("h3");
        node.textContent = name;
        document.querySelector("#description").appendChild(node);
    };
  };

  exports.render = function (content){
      return function(){
        let node = document.createElement("label");
        document.querySelector("#description")
                .appendChild(node);
        katex.render(content,node);
      };
  };

  exports.line = function (x1){
    return function(y1){
    return function(x2){
    return function(y2){
    return function(){
      let node = document.createElementNS("http://www.w3.org/2000/svg","svg");
      node.setAttribute("style","position: absolute; width:100%; height:100%; ");
      let l = document.createElementNS("http://www.w3.org/2000/svg","line");
      l.setAttributeNS(null,"x1",x1);
      l.setAttributeNS(null,"y1",y1);
      l.setAttributeNS(null,"x2",x2);
      l.setAttributeNS(null,"y2",y2);
      l.setAttributeNS(null,"style", "stroke:#000; stroke-width:1px;");
      node.appendChild(l);
      document.querySelector("#description").appendChild(node);
      };};};};
   };

  exports.raw = function (content){
      return function(){
        let node = document.createTextNode(content);
        document.querySelector("#description")
                .appendChild(node);
      };
  };

  exports.newLine = function (){
    return function (){
    let node = document.createElement("br");
    document.querySelector("#description")
            .appendChild(node);
            };
  };  


  exports.list = function(xs){
    return function(){
      let node = document.createElement("ul");
      xs.forEach(x => {
        let elem = document.createElement("li");
        node.appendChild(elem);
        x(elem);
        });
     document.querySelector("#description")
             .appendChild(node);
    }
  };

  exports.cat = function(xs){
      return function(parent){
     xs.forEach(x => x(parent));
    };
  };

  exports.subraw = function (content){
    return function (parent){
        parent.appendChild(document.createTextNode(content));
    };
  };
})(PS["KaTeX"] = PS["KaTeX"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["KaTeX"] = $PS["KaTeX"] || {};
  var exports = $PS["KaTeX"];
  var $foreign = $PS["KaTeX"];
  var Data_Unit = $PS["Data.Unit"];
  var newline = $foreign.newLine(Data_Unit.unit);
  exports["newline"] = newline;
  exports["cat"] = $foreign.cat;
  exports["line"] = $foreign.line;
  exports["list"] = $foreign.list;
  exports["raw"] = $foreign.raw;
  exports["render"] = $foreign.render;
  exports["setTitle"] = $foreign.setTitle;
  exports["subraw"] = $foreign.subraw;
  exports["subsection"] = $foreign.subsection;
})(PS);
(function(exports) {
  exports.fromString = function (str){
    return str;
  };
})(PS["Main"] = PS["Main"] || {});
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Rand"] = $PS["Rand"] || {};
  var exports = $PS["Rand"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];                
  var middle = function (nn) {
      var n3$prime = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(nn)(1000000);
      var n3 = nn - (Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(nn - n3$prime | 0)(1000000) * 1000000 | 0) | 0;
      var n0 = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(nn)(100);
      return Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(n3 - n0 | 0)(100);
  };
  var rand = function (v) {
      return {
          val: middle(Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)((v.val * v.val | 0) + v.gen | 0)(100000000)),
          gen: Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v.gen + v.seed | 0)(100000000),
          seed: v.seed
      };
  };
  exports["rand"] = rand;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.4
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var $foreign = $PS["Main"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var DOM_Editor = $PS["DOM.Editor"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ring = $PS["Data.Ring"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Fraction = $PS["Fraction"];
  var KaTeX = $PS["KaTeX"];
  var Rand = $PS["Rand"];                
  var validExperience = function (e) {
      var vs = Data_Array.fromFoldable(Data_List_Types.foldableList)(Data_Map_Internal.values(e));
      var valid = function (x) {
          return Data_Ord.lessThan(Fraction.ordFraction)(Fraction.fromInt(0))(x) && Data_Ord.lessThan(Fraction.ordFraction)(x)(Fraction.fromInt(1));
      };
      return Data_Array.length(vs) === 16 && Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(valid)(vs);
  };
  var spacex = function (n) {
      return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupString))("")(Data_Array.replicate(n)("\\;"));
  };
  var setWithIndex = function (n) {
      return function (f) {
          return function (e) {
              return Data_Map_Internal.insert(Data_Ord.ordString)((function () {
                  if (n === 0) {
                      return "pA";
                  };
                  if (n === 1) {
                      return "pnA";
                  };
                  if (n === 2) {
                      return "pB";
                  };
                  if (n === 3) {
                      return "pnB";
                  };
                  if (n === 4) {
                      return "pAB";
                  };
                  if (n === 5) {
                      return "pAnB";
                  };
                  if (n === 6) {
                      return "pnAB";
                  };
                  if (n === 7) {
                      return "pnAnB";
                  };
                  if (n === 8) {
                      return "pgAB";
                  };
                  if (n === 9) {
                      return "pgAnB";
                  };
                  if (n === 10) {
                      return "pgnAB";
                  };
                  if (n === 11) {
                      return "pgnAnB";
                  };
                  if (n === 12) {
                      return "pgBA";
                  };
                  if (n === 13) {
                      return "pgBnA";
                  };
                  if (n === 14) {
                      return "pgnBA";
                  };
                  return "pgnBnA";
              })())(f)(e);
          };
      };
  };
  var ptot = function (pa) {
      return function (pab) {
          return function (panb) {
              return function (e) {
                  var $32 = [ Data_Map_Internal.lookup(Data_Ord.ordString)(pa)(e), Data_Map_Internal.lookup(Data_Ord.ordString)(pab)(e), Data_Map_Internal.lookup(Data_Ord.ordString)(panb)(e) ];
                  if ($32.length === 3 && ($32[0] instanceof Data_Maybe.Just && ($32[1] instanceof Data_Maybe.Just && $32[2] instanceof Data_Maybe.Nothing))) {
                      return Data_Maybe.Just.create(Data_Map_Internal.insert(Data_Ord.ordString)(panb)(Data_Ring.sub(Fraction.ringFraction)($32[0].value0)($32[1].value0))(e));
                  };
                  if ($32.length === 3 && ($32[0] instanceof Data_Maybe.Just && ($32[1] instanceof Data_Maybe.Nothing && $32[2] instanceof Data_Maybe.Just))) {
                      return Data_Maybe.Just.create(Data_Map_Internal.insert(Data_Ord.ordString)(pab)(Data_Ring.sub(Fraction.ringFraction)($32[0].value0)($32[2].value0))(e));
                  };
                  if ($32.length === 3 && ($32[0] instanceof Data_Maybe.Nothing && ($32[1] instanceof Data_Maybe.Just && $32[2] instanceof Data_Maybe.Just))) {
                      return Data_Maybe.Just.create(Data_Map_Internal.insert(Data_Ord.ordString)(pa)(Data_Semiring.add(Fraction.semiRingFraction)($32[1].value0)($32[2].value0))(e));
                  };
                  return Data_Maybe.Nothing.value;
              };
          };
      };
  };
  var print = function (e) {
      return function (key) {
          var v = Data_Map_Internal.lookup(Data_Ord.ordString)(key)(e);
          if (v instanceof Data_Maybe.Just) {
              return Data_Show.show(Fraction.showFraction)(v.value0);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return "";
          };
          throw new Error("Failed pattern match at Main (line 128, column 9 - line 130, column 27): " + [ v.constructor.name ]);
      };
  };
  var tree = function (e) {
      return function __do() {
          KaTeX.line("12")("175")("100")("92")();
          KaTeX.line("12")("175")("100")("244")();
          KaTeX.line("126")("80")("202")("24")();
          KaTeX.line("126")("80")("202")("136")();
          KaTeX.line("126")("264")("202")("208")();
          KaTeX.line("126")("264")("202")("320")();
          KaTeX.render("\\begin{array}{ccccccccc} & & & & & & & & B \\\\ " + ("& & & & & " + (print(e)("pgAB") + (" \\\\ \\\\ " + ("& & & & A \\\\ " + ("&" + (print(e)("pA") + (" \\\\ " + ("& & & & &" + (print(e)("pgAnB") + (" \\\\ " + ("& & & & & & & &" + ("\\overline{B} \\\\ " + ("\\cdot \\\\ " + ("& & & & &\xa0& & &" + ("B \\\\ " + ("& & & & & " + (print(e)("pgnAB") + (" \\\\ " + ("&" + (print(e)("pnA") + (" \\\\ " + ("& & & & \\overline{A} \\\\ \\\\" + ("& & & & & " + (print(e)("pgnAnB") + (" \\\\ " + "& & & & & & & & \\overline{B} \\end{array}"))))))))))))))))))))))))))();
          var dress = function (str) {
              return function (x) {
                  return function (k) {
                      var v = Data_Map_Internal.lookup(Data_Ord.ordString)(k)(x);
                      if (v instanceof Data_Maybe.Just) {
                          return "&&&&" + (str + (Data_Show.show(Fraction.showFraction)(v.value0) + "\\\\"));
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          return "";
                      };
                      throw new Error("Failed pattern match at Main (line 157, column 9 - line 159, column 25): " + [ v.constructor.name ]);
                  };
              };
          };
          var pB$prime = dress("P(B)=")(e)("pB");
          var pnB$prime = dress("P(\\overline{B})=")(e)("pnB");
          var pAB$prime = dress("P(A\\cap B)=")(e)("pAB");
          var pAnB$prime = dress("P(A\\cap\\overline{B})=")(e)("pAnB");
          var pnAB$prime = dress("P(\\overline{A}\\cap B)=")(e)("pnAB");
          var pnAnB$prime = dress("P(\\overline{A}\\cap\\overline{B})=")(e)("pnAnB");
          var pgBA$prime = dress("P_B(A)=")(e)("pgBA");
          var pgBnA$prime = dress("P_B(\\overline{A})=")(e)("pgBnA");
          var pgnBA$prime = dress("P_{\\overline{B}}(A)=")(e)("pgnBA");
          var pgnBnA$prime = dress("P_{\\overline{B}}(\\overline{A})=")(e)("pgnBnA");
          return KaTeX.render("\\begin{array}{lllll}" + (pB$prime + (pnB$prime + (pAB$prime + (pAnB$prime + (pnAB$prime + (pnAnB$prime + (pgBA$prime + (pgBnA$prime + (pgnBA$prime + (pgnBnA$prime + "\\end{array}")))))))))))();
      };
  };
  var primes = [ 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 5, 5, 5, 5 ];
  var majIndex = 16;
  var exercice = function (p1) {
      return function (p2) {
          return function (p3) {
              return function (ref) {
                  return Data_Map_Internal.insert(Data_Ord.ordString)(p1)(Data_Maybe.fromJust()(Data_Map_Internal.lookup(Data_Ord.ordString)(p1)(ref)))(Data_Map_Internal.insert(Data_Ord.ordString)(p2)(Data_Maybe.fromJust()(Data_Map_Internal.lookup(Data_Ord.ordString)(p2)(ref)))(Data_Map_Internal.insert(Data_Ord.ordString)(p3)(Data_Maybe.fromJust()(Data_Map_Internal.lookup(Data_Ord.ordString)(p3)(ref)))(Data_Map_Internal.empty)));
              };
          };
      };
  };
  var dep = function (pa) {
      return function (pb) {
          return function (pgab) {
              return function (pgnab) {
                  return function (e) {
                      var $52 = [ Data_Map_Internal.lookup(Data_Ord.ordString)(pa)(e), Data_Map_Internal.lookup(Data_Ord.ordString)(pb)(e), Data_Map_Internal.lookup(Data_Ord.ordString)(pgab)(e), Data_Map_Internal.lookup(Data_Ord.ordString)(pgnab)(e) ];
                      if ($52.length === 4 && ($52[0] instanceof Data_Maybe.Just && ($52[1] instanceof Data_Maybe.Just && ($52[2] instanceof Data_Maybe.Just && $52[3] instanceof Data_Maybe.Nothing)))) {
                          return Data_Maybe.Just.create(Data_Map_Internal.insert(Data_Ord.ordString)(pgnab)(Data_EuclideanRing.div(Fraction.euclideanRingFraction)(Data_Ring.sub(Fraction.ringFraction)($52[1].value0)(Data_Semiring.mul(Fraction.semiRingFraction)($52[2].value0)($52[0].value0)))(Data_Ring.sub(Fraction.ringFraction)(Fraction.fromInt(1))($52[0].value0)))(e));
                      };
                      if ($52.length === 4 && ($52[0] instanceof Data_Maybe.Just && ($52[1] instanceof Data_Maybe.Just && ($52[2] instanceof Data_Maybe.Nothing && $52[3] instanceof Data_Maybe.Just)))) {
                          return Data_Maybe.Just.create(Data_Map_Internal.insert(Data_Ord.ordString)(pgab)(Data_EuclideanRing.div(Fraction.euclideanRingFraction)(Data_Ring.sub(Fraction.ringFraction)($52[1].value0)(Data_Semiring.mul(Fraction.semiRingFraction)($52[3].value0)(Data_Ring.sub(Fraction.ringFraction)(Fraction.fromInt(1))($52[0].value0))))($52[0].value0))(e));
                      };
                      if ($52.length === 4 && ($52[0] instanceof Data_Maybe.Just && ($52[1] instanceof Data_Maybe.Nothing && ($52[2] instanceof Data_Maybe.Just && $52[3] instanceof Data_Maybe.Just)))) {
                          return Data_Maybe.Just.create(Data_Map_Internal.insert(Data_Ord.ordString)(pb)(Data_Semiring.add(Fraction.semiRingFraction)(Data_Semiring.mul(Fraction.semiRingFraction)($52[2].value0)($52[0].value0))(Data_Semiring.mul(Fraction.semiRingFraction)($52[3].value0)(Data_Ring.sub(Fraction.ringFraction)(Fraction.fromInt(1))($52[0].value0))))(e));
                      };
                      if ($52.length === 4 && ($52[0] instanceof Data_Maybe.Nothing && ($52[1] instanceof Data_Maybe.Just && ($52[2] instanceof Data_Maybe.Just && $52[3] instanceof Data_Maybe.Just)))) {
                          return Data_Maybe.Just.create(Data_Map_Internal.insert(Data_Ord.ordString)(pa)(Data_EuclideanRing.div(Fraction.euclideanRingFraction)(Data_Ring.sub(Fraction.ringFraction)($52[1].value0)($52[3].value0))(Data_Ring.sub(Fraction.ringFraction)($52[2].value0)($52[3].value0)))(e));
                      };
                      return Data_Maybe.Nothing.value;
                  };
              };
          };
      };
  };
  var contr = function (pa) {
      return function (pna) {
          return function (e) {
              var $81 = [ Data_Map_Internal.lookup(Data_Ord.ordString)(pa)(e), Data_Map_Internal.lookup(Data_Ord.ordString)(pna)(e) ];
              if ($81.length === 2 && ($81[0] instanceof Data_Maybe.Just && $81[1] instanceof Data_Maybe.Nothing)) {
                  return Data_Maybe.Just.create(Data_Map_Internal.insert(Data_Ord.ordString)(pna)(Data_Ring.sub(Fraction.ringFraction)(Fraction.fromInt(1))($81[0].value0))(e));
              };
              if ($81.length === 2 && ($81[0] instanceof Data_Maybe.Nothing && $81[1] instanceof Data_Maybe.Just)) {
                  return Data_Maybe.Just.create(Data_Map_Internal.insert(Data_Ord.ordString)(pa)(Data_Ring.sub(Fraction.ringFraction)(Fraction.fromInt(1))($81[1].value0))(e));
              };
              return Data_Maybe.Nothing.value;
          };
      };
  };
  var cond = function (pc) {
      return function (pi) {
          return function (pr) {
              return function (e) {
                  var $88 = [ Data_Map_Internal.lookup(Data_Ord.ordString)(pc)(e), Data_Map_Internal.lookup(Data_Ord.ordString)(pi)(e), Data_Map_Internal.lookup(Data_Ord.ordString)(pr)(e) ];
                  if ($88.length === 3 && ($88[0] instanceof Data_Maybe.Just && ($88[1] instanceof Data_Maybe.Just && $88[2] instanceof Data_Maybe.Nothing))) {
                      return Data_Maybe.Just.create(Data_Map_Internal.insert(Data_Ord.ordString)(pr)(Data_EuclideanRing.div(Fraction.euclideanRingFraction)($88[1].value0)($88[0].value0))(e));
                  };
                  if ($88.length === 3 && ($88[0] instanceof Data_Maybe.Just && ($88[1] instanceof Data_Maybe.Nothing && $88[2] instanceof Data_Maybe.Just))) {
                      return Data_Maybe.Just.create(Data_Map_Internal.insert(Data_Ord.ordString)(pi)(Data_Semiring.mul(Fraction.semiRingFraction)($88[0].value0)($88[2].value0))(e));
                  };
                  if ($88.length === 3 && ($88[0] instanceof Data_Maybe.Nothing && ($88[1] instanceof Data_Maybe.Just && $88[2] instanceof Data_Maybe.Just))) {
                      return Data_Maybe.Just.create(Data_Map_Internal.insert(Data_Ord.ordString)(pc)(Data_EuclideanRing.div(Fraction.euclideanRingFraction)($88[1].value0)($88[2].value0))(e));
                  };
                  return Data_Maybe.Nothing.value;
              };
          };
      };
  };
  var complete = function (e) {
      var rules = [ contr("pA")("pnA"), contr("pB")("pnB"), contr("pgAB")("pgAnB"), contr("pgnAB")("pgnAnB"), contr("pgBA")("pgBnA"), contr("pgnBA")("pgnBnA"), cond("pgAB")("pAB")("pA"), cond("pgAnB")("pAnB")("pA"), cond("pgnAB")("pnAB")("pnA"), cond("pgnAnB")("pnAnB")("pnA"), cond("pgBA")("pAB")("pB"), cond("pgBnA")("pnAB")("pB"), cond("pgnBA")("pAnB")("pnB"), cond("pgnBnA")("pnAnB")("pnB"), ptot("pA")("pAB")("pAnB"), ptot("pnA")("pnAB")("pnAnB"), ptot("pB")("pAB")("pnAB"), ptot("pnB")("pAnB")("pnAnB"), dep("pA")("pB")("pgAB")("pgnAB") ];
      var f = function ($copy_xs) {
          var $tco_done = false;
          var $tco_result;
          function $tco_loop(xs) {
              var v = Data_Array.uncons(xs);
              if (v instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return e;
              };
              if (v instanceof Data_Maybe.Just) {
                  var v1 = v.value0.head(e);
                  if (v1 instanceof Data_Maybe.Just) {
                      $tco_done = true;
                      return complete(v1.value0);
                  };
                  if (v1 instanceof Data_Maybe.Nothing) {
                      $copy_xs = v.value0.tail;
                      return;
                  };
                  throw new Error("Failed pattern match at Main (line 84, column 16 - line 86, column 36): " + [ v1.constructor.name ]);
              };
              throw new Error("Failed pattern match at Main (line 81, column 9 - line 86, column 36): " + [ v.constructor.name ]);
          };
          while (!$tco_done) {
              $tco_result = $tco_loop($copy_xs);
          };
          return $tco_result;
      };
      return f(rules);
  };
  var avgNbFactors = 1;
  var randProba = function ($copy_r) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(r) {
          var r0 = Rand.rand(r);
          var r1 = Rand.rand(r0);
          var nbNumFactors = 1 + Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(r0.val)(avgNbFactors) | 0;
          var nrands = Data_Functor.map(Data_Functor.functorArray)(function (f) {
              return f(r1);
          })(Data_Traversable.scanl(Data_Traversable.traversableArray)(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn))(Control_Category.identity(Control_Category.categoryFn))(Data_Array.replicate(nbNumFactors)(Rand.rand)));
          var nbDenFactors = 1 + Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(r1.val)(avgNbFactors) | 0;
          var v = Data_Array.last(nrands);
          if (v instanceof Data_Maybe.Just) {
              var drands = Data_Functor.map(Data_Functor.functorArray)(function (f) {
                  return f(v.value0);
              })(Data_Traversable.scanl(Data_Traversable.traversableArray)(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn))(Control_Category.identity(Control_Category.categoryFn))(Data_Array.replicate(nbDenFactors)(Rand.rand)));
              var v1 = Data_Array.last(drands);
              if (v1 instanceof Data_Maybe.Just) {
                  var prime = function (ix) {
                      return Data_Maybe.fromJust()(Data_Array.index(primes)(ix));
                  };
                  var nums = Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Functor.functorFn)(prime)(function (rnd) {
                      return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(rnd.val)(Data_Array.length(primes));
                  }))(nrands);
                  var nextRand = Rand.rand(v1.value0);
                  var dens = Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Functor.functorFn)(prime)(function (rnd) {
                      return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(rnd.val)(Data_Array.length(primes));
                  }))(drands);
                  var num = Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Semiring.mul(Data_Semiring.semiringInt))(1)(Data_Array.difference(Data_Eq.eqInt)(nums)(dens));
                  var den = Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Semiring.mul(Data_Semiring.semiringInt))(1)(Data_Array.difference(Data_Eq.eqInt)(dens)(nums));
                  if (num < den) {
                      $tco_done = true;
                      return {
                          probability: {
                              num: num,
                              den: den
                          },
                          nextRand: nextRand
                      };
                  };
                  if (num > den) {
                      $tco_done = true;
                      return {
                          probability: {
                              num: den,
                              den: num
                          },
                          nextRand: nextRand
                      };
                  };
                  if (Data_Boolean.otherwise) {
                      $copy_r = nextRand;
                      return;
                  };
                  throw new Error("Failed pattern match at Main (line 114, column 7 - line 118, column 50): " + [ Data_Unit.unit.constructor.name ]);
              };
              throw new Error("Failed pattern match at Main (line 105, column 7 - line 105, column 28): " + [ v1.constructor.name ]);
          };
          throw new Error("Failed pattern match at Main (line 102, column 7 - line 102, column 28): " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_r);
      };
      return $tco_result;
  };
  var randExercise = function ($copy_r1) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(r1) {
          var modMaj = function (x) {
              return Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(x)(majIndex);
          };
          var f3 = function ($copy_r) {
              return function ($copy_s) {
                  var $tco_var_r = $copy_r;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(r, s) {
                      var t = Rand.rand(s);
                      var $115 = modMaj(t.val) === modMaj(r.val) || modMaj(t.val) === modMaj(s.val);
                      if ($115) {
                          $tco_var_r = s;
                          $copy_s = t;
                          return;
                      };
                      $tco_done = true;
                      return t;
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_r, $copy_s);
                  };
                  return $tco_result;
              };
          };
          var f2 = function ($copy_r) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(r) {
                  var s = Rand.rand(r);
                  var $116 = modMaj(s.val) === modMaj(r.val);
                  if ($116) {
                      $copy_r = s;
                      return;
                  };
                  $tco_done = true;
                  return s;
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_r);
              };
              return $tco_result;
          };
          var r2 = f2(r1);
          var r3 = f3(r1)(r2);
          var v = randProba(r3);
          var v1 = randProba(v.nextRand);
          var v2 = randProba(v1.nextRand);
          var e = setWithIndex(modMaj(r1.val))(v.probability)(setWithIndex(modMaj(r2.val))(v1.probability)(setWithIndex(modMaj(r3.val))(v2.probability)(Data_Map_Internal.empty)));
          var $120 = validExperience(complete(e));
          if ($120) {
              $tco_done = true;
              return {
                  experience: e,
                  nextRand: v2.nextRand
              };
          };
          $copy_r1 = v2.nextRand;
          return;
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_r1);
      };
      return $tco_result;
  };
  var cb = function (doc) {
      return function (ev) {
          return function __do() {
              var v = DOM_Editor.inputedValueFromEvent(ev)();
              var odd = (2 * Data_Ord.abs(Data_Ord.ordInt)(Data_Ring.ringInt)($foreign.fromString(v)) | 0) + 1 | 0;
              var r0 = {
                  val: odd,
                  gen: 0,
                  seed: odd * odd | 0
              };
              KaTeX.newline();
              KaTeX.list([ KaTeX.cat([ KaTeX.subraw("10 arbres pond\xe9r\xe9s \xe0 compl\xe9ter \xe0 partir des hypoth\xe8ses") ]), KaTeX.cat([ KaTeX.subraw("1 point par arbre complet") ]), KaTeX.cat([ KaTeX.subraw("calculatrice autoris\xe9e") ]), KaTeX.cat([ KaTeX.subraw("toute valeur num\xe9rique sous forme enti\xe8re ou fractionnaire") ]) ])();
              KaTeX.newline();
              var v1 = DOM_Editor.getElementById("description")(doc)();
              KaTeX.subsection("1)")();
              var r1 = Rand.rand(r0);
              var v2 = randExercise(r1);
              tree(v2.experience)();
              tree(complete(v2.experience))();
              KaTeX.raw(Data_Show.show(Data_Map_Internal.showMap(Data_Show.showString)(Fraction.showFraction))(complete(v2.experience)))();
              KaTeX.subsection("2)")();
              var v3 = randExercise(v2.nextRand);
              tree(v3.experience)();
              tree(complete(v3.experience))();
              KaTeX.raw(Data_Show.show(Data_Map_Internal.showMap(Data_Show.showString)(Fraction.showFraction))(complete(v3.experience)))();
              KaTeX.subsection("3)")();
              var e3 = Data_Map_Internal.insert(Data_Ord.ordString)("pAB")({
                  num: 1,
                  den: 4
              })(Data_Map_Internal.insert(Data_Ord.ordString)("pAnB")({
                  num: 1,
                  den: 2
              })(Data_Map_Internal.insert(Data_Ord.ordString)("pnAB")({
                  num: 1,
                  den: 5
              })(Data_Map_Internal.empty)));
              tree(e3)();
              tree(complete(e3))();
              KaTeX.raw(Data_Show.show(Data_Map_Internal.showMap(Data_Show.showString)(Fraction.showFraction))(complete(e3)))();
              KaTeX.subsection("4)")();
              var e4 = Data_Map_Internal.insert(Data_Ord.ordString)("pgAB")({
                  num: 1,
                  den: 6
              })(Data_Map_Internal.insert(Data_Ord.ordString)("pgnAB")({
                  num: 1,
                  den: 4
              })(Data_Map_Internal.insert(Data_Ord.ordString)("pB")({
                  num: 1,
                  den: 5
              })(Data_Map_Internal.empty)));
              tree(e4)();
              tree(complete(e4))();
              KaTeX.raw(Data_Show.show(Data_Map_Internal.showMap(Data_Show.showString)(Fraction.showFraction))(complete(e4)))();
              KaTeX.subsection("5)")();
              var e5 = Data_Map_Internal.insert(Data_Ord.ordString)("pgBA")({
                  num: 1,
                  den: 6
              })(Data_Map_Internal.insert(Data_Ord.ordString)("pgnBA")({
                  num: 1,
                  den: 6
              })(Data_Map_Internal.insert(Data_Ord.ordString)("pB")({
                  num: 1,
                  den: 5
              })(Data_Map_Internal.empty)));
              tree(e5)();
              tree(complete(e5))();
              KaTeX.raw(Data_Show.show(Data_Map_Internal.showMap(Data_Show.showString)(Fraction.showFraction))(complete(e5)))();
              KaTeX.newline();
              var rep = [ "r\xe9ponses: " ];
              return KaTeX.render((function () {
                  var $131 = $foreign.fromString(v) < 0;
                  if ($131) {
                      return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupString))("")(rep);
                  };
                  return "";
              })())();
          };
      };
  };
  var main = Data_Functor["void"](Effect.functorEffect)(function __do() {
      var v = DOM_Editor.setup();
      var v1 = DOM_Editor.createElement("input")(v.document)();
      var v2 = DOM_Editor.addEventListener(cb(v.document))(DOM_Editor.change)(v1)();
      var v3 = DOM_Editor.appendChild(v1)(v.body)();
      KaTeX.setTitle("Devoir 4 : Probabilit\xe9s conditionnelles")();
      KaTeX.raw("Nom:")();
      KaTeX.render(spacex(40))();
      KaTeX.raw("Pr\xe9nom:")();
      KaTeX.render(spacex(40))();
      KaTeX.raw("Classe:")();
      var v4 = DOM_Editor.focus(v1)();
      return Data_Unit.unit;
  });
  exports["cond"] = cond;
  exports["contr"] = contr;
  exports["ptot"] = ptot;
  exports["dep"] = dep;
  exports["complete"] = complete;
  exports["primes"] = primes;
  exports["avgNbFactors"] = avgNbFactors;
  exports["randProba"] = randProba;
  exports["validExperience"] = validExperience;
  exports["print"] = print;
  exports["tree"] = tree;
  exports["exercice"] = exercice;
  exports["majIndex"] = majIndex;
  exports["setWithIndex"] = setWithIndex;
  exports["randExercise"] = randExercise;
  exports["cb"] = cb;
  exports["spacex"] = spacex;
  exports["main"] = main;
  exports["fromString"] = $foreign.fromString;
})(PS);
PS["Main"].main();